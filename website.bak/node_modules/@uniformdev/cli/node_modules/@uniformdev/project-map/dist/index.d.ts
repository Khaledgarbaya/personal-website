import { ApiClient } from '@uniformdev/context/api';

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths$1 {
    "/api/v1/project-map": {
        /** Called to retrieve a list of project maps related to a project or a specific project map by id */
        get: {
            parameters: {
                query: {
                    /** The project to fetch project map for */
                    projectId: string;
                    /** The id of the project map to fetch */
                    projectMapId?: string;
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": {
                            projectMaps: components$1["schemas"]["ProjectMapDefinition"][];
                        };
                    };
                };
                400: external$1["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$1["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$1["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$1["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$1["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
        };
        put: {
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": {
                            /**
                             * Format: uuid
                             * @description Id of the projectMap
                             */
                            projectMapId: string;
                        };
                    };
                };
                /** OK */
                204: never;
                400: external$1["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$1["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$1["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$1["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$1["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Project map object to insert */
                        projectMap: components$1["schemas"]["ProjectMapDefinition"];
                        /**
                         * Format: uuid
                         * @description Project id to insert the projectMap into
                         */
                        projectId: string;
                    };
                };
            };
        };
        /** Called to delete a projectMap */
        delete: {
            responses: {
                /** OK */
                204: never;
                400: external$1["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$1["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$1["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$1["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$1["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description Id of the project that this projectMap belongs to
                         */
                        projectId: string;
                        /**
                         * Format: uuid
                         * @description Id of the projectMap to delete
                         */
                        projectMapId: string;
                    };
                };
            };
        };
        /** Handles preflight requests. This endpoint allows CORS. */
        options: {
            responses: {
                /** OK */
                204: never;
            };
        };
    };
}
interface components$1 {
    schemas: {
        ProjectMapDefinition: {
            /** @description The id of the projectMap node */
            id?: string;
            /** @description The name of the projectMap node */
            name: string;
            /** @description Description of the projectMap node */
            description?: string;
            /** @description The prefix of the url generated by this projectMap */
            baseUrl?: string;
            default?: boolean;
        };
    };
}
interface external$1 {
    "swagger.yml": {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** @description Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        "application/json": external$1["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        "application/json": external$1["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        "application/json": external$1["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Resource not found */
                NotFoundError: {
                    content: {
                        "application/json": external$1["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths {
    "/api/v1/project-map-nodes": {
        /** Called to get a list of nodes belonging to a specific path or Id */
        get: {
            parameters: {
                query: {
                    /** The project map id that the desired nodes belong */
                    projectMapId?: string;
                    /** The project id that contains the project map tree that this node belongs to */
                    projectId: string;
                    /** The id of the node to retrieve, cannot have both this parameter and Path */
                    id?: string;
                    /** The path of the root node to retrieve, cannot have both this parameter and Id */
                    path?: string;
                    /** Composition id to find associated sitemap nodes for */
                    compositionId?: string;
                    /** Limit the number or records returned by a number */
                    limit?: number;
                    /** Number of records to skip before returning nodes */
                    offset?: number;
                    /** Depth of the tree to fetch. Only applies when fetching by path. */
                    depth?: number;
                    /** State of compositions to fetch. 0 = draft, 64 = published. */
                    state?: number;
                    /** should the data be returned as a json tree object (or a flat array) */
                    tree?: boolean;
                    /** text search filter */
                    search?: string;
                    /**
                     * Modifies the results to include all ancestors of matched nodes, in addition to the nodes themselves.
                     * Results are sorted by path. If multiple nodes are selected, ancestors are not duplicated.
                     */
                    includeAncestors?: boolean;
                    /** include expanded helper computed properties, includes isLeaf, parentPath, pathSegment */
                    expanded?: boolean;
                    /** include basic composition information.  ID, type, state, name, and definition id. */
                    withCompositionData?: boolean;
                    /**
                     * @deprecated Returns the UI status string of the composition.
                     * This internal status is subject to change without notice, and is thus marked deprecated to discourage use of internal data.
                     */
                    withCompositionUIStatus?: boolean;
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": {
                            nodes?: components["schemas"]["ProjectMapNodeDefinition"][];
                            tree?: external["v1-project-map-tree.swagger.yml"]["components"]["schemas"]["ProjectMapTreeNodeDefinition"];
                        };
                    };
                };
                400: external["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
        };
        /** Called to insert or update a node or nodes */
        put: {
            responses: {
                /** OK */
                204: never;
                400: external["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description An array of projectMap node objects to be updated or inserted */
                        nodes: {
                            node: components["schemas"]["ProjectMapNodeUpdate"];
                            /** @description The path of the node directly prior to the location where the current node is desired to go or undefined if there isn't one */
                            previousSibling?: string;
                            /** @description The path of the node directly after the location where the current node is desired to go or undefined if there isn't one */
                            nextSibling?: string;
                        }[];
                        /**
                         * Format: uuid
                         * @description The project id of the project that the projectMap belongs to
                         */
                        projectId: string;
                        /**
                         * Format: uuid
                         * @description The projectMap id that the changing or inserting nodes belong to
                         */
                        projectMapId?: string;
                    };
                };
            };
        };
        /** Called to delete a particular projectMap node by id or path */
        delete: {
            responses: {
                /** OK */
                204: never;
                400: external["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description Id of the projectMap node to delete
                         */
                        nodeId?: string;
                        /** @description Path to the projectMap node to delete */
                        path: string;
                        /**
                         * Format: uuid
                         * @description Project map id that the node to delete belongs to
                         */
                        projectMapId?: string;
                        /**
                         * Format: uuid
                         * @description Project id that the project map belongs to
                         */
                        projectId: string;
                    } | {
                        /**
                         * Format: uuid
                         * @description Id of the projectMap node to delete
                         */
                        nodeId: string;
                        /** @description Path to the projectMap node to delete */
                        path?: string;
                        /**
                         * Format: uuid
                         * @description Project map id that the node to delete belongs to
                         */
                        projectMapId?: string;
                        /**
                         * Format: uuid
                         * @description Project id that the project map belongs to
                         */
                        projectId: string;
                    };
                };
            };
        };
        /** Handles preflight requests. This endpoint allows CORS. */
        options: {
            responses: {
                /** OK */
                204: never;
            };
        };
    };
}
interface components {
    schemas: {
        ProjectMapNodeDefinition: {
            /**
             * Format: uuid
             * @description The id of the projectMap entry
             */
            id: string;
            /** @description Dot delimited path representing the path to the current node */
            path: string;
            /** @description Ordering of the node, higher numbers go after lower numbers. */
            order?: number;
            data?: components["schemas"]["ProjectMapNodeData"];
            /** @description The name of the projectMap entry */
            name: string;
            /**
             * @description The type of the projectMap entry
             * @enum {string}
             */
            type: "composition" | "redirect" | "placeholder";
            /**
             * Format: uuid
             * @description The composition id related to the projectMap entry
             */
            compositionId?: string;
            /** @description Description of the projectMap node */
            description?: string;
            /** @description Parent path of the current node, only included if requested with the expanded flag */
            parentPath?: string;
            /** @description Last segment of the url, only included if requested with the expanded flag */
            pathSegment?: string;
            /** @description returns true if the node is a leaf node, meaning having no children, only included if requested with the expanded flag */
            isLeaf?: boolean;
            compositionData?: components["schemas"]["ProjectMapNodeCompositionData"];
        };
        /** @description Basic information about a composition from the context of a project map node. */
        ProjectMapNodeCompositionData: {
            /** @description Type of the composition instance (public_id of its definition) */
            type: string;
            /**
             * Format: uuid
             * @description The public UUID of the composition.
             */
            id: string;
            /** @description Slug pattern of this composition. */
            slug?: string | null;
            /** @description Friendly name of this composition. */
            name: string;
            /**
             * @deprecated
             * @description UI status value. Subject to change without notice; do not rely on this value. Only present when `withCompositionUIStatus` option is true.
             * @enum {string}
             */
            uiStatus?: "Draft" | "Modified" | "Published" | "Orphan";
            /**
             * @description Icon name or URL for the composition definition (e.g. 'screen' or 'https://s3/my-component.jpg')
             * @default screen
             */
            icon?: string;
            /** @description Friendly name of this Composition's Definition */
            typeName?: string;
        };
        ProjectMapNodeUpdate: {
            /**
             * Format: uuid
             * @description The id of the projectMap entry
             */
            id?: string;
            /** @description Path representing the path to the current node */
            path: string;
            /** @description Ordering of the node, higher numbers go after lower numbers. */
            order?: number;
            data?: components["schemas"]["ProjectMapNodeData"];
            /** @description The name of the projectMap entry */
            name: string;
            /**
             * @description The type of the projectMap entry
             * @enum {string}
             */
            type: "composition" | "redirect" | "placeholder";
            /**
             * Format: uuid
             * @description The composition id related to the projectMap entry
             */
            compositionId?: string;
            /** @description Description of the projectMap node */
            description?: string;
        };
        ProjectMapNodeData: {
            /** @description While performing a search if a node is a hit, this property will return true.  If it's supporting structure, like a parent of a search hit, it will return false */
            isSearchHit?: boolean;
            /** @description Query strings that are allowed to be passed to the node */
            queryStrings?: components["schemas"]["ProjectMapNodeAllowedQueryString"][];
            /**
             * @description For dynamic nodes, this is the preview value for the dynamic value.
             * The preview value is used when editing a connected composition, and is the default
             * dynamic node value unless the author has explicitly chosen a different value.
             */
            previewValue?: string;
        };
        ProjectMapNodeAllowedQueryString: {
            /** @description The name of the query string parameter */
            name: string;
            /** @description The default value of the query string if it is not provided by an incoming route path */
            value: string;
            /** @description Help text for authors who might be setting up a preview value for this query string */
            helpText?: string;
        };
    };
}
interface external {
    "swagger.yml": {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** @description Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        "application/json": external["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        "application/json": external["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        "application/json": external["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Resource not found */
                NotFoundError: {
                    content: {
                        "application/json": external["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
    "v1-project-map-tree.swagger.yml": {
        paths: {};
        components: {
            schemas: {
                ProjectMapTreeNodeDefinition: components["schemas"]["ProjectMapNodeDefinition"] & {
                    /** @description Children of the node */
                    children?: external["v1-project-map-tree.swagger.yml"]["components"]["schemas"]["ProjectMapTreeNodeDefinition"][];
                } & {
                    name: unknown;
                };
            };
        };
        operations: {};
    };
}

type ProjectMapNodeUpsertRequest = paths['/api/v1/project-map-nodes']['put']['requestBody']['content']['application/json'];
type ProjectMapNodeUpsertRequestNode = ProjectMapNodeUpsertRequest['nodes'][0]['node'];
type ProjectMapNodeDeleteRequest = paths['/api/v1/project-map-nodes']['delete']['requestBody']['content']['application/json'];
type ProjectMapNodeGetRequest = paths['/api/v1/project-map-nodes']['get']['parameters']['query'];
type ProjectMapNodeGetResponse = paths['/api/v1/project-map-nodes']['get']['responses']['200']['content']['application/json'];
type ProjectMapNode = NonNullable<ProjectMapNodeGetResponse['nodes']>[0];
type ProjectMapNodeWithId = ProjectMapNode & Required<Pick<ProjectMapNode, 'id' | 'name'>>;
type ProjectMapGetRequest = paths$1['/api/v1/project-map']['get']['parameters']['query'];
type ProjectMapGetResponse = paths$1['/api/v1/project-map']['get']['responses']['200']['content']['application/json'];
type ProjectMapUpsertRequest = paths$1['/api/v1/project-map']['put']['requestBody']['content']['application/json'];
type ProjectMapDeleteRequest = paths$1['/api/v1/project-map']['delete']['requestBody']['content']['application/json'];
type ProjectMapDefinition = ProjectMapGetResponse['projectMaps'][0];
type ProjectMapDefinitionWithId = ProjectMapDefinition & Required<Pick<ProjectMapDefinition, 'id'>>;
type ProjectMapUpsertResponse = paths$1['/api/v1/project-map']['put']['responses']['200']['content']['application/json'];
type NodeType = 'placeholder' | 'composition' | 'redirect';
type ProjectMapNodeWithProjectMapReference = ProjectMapNodeWithId & {
    projectMapId: string;
};
type ProjectMapDefinitions = {
    projectMaps: ProjectMapDefinitionWithId[];
    projectMapNodes: ProjectMapNodeWithProjectMapReference[];
};
type ProjectMapNodeData = components['schemas']['ProjectMapNodeData'];
type ProjectMapNodeAllowedQueryString = components['schemas']['ProjectMapNodeAllowedQueryString'];

declare const ROOT_NODE_PATH = "/";
type ProjectMapClientOptions = {
    /** The Uniform API host to use. Internal use. */
    apiHost?: string;
    /** The Uniform API key to use when sending API requests. This or bearer token must be specified. */
    apiKey?: string | undefined;
    /** The Uniform bearer token to use. Internal use. */
    bearerToken?: string | undefined;
    /** The Uniform project ID to connect to */
    projectId?: string | null;
    /** Specify a fetch implementation to use when fetching data. Useful if you want to only polyfill selectively. */
    fetch?: typeof fetch;
    /** Specify whether caching is disabled. */
    bypassCache?: boolean;
};
type ProjectMapSubtree = ProjectMapNode & {
    children?: Array<ProjectMapSubtree> | undefined;
    parent?: ProjectMapSubtree | undefined;
    previousSibling?: ProjectMapSubtree | undefined;
    nextSibling?: ProjectMapSubtree | undefined;
};
type WithoutProjectId<T extends {
    projectId: string;
}> = Omit<T, 'projectId'>;
declare class ProjectMapClient extends ApiClient<ProjectMapClientOptions> {
    constructor(options: ProjectMapClientOptions);
    /**
     * Get available project map defintions
     */
    getProjectMapDefinitions: () => Promise<{
        projectMaps: {
            id?: string | undefined;
            name: string;
            description?: string | undefined;
            baseUrl?: string | undefined;
            default?: boolean | undefined;
        }[];
    }>;
    /**
     * Get specific project map definition
     */
    getProjectMapDefinition: (options: WithoutProjectId<ProjectMapGetRequest>) => Promise<{
        projectMaps: {
            id?: string | undefined;
            name: string;
            description?: string | undefined;
            baseUrl?: string | undefined;
            default?: boolean | undefined;
        }[];
    }>;
    /**
     * Update or insert a project map definition
     */
    upsertProjectMap: (options: WithoutProjectId<ProjectMapUpsertRequest>) => Promise<string>;
    /**
     * Delete a project map definition
     */
    deleteProjectMap: (options: WithoutProjectId<ProjectMapDeleteRequest>) => Promise<void>;
    /**
     * Update or insert a list of project map nodes
     */
    upsertProjectMapNodes: (options: WithoutProjectId<ProjectMapNodeUpsertRequest>) => Promise<void>;
    /**
     * Delete a project map node
     */
    deleteProjectMapNode: (options: WithoutProjectId<ProjectMapNodeDeleteRequest>) => Promise<void>;
    /**
     * Get a subtree of the project map tree returned in a tree format
     */
    getSubtree: (options: WithoutProjectId<ProjectMapNodeGetRequest>) => Promise<ProjectMapSubtree | undefined>;
    /**
     * Get a subtree of the project map tree returned in a list format
     */
    getNodes: (options: WithoutProjectId<ProjectMapNodeGetRequest>) => Promise<ProjectMapNodeGetResponse>;
    private setFetchOptions;
    private cleanProjectMapNode;
}
declare class UncachedProjectMapClient extends ProjectMapClient {
    constructor(options: Omit<ProjectMapClientOptions, 'bypassCache'>);
}

type MatchedRoute = {
    match: true;
    dynamicSegmentCount: number;
    pathParams: {
        [key: string]: string;
    };
    queryParams: {
        [key: string]: string;
    };
};
type UnmatchedRoute = {
    match: false;
};
type ExpandOptions = {
    dynamicInputValues?: Record<string, string>;
    allowedQueryParams?: Array<string>;
};
declare class Route {
    #private;
    readonly route: string;
    constructor(route: string);
    get dynamicSegmentCount(): number;
    /** Tests if an incoming path matches this route */
    matches(path: string): MatchedRoute | UnmatchedRoute;
    /**
     * Creates an expanded path value for this route given dynamic input values and allowed query string values
     */
    expand(options?: ExpandOptions): string;
    static getDynamicRouteSegmentName(segment: string): string | undefined;
    static dynamicSegmentPrefix: string;
}

export { ExpandOptions, MatchedRoute, NodeType, ProjectMapClient, ProjectMapClientOptions, ProjectMapDefinition, ProjectMapDefinitionWithId, ProjectMapDefinitions, ProjectMapDeleteRequest, ProjectMapGetRequest, ProjectMapGetResponse, ProjectMapNode, ProjectMapNodeAllowedQueryString, ProjectMapNodeData, ProjectMapNodeDeleteRequest, ProjectMapNodeGetRequest, ProjectMapNodeGetResponse, ProjectMapNodeUpsertRequest, ProjectMapNodeUpsertRequestNode, ProjectMapNodeWithId, ProjectMapNodeWithProjectMapReference, ProjectMapSubtree, ProjectMapUpsertRequest, ProjectMapUpsertResponse, ROOT_NODE_PATH, Route, UncachedProjectMapClient, UnmatchedRoute };
