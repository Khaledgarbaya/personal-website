import { ApiClient, ClientOptions, ExceptProject, ApiClientError } from '@uniformdev/context/api';
export { ApiClientError } from '@uniformdev/context/api';
import Pusher from 'pusher-js';
import { Options as Options$1 } from 'p-retry';
import { Options } from 'p-throttle';
import { SerializedEditorState } from 'lexical';
import { PersonalizedVariant, TestVariant } from '@uniformdev/context';

interface components$3 {
    schemas: {
        /** @description Public ID (used in code). Do not change after creation. */
        PublicIdProperty: string;
        /** @description The definition of a component parameter */
        ComponentDefinitionParameter: {
            id: components$3["schemas"]["PublicIdProperty"];
            /** @description Friendly name of the parameter */
            name: string;
            /** @description Appears next to the parameter in the Composition editor */
            helpText?: string;
            /** @description Type name of the parameter (provided by a Uniform integration) */
            type: string;
            /** @description The configuration object for the type (type-specific) */
            typeConfig?: unknown;
        };
        /** @description The definition of a named component slot that can contain other components */
        ComponentDefinitionSlot: {
            id: components$3["schemas"]["PublicIdProperty"];
            /** @description Friendly name of the slot */
            name: string;
            /** @description A list of component definition public IDs that are allowed in this named slot */
            allowedComponents: string[];
            /**
             * @description Whether this slot inherits its allowed components from the parent slot it lives in. If true, allowedComponents is irrelevant.
             * If allowAllComponents is true, this value is ignored.
             *
             * @default false
             */
            inheritAllowedComponents: boolean;
            /**
             * @description When false or not defined, only components in allowedComponents may be added to this slot - and if allowedComponents is empty, nothing can be added.
             * When true, every component and pattern that is defined may be added to this slot regardless of any other setting including inheritAllowedComponents.
             */
            allowAllComponents?: boolean;
            /**
             * @description When not defined, or false: all patterns for components listed in allowedComponents are automatically allowed in the slot.
             * When true: patterns for components listed in allowedComponents are not allowed in the slot unless explicitly added to allowedComponents as `$p:<patternid>`
             */
            patternsInAllowedComponents?: boolean;
            /** @description Minimum valid number of components in this slot */
            minComponents?: number;
            /** @description Maximum valid number of components in this slot */
            maxComponents?: number;
        };
        /** @description The definition of a composition's slug settings */
        ComponentDefinitionSlugSettings: {
            /**
             * @description Whether the slug is required
             * no: slug is optional
             * yes: slug is required
             * disabled: slug is disabled and will not be shown in the editor
             *
             * @default no
             * @enum {string}
             */
            required?: "no" | "yes" | "disabled";
            /**
             * @description Slug uniqueness configuration.
             * no = no unique constraint
             * local = must be unique within this component type
             * global = must be unique across all component types
             *
             * @enum {string}
             */
            unique?: "no" | "local" | "global";
            /** @description Regular expression slugs must match */
            regularExpression?: string;
            /**
             * @description Custom error message when regular expression validation fails.
             * Has no effect if `regularExpression` is not set.
             */
            regularExpressionMessage?: string;
        };
        /** @description The definition of a component variant */
        ComponentDefinitionVariant: {
            id: components$3["schemas"]["PublicIdProperty"];
            /** @description Friendly name of the variant */
            name: string;
        };
        /** @description Permission set for a component defintion */
        ComponentDefinitionPermission: {
            roleId: components$3["schemas"]["PublicIdProperty"];
            /**
             * @description Permission type for this permission ComponentDefinition:
             * read | write | create | delete
             *
             * @enum {string}
             */
            permission: "read" | "write" | "create" | "delete";
            /** @description State of the component that this permission applies to */
            state: number;
        };
        /** @description Defines a component type that can live on a Composition */
        ComponentDefinition: {
            id: components$3["schemas"]["PublicIdProperty"];
            /** @description Friendly name of the component definition */
            name: string;
            /**
             * @description Icon name or URL for the component definition (e.g. 'screen' or 'https://s3/my-component.jpg')
             * @default screen
             */
            icon?: string;
            /**
             * @description The public ID of the parameter whose value should be used to create a display title for this component in the UI.
             * The parameter type must support being used as a title parameter for this to work.
             */
            titleParameter?: string | null;
            /**
             * @description Whether this component type can be the root of a composition. If false, this component is only used within slots on other components.
             * @default false
             */
            canBeComposition?: boolean;
            /** @description The parameters for this component. Parameters are key-value pairs that can be anything from text values to links to CMS entries. */
            parameters?: components$3["schemas"]["ComponentDefinitionParameter"][];
            /**
             * @description if this component uses team permissions or custom permissions
             * @default true
             */
            useTeamPermissions?: boolean;
            /** @description Custom role permissions for this component definition */
            permissions?: components$3["schemas"]["ComponentDefinitionPermission"][];
            /** @description The named slots for this component; placement areas where arrays of other components can be added. */
            slots?: components$3["schemas"]["ComponentDefinitionSlot"][];
            slugSettings?: components$3["schemas"]["ComponentDefinitionSlugSettings"];
            /** @description Default component instance value */
            defaults?: components$3["schemas"]["ComponentInstance"] | null;
            /** @description Named variants for this component; enables creation of visual variants that use the same parameter data */
            variants?: components$3["schemas"]["ComponentDefinitionVariant"][];
            /** @description Created date string for this definition (ignored for writes) */
            created?: string;
            /** @description Last modified date string for this definition (ignored for writes) */
            updated?: string;
        };
        /** @description Defines a content type */
        ContentType: {
            id: components$3["schemas"]["PublicIdProperty"];
            /** @description Friendly name of the content type */
            name: string;
            /**
             * @description The public ID of the field whose value should be used to create a display title for entries of this content type in the UI.
             * The field type must support being used as a title field for this to work.
             */
            titleField?: string | null;
            /** @description The fields for this content type. Fields are key-value pairs that can be text, numbers, JSON objects, etc. */
            fields?: components$3["schemas"]["ComponentDefinitionParameter"][];
            /** @description Created date string for this content type (ignored for writes) */
            created?: string;
            /** @description Last modified date string for this content type (ignored for writes) */
            updated?: string;
        };
        /** @description Defines an editable parameter on a component. */
        ComponentParameter: {
            /** @description The value of the parameter. Any JSON-serializable value is acceptable. */
            value: unknown;
            /** @description The type of the parameter. Determines how it is displayed when editing, and tells the consumer how to process it. */
            type: string;
            connectedData?: components$3["schemas"]["DataElementConnectionDefinition"];
        };
        /**
         * @description Defines a connection to a data element on a data resource.
         *
         * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
         * Future updates that do not break the edgehanced/data-bound state of a composition may be made without notice.
         */
        DataElementConnectionDefinition: {
            /** @description A JSON Pointer expression that defines the data element to connect the parameter to. */
            pointer: string;
            /**
             * @description The syntax used to select the data element to bind to
             * @enum {string}
             */
            syntax: "jptr";
        };
        /** @description Defines the shape of a component instance served by the composition API. */
        ComponentInstance: {
            /** @description Type of the component instance (public_id of its definition) */
            type: string;
            /** @description Component parameter values for the component instance */
            parameters?: {
                [key: string]: components$3["schemas"]["ComponentParameter"];
            };
            /** @description Public ID of alternate visual appearance for this component, if any selected */
            variant?: string;
            /** @description Slots containing any child components */
            slots?: {
                [key: string]: components$3["schemas"]["ComponentInstance"][];
            };
            /**
             * @description Unique identifier of the component within the composition.
             * No assumptions should be made about the format of this value other than "it will be unique."
             * This is not set unless specifically requested via `withComponentIDs` API parameter.
             */
            _id?: string;
            /** @description Indicates this component instance should be sourced from a pattern library pattern. */
            _pattern?: string;
            _dataResources?: components$3["schemas"]["DataResourceDefinitions"];
            /**
             * @description Data definitions coming from a pattern resolved for this component. Merged with _dataResources during resolution.
             * Means nothing for PUTs; it will be ignored.
             */
            _patternDataResources?: {
                [key: string]: components$3["schemas"]["DataResourceDefinition"];
            };
            /**
             * @description Describes why the pattern could not be resolved, if a pattern could not be resolved. For PUTs, this is allowed but ignored.
             * CYCLIC: A cyclic pattern graph was detected, which could not be resolved because it would cause an infinite loop.
             * NOTFOUND: The pattern ID referenced could not be found. It may have been deleted, or not be published yet.
             * Means nothing for PUTs; it will be ignored.
             *
             * @enum {string}
             */
            _patternError?: "NOTFOUND" | "CYCLIC";
            /**
             * @description Defines patch overrides to component IDs that live in the composition.
             * This can be used to override parameters that are defined on patterns,
             * including nested patterns, with values that are specific to this composition.
             * The keys in this object are component IDs.
             * Overrides are applied from the top down, so for example if both the composition
             * and a pattern on the composition define an override on a nested pattern,
             * the composition's override replaces the pattern's.
             *
             * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
             * Future updates that do not break the overrides-applied state of a composition may be made without notice.
             */
            _overrides?: {
                [key: string]: components$3["schemas"]["ComponentOverride"];
            };
            /**
             * @description When used on a pattern, defines how the pattern's parameters may be overridden
             * by consumers of the pattern.
             *
             * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
             * Future updates that do not break the overrides-applied state of a composition may be made without notice.
             */
            _overridability?: components$3["schemas"]["ComponentOverridability"];
        };
        /** @description Defines the shape of the root component in a composition */
        RootComponentInstance: {
            /** @description Type of the component instance (public_id of its definition) */
            type: string;
            /** @description Component parameter values for the component instance */
            parameters?: {
                [key: string]: components$3["schemas"]["ComponentParameter"];
            };
            /** @description Public ID of alternate visual appearance for this component, if any selected */
            variant?: string;
            /** @description Project map nodes associated with this component.  Must pass withProjectMapNodes parameter to be populated. */
            projectMapNodes?: components$3["schemas"]["CompositionProjectMapNodeInfo"][];
            /** @description Slots containing any child components */
            slots?: {
                [key: string]: components$3["schemas"]["ComponentInstance"][];
            };
            /** @description The public UUID of the composition. */
            _id: string;
            /** @description Slug pattern of this component. */
            _slug?: string | null;
            /** @description Friendly name of this component. */
            _name: string;
            _dataResources?: components$3["schemas"]["DataResourceDefinitions"];
            /**
             * @description Defines patch overrides to component IDs that live in the composition.
             * This can be used to override parameters that are defined on patterns,
             * including nested patterns, with values that are specific to this composition.
             * The keys in this object are component IDs.
             * Overrides are applied from the top down, so for example if both the composition
             * and a pattern on the composition define an override on a nested pattern,
             * the composition's override replaces the pattern's.
             *
             * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
             * Future updates that do not break the overrides-applied state of a composition may be made without notice.
             */
            _overrides?: {
                [key: string]: components$3["schemas"]["ComponentOverride"];
            };
            /**
             * @description When used on a pattern, defines how the pattern's parameters may be overridden
             * by consumers of the pattern.
             *
             * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
             * Future updates that do not break the overrides-applied state of a composition may be made without notice.
             */
            _overridability?: components$3["schemas"]["ComponentOverridability"];
        };
        /**
         * @description Defines how to override a specific component.
         *
         * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
         * Future updates that do not break the overrides-applied state of a composition may be made without notice.
         */
        ComponentOverride: {
            parameters?: {
                [key: string]: components$3["schemas"]["ComponentParameter"];
            };
            variant?: string;
        };
        /**
         * @description Defines how a component on a pattern may have its values overridden.
         * NOTE: Data resources' overridability is defined in the data resource definition, not here.
         *
         * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
         * Future updates that do not break the overrides-applied state of a composition may be made without notice.
         */
        ComponentOverridability: {
            /** @description Defines component parameter value overrides. Keys are the parameter public ID. */
            parameters?: {
                [key: string]: components$3["schemas"]["OverrideOptions"];
            };
            /** @description Allows overriding a display variant is allowed, if it is defined on the component the pattern is derived from. Default = false. */
            variants?: boolean;
        };
        /**
         * @description Whether a parameter is overridable
         *
         * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
         * Future updates that do not break the overrides-applied state of a composition may be made without notice.
         *
         * @enum {string}
         */
        OverrideOptions: "yes" | "no";
        /**
         * @description An instance of a data source (i.e. "Master environment of the stable space", "Yelp API", "Sanity dev dataset").
         * These are created in the UI and shared across a whole project.
         * NOTE: if you acquire a list of data sources or do not have manage permissions, you will receive "SECRET"
         * for all header, parameter, and variable values to obscure the actual encrypted secret value.
         */
        DataSource: {
            /** @description Public ID of the data source */
            id: string;
            /** @description Display name of the data source */
            displayName: string;
            /** @description The type of data connector this connects to (e.g. 'cms-items', provided by an intalled integration) */
            connectorType: string;
            /** @description Base resource URL of the data source. No trailing slash. */
            baseUrl: string;
            /** @description HTTP headers to pass with requests to the data source */
            headers?: {
                key: string;
                value: string;
            }[];
            /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
            parameters?: {
                key: string;
                value: string;
            }[];
            /** @description Variables needed to make calls to the data source */
            variables?: {
                [key: string]: components$3["schemas"]["DataVariableDefinition"];
            };
            /** @description Custom configuration specific to the data source being defined (used to maintain UI state for custom integrations) */
            custom?: {
                [key: string]: unknown;
            };
        };
        /** @description A specific type of data that a Data Source can provide (i.e. "Recipe", "Recipes List by Tag", "Yelp Reviews of My Restaurant"). These are created in the UI and shared a whole project. */
        DataType: {
            /** @description Public ID of the data type */
            id: string;
            /** @description Display name of the data type */
            displayName: string;
            /** @description Public ID of the associated data source */
            dataSourceId: string;
            /**
             * @description A connector-specific archetype for this data type; used to select UI as well as perform any
             * necessary post-processing on the response. e.g. 'cms-entry', 'cms-query'. Can be undefined if
             * no special UI or processing is required.
             */
            archetype?: string;
            allowedOnComponents?: string[];
            /** @description Resource path, appended to the data source's baseUrl (e.g. baseUrl = https://base.url, path = /v1/endpoint -> final URL https://base.url/v1/endpoint). Must have leading slash. */
            path: string;
            /** @description Time-to-live (in seconds) for the primary resource data cache. */
            ttl?: number;
            /** @description Long term data resource cache configuration. */
            longTermCache?: {
                /** @description A flag to turn the long term cache on. */
                enabled: boolean;
                /** @description Time-to-live (in hours) for the long term resource data cache. */
                ttlInHours?: number;
            };
            /** @description A key for the resource data cache purging. */
            purgeKey?: string;
            /** @description URL to a custom badge icon for the Uniform dashboard for this data type. If not set falls back to the data connector or integration icons. */
            badgeIconUrl?: string;
            /** @description HTTP headers to pass with requests to the data type. Merged with headers from the data source, overriding identical keys. */
            headers?: {
                key: string;
                value: string;
            }[];
            /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
            parameters?: {
                key: string;
                value: string;
            }[];
            /** @description Body to pass with requests to the data type (ignored unless method is POST) */
            body?: string;
            /**
             * @description HTTP method to use with requests to the data type.
             * @default GET
             * @enum {string}
             */
            method: "GET" | "POST" | "HEAD";
            /** @description Variables needed to make calls to the data type. Merged with variables from the data source, overriding identical keys. */
            variables?: {
                [key: string]: components$3["schemas"]["DataVariableDefinition"];
            };
            /** @description Custom configuration specific to the data source being defined */
            custom?: {
                [key: string]: unknown;
            };
        };
        /** @description Defines the shape of a data variable on a Data Source or Data Type */
        DataVariableDefinition: {
            /** @description Display name of the data variable */
            displayName?: string;
            /** @description Explanatory text that is provided to the data resource editor to explain what this variable does. */
            helpText?: string;
            /**
             * @description Type of the data variable. Optionally used as a point of reference for custom integrations to decide how to render an editor for a variable.
             * @default text
             */
            type?: string;
            /** @description Default value of the data variable */
            default: string;
            /** @description Sets the order of the variable when displayed in a list with other variables. If not set, the order defaults to alphabetical with any explicitly set orders first in the list. */
            order?: number;
        };
        /**
         * @description Data definitions attached to this component. The property name is the key of the data in the data document.
         * Note: data definitions are inherited from ancestors at runtime (and may be overridden by descendants that use the same key).
         */
        DataResourceDefinitions: {
            [key: string]: components$3["schemas"]["DataResourceDefinition"];
        };
        /** @description Defines a data resource, which is a named JSON document, usually from an API response, which may be projected onto parameters */
        DataResourceDefinition: {
            /** @description Public ID of the data type that provides this data */
            type: string;
            /** @description Whether this data is a pattern data resource that can be overridden when a pattern is referenced on another composition. If this is not a pattern composition, this has no meaning and should not be used. If unspecified, the default is false. */
            isPatternParameter?: boolean;
            /**
             * @description When true, the default data resource of a pattern data parameter (isPatternParameter=true) will be ignored when the pattern is referenced.
             * Unless specifically overridden, the pattern data parameter will be provided with a null default value - leaving any data connections to it unresolvable.
             * If isPatternParameter is false or undefined, this has no meaning.
             */
            ignorePatternParameterDefault?: boolean;
            variables?: components$3["schemas"]["DataResourceVariables"];
        };
        /** @description Variable values for a data resource. */
        DataResourceVariables: {
            [key: string]: string;
        };
        /** @description Project map node information related to a component. */
        CompositionProjectMapNodeInfo: {
            /**
             * Format: uuid
             * @description Unique identifier for the project map node
             */
            id: string;
            /** @description Path of the project map node */
            path: string;
            /**
             * Format: uuid
             * @description Unique identifier for the project map that this node belongs to.
             */
            projectMapId: string;
        };
    };
}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths$7 {
    "/api/v1/canvas-definitions": {
        get: {
            parameters: {
                query: {
                    /** The project ID to get component definitions for. */
                    projectId: string;
                    /** Limit list to one result by ID (response remains an array). */
                    componentId?: string;
                    /** Number of records to skip */
                    offset?: number;
                    /** Max number of records to return */
                    limit?: number;
                    /** Whether to fetch system meta-component definitions (personalize, test, etc) */
                    includeSystem?: boolean;
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": {
                            /** @description Component definitions that match the query */
                            componentDefinitions: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinition"][];
                        };
                    };
                };
                400: external$8["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$8["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$8["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$8["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$8["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
        };
        /** Upserts a component definition */
        put: {
            responses: {
                /** OK */
                204: never;
                400: external$8["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$8["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$8["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$8["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$8["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description The project ID to upsert the component definition to
                         */
                        projectId: string;
                        componentDefinition: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinition"];
                    };
                };
            };
        };
        /** Deletes a component definition */
        delete: {
            responses: {
                /** OK */
                204: never;
                400: external$8["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$8["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$8["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$8["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$8["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The public ID of the component definition to delete */
                        componentId: string;
                        /**
                         * Format: uuid
                         * @description The ID of the project the composition to delete belongs to
                         */
                        projectId: string;
                    };
                };
            };
        };
        /** Handles preflight requests. This endpoint allows CORS. */
        options: {
            responses: {
                /** OK */
                204: never;
            };
        };
    };
}
interface external$8 {
    "swagger.yml": {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** @description Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        "application/json": external$8["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        "application/json": external$8["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        "application/json": external$8["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Resource not found */
                NotFoundError: {
                    content: {
                        "application/json": external$8["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
    "uniform-canvas-types.swagger.yml": {
        paths: {};
        components: {
            schemas: {
                /** @description Public ID (used in code). Do not change after creation. */
                PublicIdProperty: string;
                /** @description The definition of a component parameter */
                ComponentDefinitionParameter: {
                    id: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the parameter */
                    name: string;
                    /** @description Appears next to the parameter in the Composition editor */
                    helpText?: string;
                    /** @description Type name of the parameter (provided by a Uniform integration) */
                    type: string;
                    /** @description The configuration object for the type (type-specific) */
                    typeConfig?: unknown;
                };
                /** @description The definition of a named component slot that can contain other components */
                ComponentDefinitionSlot: {
                    id: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the slot */
                    name: string;
                    /** @description A list of component definition public IDs that are allowed in this named slot */
                    allowedComponents: string[];
                    /**
                     * @description Whether this slot inherits its allowed components from the parent slot it lives in. If true, allowedComponents is irrelevant.
                     * If allowAllComponents is true, this value is ignored.
                     *
                     * @default false
                     */
                    inheritAllowedComponents: boolean;
                    /**
                     * @description When false or not defined, only components in allowedComponents may be added to this slot - and if allowedComponents is empty, nothing can be added.
                     * When true, every component and pattern that is defined may be added to this slot regardless of any other setting including inheritAllowedComponents.
                     */
                    allowAllComponents?: boolean;
                    /**
                     * @description When not defined, or false: all patterns for components listed in allowedComponents are automatically allowed in the slot.
                     * When true: patterns for components listed in allowedComponents are not allowed in the slot unless explicitly added to allowedComponents as `$p:<patternid>`
                     */
                    patternsInAllowedComponents?: boolean;
                    /** @description Minimum valid number of components in this slot */
                    minComponents?: number;
                    /** @description Maximum valid number of components in this slot */
                    maxComponents?: number;
                };
                /** @description The definition of a composition's slug settings */
                ComponentDefinitionSlugSettings: {
                    /**
                     * @description Whether the slug is required
                     * no: slug is optional
                     * yes: slug is required
                     * disabled: slug is disabled and will not be shown in the editor
                     *
                     * @default no
                     * @enum {string}
                     */
                    required?: "no" | "yes" | "disabled";
                    /**
                     * @description Slug uniqueness configuration.
                     * no = no unique constraint
                     * local = must be unique within this component type
                     * global = must be unique across all component types
                     *
                     * @enum {string}
                     */
                    unique?: "no" | "local" | "global";
                    /** @description Regular expression slugs must match */
                    regularExpression?: string;
                    /**
                     * @description Custom error message when regular expression validation fails.
                     * Has no effect if `regularExpression` is not set.
                     */
                    regularExpressionMessage?: string;
                };
                /** @description The definition of a component variant */
                ComponentDefinitionVariant: {
                    id: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the variant */
                    name: string;
                };
                /** @description Permission set for a component defintion */
                ComponentDefinitionPermission: {
                    roleId: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /**
                     * @description Permission type for this permission ComponentDefinition:
                     * read | write | create | delete
                     *
                     * @enum {string}
                     */
                    permission: "read" | "write" | "create" | "delete";
                    /** @description State of the component that this permission applies to */
                    state: number;
                };
                /** @description Defines a component type that can live on a Composition */
                ComponentDefinition: {
                    id: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the component definition */
                    name: string;
                    /**
                     * @description Icon name or URL for the component definition (e.g. 'screen' or 'https://s3/my-component.jpg')
                     * @default screen
                     */
                    icon?: string;
                    /**
                     * @description The public ID of the parameter whose value should be used to create a display title for this component in the UI.
                     * The parameter type must support being used as a title parameter for this to work.
                     */
                    titleParameter?: string | null;
                    /**
                     * @description Whether this component type can be the root of a composition. If false, this component is only used within slots on other components.
                     * @default false
                     */
                    canBeComposition?: boolean;
                    /** @description The parameters for this component. Parameters are key-value pairs that can be anything from text values to links to CMS entries. */
                    parameters?: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionParameter"][];
                    /**
                     * @description if this component uses team permissions or custom permissions
                     * @default true
                     */
                    useTeamPermissions?: boolean;
                    /** @description Custom role permissions for this component definition */
                    permissions?: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionPermission"][];
                    /** @description The named slots for this component; placement areas where arrays of other components can be added. */
                    slots?: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionSlot"][];
                    slugSettings?: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionSlugSettings"];
                    /** @description Default component instance value */
                    defaults?: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"] | null;
                    /** @description Named variants for this component; enables creation of visual variants that use the same parameter data */
                    variants?: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionVariant"][];
                    /** @description Created date string for this definition (ignored for writes) */
                    created?: string;
                    /** @description Last modified date string for this definition (ignored for writes) */
                    updated?: string;
                };
                /** @description Defines a content type */
                ContentType: {
                    id: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the content type */
                    name: string;
                    /**
                     * @description The public ID of the field whose value should be used to create a display title for entries of this content type in the UI.
                     * The field type must support being used as a title field for this to work.
                     */
                    titleField?: string | null;
                    /** @description The fields for this content type. Fields are key-value pairs that can be text, numbers, JSON objects, etc. */
                    fields?: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionParameter"][];
                    /** @description Created date string for this content type (ignored for writes) */
                    created?: string;
                    /** @description Last modified date string for this content type (ignored for writes) */
                    updated?: string;
                };
                /** @description Defines an editable parameter on a component. */
                ComponentParameter: {
                    /** @description The value of the parameter. Any JSON-serializable value is acceptable. */
                    value: unknown;
                    /** @description The type of the parameter. Determines how it is displayed when editing, and tells the consumer how to process it. */
                    type: string;
                    connectedData?: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataElementConnectionDefinition"];
                };
                /**
                 * @description Defines a connection to a data element on a data resource.
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the edgehanced/data-bound state of a composition may be made without notice.
                 */
                DataElementConnectionDefinition: {
                    /** @description A JSON Pointer expression that defines the data element to connect the parameter to. */
                    pointer: string;
                    /**
                     * @description The syntax used to select the data element to bind to
                     * @enum {string}
                     */
                    syntax: "jptr";
                };
                /** @description Defines the shape of a component instance served by the composition API. */
                ComponentInstance: {
                    /** @description Type of the component instance (public_id of its definition) */
                    type: string;
                    /** @description Component parameter values for the component instance */
                    parameters?: {
                        [key: string]: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    /** @description Public ID of alternate visual appearance for this component, if any selected */
                    variant?: string;
                    /** @description Slots containing any child components */
                    slots?: {
                        [key: string]: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"][];
                    };
                    /**
                     * @description Unique identifier of the component within the composition.
                     * No assumptions should be made about the format of this value other than "it will be unique."
                     * This is not set unless specifically requested via `withComponentIDs` API parameter.
                     */
                    _id?: string;
                    /** @description Indicates this component instance should be sourced from a pattern library pattern. */
                    _pattern?: string;
                    _dataResources?: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinitions"];
                    /**
                     * @description Data definitions coming from a pattern resolved for this component. Merged with _dataResources during resolution.
                     * Means nothing for PUTs; it will be ignored.
                     */
                    _patternDataResources?: {
                        [key: string]: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinition"];
                    };
                    /**
                     * @description Describes why the pattern could not be resolved, if a pattern could not be resolved. For PUTs, this is allowed but ignored.
                     * CYCLIC: A cyclic pattern graph was detected, which could not be resolved because it would cause an infinite loop.
                     * NOTFOUND: The pattern ID referenced could not be found. It may have been deleted, or not be published yet.
                     * Means nothing for PUTs; it will be ignored.
                     *
                     * @enum {string}
                     */
                    _patternError?: "NOTFOUND" | "CYCLIC";
                    /**
                     * @description Defines patch overrides to component IDs that live in the composition.
                     * This can be used to override parameters that are defined on patterns,
                     * including nested patterns, with values that are specific to this composition.
                     * The keys in this object are component IDs.
                     * Overrides are applied from the top down, so for example if both the composition
                     * and a pattern on the composition define an override on a nested pattern,
                     * the composition's override replaces the pattern's.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overrides?: {
                        [key: string]: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverride"];
                    };
                    /**
                     * @description When used on a pattern, defines how the pattern's parameters may be overridden
                     * by consumers of the pattern.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overridability?: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverridability"];
                };
                /** @description Defines the shape of the root component in a composition */
                RootComponentInstance: {
                    /** @description Type of the component instance (public_id of its definition) */
                    type: string;
                    /** @description Component parameter values for the component instance */
                    parameters?: {
                        [key: string]: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    /** @description Public ID of alternate visual appearance for this component, if any selected */
                    variant?: string;
                    /** @description Project map nodes associated with this component.  Must pass withProjectMapNodes parameter to be populated. */
                    projectMapNodes?: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["CompositionProjectMapNodeInfo"][];
                    /** @description Slots containing any child components */
                    slots?: {
                        [key: string]: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"][];
                    };
                    /** @description The public UUID of the composition. */
                    _id: string;
                    /** @description Slug pattern of this component. */
                    _slug?: string | null;
                    /** @description Friendly name of this component. */
                    _name: string;
                    _dataResources?: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinitions"];
                    /**
                     * @description Defines patch overrides to component IDs that live in the composition.
                     * This can be used to override parameters that are defined on patterns,
                     * including nested patterns, with values that are specific to this composition.
                     * The keys in this object are component IDs.
                     * Overrides are applied from the top down, so for example if both the composition
                     * and a pattern on the composition define an override on a nested pattern,
                     * the composition's override replaces the pattern's.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overrides?: {
                        [key: string]: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverride"];
                    };
                    /**
                     * @description When used on a pattern, defines how the pattern's parameters may be overridden
                     * by consumers of the pattern.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overridability?: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverridability"];
                };
                /**
                 * @description Defines how to override a specific component.
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                 */
                ComponentOverride: {
                    parameters?: {
                        [key: string]: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    variant?: string;
                };
                /**
                 * @description Defines how a component on a pattern may have its values overridden.
                 * NOTE: Data resources' overridability is defined in the data resource definition, not here.
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                 */
                ComponentOverridability: {
                    /** @description Defines component parameter value overrides. Keys are the parameter public ID. */
                    parameters?: {
                        [key: string]: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["OverrideOptions"];
                    };
                    /** @description Allows overriding a display variant is allowed, if it is defined on the component the pattern is derived from. Default = false. */
                    variants?: boolean;
                };
                /**
                 * @description Whether a parameter is overridable
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                 *
                 * @enum {string}
                 */
                OverrideOptions: "yes" | "no";
                /**
                 * @description An instance of a data source (i.e. "Master environment of the stable space", "Yelp API", "Sanity dev dataset").
                 * These are created in the UI and shared across a whole project.
                 * NOTE: if you acquire a list of data sources or do not have manage permissions, you will receive "SECRET"
                 * for all header, parameter, and variable values to obscure the actual encrypted secret value.
                 */
                DataSource: {
                    /** @description Public ID of the data source */
                    id: string;
                    /** @description Display name of the data source */
                    displayName: string;
                    /** @description The type of data connector this connects to (e.g. 'cms-items', provided by an intalled integration) */
                    connectorType: string;
                    /** @description Base resource URL of the data source. No trailing slash. */
                    baseUrl: string;
                    /** @description HTTP headers to pass with requests to the data source */
                    headers?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
                    parameters?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Variables needed to make calls to the data source */
                    variables?: {
                        [key: string]: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataVariableDefinition"];
                    };
                    /** @description Custom configuration specific to the data source being defined (used to maintain UI state for custom integrations) */
                    custom?: {
                        [key: string]: unknown;
                    };
                };
                /** @description A specific type of data that a Data Source can provide (i.e. "Recipe", "Recipes List by Tag", "Yelp Reviews of My Restaurant"). These are created in the UI and shared a whole project. */
                DataType: {
                    /** @description Public ID of the data type */
                    id: string;
                    /** @description Display name of the data type */
                    displayName: string;
                    /** @description Public ID of the associated data source */
                    dataSourceId: string;
                    /**
                     * @description A connector-specific archetype for this data type; used to select UI as well as perform any
                     * necessary post-processing on the response. e.g. 'cms-entry', 'cms-query'. Can be undefined if
                     * no special UI or processing is required.
                     */
                    archetype?: string;
                    allowedOnComponents?: string[];
                    /** @description Resource path, appended to the data source's baseUrl (e.g. baseUrl = https://base.url, path = /v1/endpoint -> final URL https://base.url/v1/endpoint). Must have leading slash. */
                    path: string;
                    /** @description Time-to-live (in seconds) for the primary resource data cache. */
                    ttl?: number;
                    /** @description Long term data resource cache configuration. */
                    longTermCache?: {
                        /** @description A flag to turn the long term cache on. */
                        enabled: boolean;
                        /** @description Time-to-live (in hours) for the long term resource data cache. */
                        ttlInHours?: number;
                    };
                    /** @description A key for the resource data cache purging. */
                    purgeKey?: string;
                    /** @description URL to a custom badge icon for the Uniform dashboard for this data type. If not set falls back to the data connector or integration icons. */
                    badgeIconUrl?: string;
                    /** @description HTTP headers to pass with requests to the data type. Merged with headers from the data source, overriding identical keys. */
                    headers?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
                    parameters?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Body to pass with requests to the data type (ignored unless method is POST) */
                    body?: string;
                    /**
                     * @description HTTP method to use with requests to the data type.
                     * @default GET
                     * @enum {string}
                     */
                    method: "GET" | "POST" | "HEAD";
                    /** @description Variables needed to make calls to the data type. Merged with variables from the data source, overriding identical keys. */
                    variables?: {
                        [key: string]: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataVariableDefinition"];
                    };
                    /** @description Custom configuration specific to the data source being defined */
                    custom?: {
                        [key: string]: unknown;
                    };
                };
                /** @description Defines the shape of a data variable on a Data Source or Data Type */
                DataVariableDefinition: {
                    /** @description Display name of the data variable */
                    displayName?: string;
                    /** @description Explanatory text that is provided to the data resource editor to explain what this variable does. */
                    helpText?: string;
                    /**
                     * @description Type of the data variable. Optionally used as a point of reference for custom integrations to decide how to render an editor for a variable.
                     * @default text
                     */
                    type?: string;
                    /** @description Default value of the data variable */
                    default: string;
                    /** @description Sets the order of the variable when displayed in a list with other variables. If not set, the order defaults to alphabetical with any explicitly set orders first in the list. */
                    order?: number;
                };
                /**
                 * @description Data definitions attached to this component. The property name is the key of the data in the data document.
                 * Note: data definitions are inherited from ancestors at runtime (and may be overridden by descendants that use the same key).
                 */
                DataResourceDefinitions: {
                    [key: string]: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinition"];
                };
                /** @description Defines a data resource, which is a named JSON document, usually from an API response, which may be projected onto parameters */
                DataResourceDefinition: {
                    /** @description Public ID of the data type that provides this data */
                    type: string;
                    /** @description Whether this data is a pattern data resource that can be overridden when a pattern is referenced on another composition. If this is not a pattern composition, this has no meaning and should not be used. If unspecified, the default is false. */
                    isPatternParameter?: boolean;
                    /**
                     * @description When true, the default data resource of a pattern data parameter (isPatternParameter=true) will be ignored when the pattern is referenced.
                     * Unless specifically overridden, the pattern data parameter will be provided with a null default value - leaving any data connections to it unresolvable.
                     * If isPatternParameter is false or undefined, this has no meaning.
                     */
                    ignorePatternParameterDefault?: boolean;
                    variables?: external$8["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceVariables"];
                };
                /** @description Variable values for a data resource. */
                DataResourceVariables: {
                    [key: string]: string;
                };
                /** @description Project map node information related to a component. */
                CompositionProjectMapNodeInfo: {
                    /**
                     * Format: uuid
                     * @description Unique identifier for the project map node
                     */
                    id: string;
                    /** @description Path of the project map node */
                    path: string;
                    /**
                     * Format: uuid
                     * @description Unique identifier for the project map that this node belongs to.
                     */
                    projectMapId: string;
                };
            };
        };
        operations: {};
    };
}

type SharedComponents$1 = components$3['schemas'];
type Api$1 = paths$7['/api/v1/canvas-definitions'];
/** Shape of the GET response from /api/v1/canvas-definitions */
type ComponentDefinitionGetResponse = Api$1['get']['responses']['200']['content']['application/json'];
/** Shape of the PUT request body for /api/v1/canvas-definitions */
type ComponentDefinitionPutParameters = Api$1['put']['requestBody']['content']['application/json'];
/** Shape of the DELETE request body for /api/v1/canvas-definitions */
type ComponentDefinitionDeleteParameters = Api$1['delete']['requestBody']['content']['application/json'];
/** Query parameter options for GET /api/v1/canvas-definitions */
type ComponentDefinitionGetParameters = Api$1['get']['parameters']['query'];
/** The definition of a component parameter */
type ComponentDefinitionParameter<TConfig = unknown> = Omit<components$3['schemas']['ComponentDefinitionParameter'], 'typeConfig'> & {
    typeConfig?: TConfig;
};
/** The definition of a component visual variant */
type ComponentDefinitionVariant = SharedComponents$1['ComponentDefinitionVariant'];
/** The definition of a composition's slug settings */
type ComponentDefinitionSlugSettings = SharedComponents$1['ComponentDefinitionSlugSettings'];
/** The definition of a named component slot that can contain other components */
type ComponentDefinitionSlot = SharedComponents$1['ComponentDefinitionSlot'];
/** Permission set for a component defintion */
type ComponentDefinitionPermission = SharedComponents$1['ComponentDefinitionPermission'];
/** Defines a component type that can live on a Composition */
type ComponentDefinition = SharedComponents$1['ComponentDefinition'];

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths$6 {
    "/api/v1/data-source": {
        get: {
            parameters: {
                query: {
                    dataSourceId: string;
                    projectId: string;
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": {
                            result: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataSource"];
                        };
                    };
                };
                400: external$7["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$7["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$7["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$7["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$7["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
        };
        put: {
            responses: {
                /** OK */
                204: never;
                400: external$7["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$7["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$7["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$7["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$7["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        data: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataSource"];
                        /** Format: uuid */
                        projectId: string;
                        /**
                         * Format: uuid
                         * @deprecated
                         * @description Do not use. May be removed in future.
                         */
                        integrationId?: string;
                        /** @description The integration type that the data source is attached to. Must be installed in the project. */
                        integrationType?: string;
                    };
                };
            };
        };
        delete: {
            responses: {
                /** OK */
                204: never;
                400: external$7["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$7["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$7["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$7["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$7["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        dataSourceId: string;
                        /** Format: uuid */
                        projectId: string;
                    };
                };
            };
        };
    };
}
interface external$7 {
    "swagger.yml": {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** @description Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        "application/json": external$7["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        "application/json": external$7["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        "application/json": external$7["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Resource not found */
                NotFoundError: {
                    content: {
                        "application/json": external$7["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
    "uniform-canvas-types.swagger.yml": {
        paths: {};
        components: {
            schemas: {
                /** @description Public ID (used in code). Do not change after creation. */
                PublicIdProperty: string;
                /** @description The definition of a component parameter */
                ComponentDefinitionParameter: {
                    id: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the parameter */
                    name: string;
                    /** @description Appears next to the parameter in the Composition editor */
                    helpText?: string;
                    /** @description Type name of the parameter (provided by a Uniform integration) */
                    type: string;
                    /** @description The configuration object for the type (type-specific) */
                    typeConfig?: unknown;
                };
                /** @description The definition of a named component slot that can contain other components */
                ComponentDefinitionSlot: {
                    id: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the slot */
                    name: string;
                    /** @description A list of component definition public IDs that are allowed in this named slot */
                    allowedComponents: string[];
                    /**
                     * @description Whether this slot inherits its allowed components from the parent slot it lives in. If true, allowedComponents is irrelevant.
                     * If allowAllComponents is true, this value is ignored.
                     *
                     * @default false
                     */
                    inheritAllowedComponents: boolean;
                    /**
                     * @description When false or not defined, only components in allowedComponents may be added to this slot - and if allowedComponents is empty, nothing can be added.
                     * When true, every component and pattern that is defined may be added to this slot regardless of any other setting including inheritAllowedComponents.
                     */
                    allowAllComponents?: boolean;
                    /**
                     * @description When not defined, or false: all patterns for components listed in allowedComponents are automatically allowed in the slot.
                     * When true: patterns for components listed in allowedComponents are not allowed in the slot unless explicitly added to allowedComponents as `$p:<patternid>`
                     */
                    patternsInAllowedComponents?: boolean;
                    /** @description Minimum valid number of components in this slot */
                    minComponents?: number;
                    /** @description Maximum valid number of components in this slot */
                    maxComponents?: number;
                };
                /** @description The definition of a composition's slug settings */
                ComponentDefinitionSlugSettings: {
                    /**
                     * @description Whether the slug is required
                     * no: slug is optional
                     * yes: slug is required
                     * disabled: slug is disabled and will not be shown in the editor
                     *
                     * @default no
                     * @enum {string}
                     */
                    required?: "no" | "yes" | "disabled";
                    /**
                     * @description Slug uniqueness configuration.
                     * no = no unique constraint
                     * local = must be unique within this component type
                     * global = must be unique across all component types
                     *
                     * @enum {string}
                     */
                    unique?: "no" | "local" | "global";
                    /** @description Regular expression slugs must match */
                    regularExpression?: string;
                    /**
                     * @description Custom error message when regular expression validation fails.
                     * Has no effect if `regularExpression` is not set.
                     */
                    regularExpressionMessage?: string;
                };
                /** @description The definition of a component variant */
                ComponentDefinitionVariant: {
                    id: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the variant */
                    name: string;
                };
                /** @description Permission set for a component defintion */
                ComponentDefinitionPermission: {
                    roleId: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /**
                     * @description Permission type for this permission ComponentDefinition:
                     * read | write | create | delete
                     *
                     * @enum {string}
                     */
                    permission: "read" | "write" | "create" | "delete";
                    /** @description State of the component that this permission applies to */
                    state: number;
                };
                /** @description Defines a component type that can live on a Composition */
                ComponentDefinition: {
                    id: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the component definition */
                    name: string;
                    /**
                     * @description Icon name or URL for the component definition (e.g. 'screen' or 'https://s3/my-component.jpg')
                     * @default screen
                     */
                    icon?: string;
                    /**
                     * @description The public ID of the parameter whose value should be used to create a display title for this component in the UI.
                     * The parameter type must support being used as a title parameter for this to work.
                     */
                    titleParameter?: string | null;
                    /**
                     * @description Whether this component type can be the root of a composition. If false, this component is only used within slots on other components.
                     * @default false
                     */
                    canBeComposition?: boolean;
                    /** @description The parameters for this component. Parameters are key-value pairs that can be anything from text values to links to CMS entries. */
                    parameters?: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionParameter"][];
                    /**
                     * @description if this component uses team permissions or custom permissions
                     * @default true
                     */
                    useTeamPermissions?: boolean;
                    /** @description Custom role permissions for this component definition */
                    permissions?: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionPermission"][];
                    /** @description The named slots for this component; placement areas where arrays of other components can be added. */
                    slots?: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionSlot"][];
                    slugSettings?: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionSlugSettings"];
                    /** @description Default component instance value */
                    defaults?: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"] | null;
                    /** @description Named variants for this component; enables creation of visual variants that use the same parameter data */
                    variants?: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionVariant"][];
                    /** @description Created date string for this definition (ignored for writes) */
                    created?: string;
                    /** @description Last modified date string for this definition (ignored for writes) */
                    updated?: string;
                };
                /** @description Defines a content type */
                ContentType: {
                    id: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the content type */
                    name: string;
                    /**
                     * @description The public ID of the field whose value should be used to create a display title for entries of this content type in the UI.
                     * The field type must support being used as a title field for this to work.
                     */
                    titleField?: string | null;
                    /** @description The fields for this content type. Fields are key-value pairs that can be text, numbers, JSON objects, etc. */
                    fields?: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionParameter"][];
                    /** @description Created date string for this content type (ignored for writes) */
                    created?: string;
                    /** @description Last modified date string for this content type (ignored for writes) */
                    updated?: string;
                };
                /** @description Defines an editable parameter on a component. */
                ComponentParameter: {
                    /** @description The value of the parameter. Any JSON-serializable value is acceptable. */
                    value: unknown;
                    /** @description The type of the parameter. Determines how it is displayed when editing, and tells the consumer how to process it. */
                    type: string;
                    connectedData?: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataElementConnectionDefinition"];
                };
                /**
                 * @description Defines a connection to a data element on a data resource.
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the edgehanced/data-bound state of a composition may be made without notice.
                 */
                DataElementConnectionDefinition: {
                    /** @description A JSON Pointer expression that defines the data element to connect the parameter to. */
                    pointer: string;
                    /**
                     * @description The syntax used to select the data element to bind to
                     * @enum {string}
                     */
                    syntax: "jptr";
                };
                /** @description Defines the shape of a component instance served by the composition API. */
                ComponentInstance: {
                    /** @description Type of the component instance (public_id of its definition) */
                    type: string;
                    /** @description Component parameter values for the component instance */
                    parameters?: {
                        [key: string]: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    /** @description Public ID of alternate visual appearance for this component, if any selected */
                    variant?: string;
                    /** @description Slots containing any child components */
                    slots?: {
                        [key: string]: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"][];
                    };
                    /**
                     * @description Unique identifier of the component within the composition.
                     * No assumptions should be made about the format of this value other than "it will be unique."
                     * This is not set unless specifically requested via `withComponentIDs` API parameter.
                     */
                    _id?: string;
                    /** @description Indicates this component instance should be sourced from a pattern library pattern. */
                    _pattern?: string;
                    _dataResources?: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinitions"];
                    /**
                     * @description Data definitions coming from a pattern resolved for this component. Merged with _dataResources during resolution.
                     * Means nothing for PUTs; it will be ignored.
                     */
                    _patternDataResources?: {
                        [key: string]: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinition"];
                    };
                    /**
                     * @description Describes why the pattern could not be resolved, if a pattern could not be resolved. For PUTs, this is allowed but ignored.
                     * CYCLIC: A cyclic pattern graph was detected, which could not be resolved because it would cause an infinite loop.
                     * NOTFOUND: The pattern ID referenced could not be found. It may have been deleted, or not be published yet.
                     * Means nothing for PUTs; it will be ignored.
                     *
                     * @enum {string}
                     */
                    _patternError?: "NOTFOUND" | "CYCLIC";
                    /**
                     * @description Defines patch overrides to component IDs that live in the composition.
                     * This can be used to override parameters that are defined on patterns,
                     * including nested patterns, with values that are specific to this composition.
                     * The keys in this object are component IDs.
                     * Overrides are applied from the top down, so for example if both the composition
                     * and a pattern on the composition define an override on a nested pattern,
                     * the composition's override replaces the pattern's.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overrides?: {
                        [key: string]: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverride"];
                    };
                    /**
                     * @description When used on a pattern, defines how the pattern's parameters may be overridden
                     * by consumers of the pattern.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overridability?: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverridability"];
                };
                /** @description Defines the shape of the root component in a composition */
                RootComponentInstance: {
                    /** @description Type of the component instance (public_id of its definition) */
                    type: string;
                    /** @description Component parameter values for the component instance */
                    parameters?: {
                        [key: string]: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    /** @description Public ID of alternate visual appearance for this component, if any selected */
                    variant?: string;
                    /** @description Project map nodes associated with this component.  Must pass withProjectMapNodes parameter to be populated. */
                    projectMapNodes?: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["CompositionProjectMapNodeInfo"][];
                    /** @description Slots containing any child components */
                    slots?: {
                        [key: string]: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"][];
                    };
                    /** @description The public UUID of the composition. */
                    _id: string;
                    /** @description Slug pattern of this component. */
                    _slug?: string | null;
                    /** @description Friendly name of this component. */
                    _name: string;
                    _dataResources?: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinitions"];
                    /**
                     * @description Defines patch overrides to component IDs that live in the composition.
                     * This can be used to override parameters that are defined on patterns,
                     * including nested patterns, with values that are specific to this composition.
                     * The keys in this object are component IDs.
                     * Overrides are applied from the top down, so for example if both the composition
                     * and a pattern on the composition define an override on a nested pattern,
                     * the composition's override replaces the pattern's.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overrides?: {
                        [key: string]: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverride"];
                    };
                    /**
                     * @description When used on a pattern, defines how the pattern's parameters may be overridden
                     * by consumers of the pattern.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overridability?: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverridability"];
                };
                /**
                 * @description Defines how to override a specific component.
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                 */
                ComponentOverride: {
                    parameters?: {
                        [key: string]: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    variant?: string;
                };
                /**
                 * @description Defines how a component on a pattern may have its values overridden.
                 * NOTE: Data resources' overridability is defined in the data resource definition, not here.
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                 */
                ComponentOverridability: {
                    /** @description Defines component parameter value overrides. Keys are the parameter public ID. */
                    parameters?: {
                        [key: string]: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["OverrideOptions"];
                    };
                    /** @description Allows overriding a display variant is allowed, if it is defined on the component the pattern is derived from. Default = false. */
                    variants?: boolean;
                };
                /**
                 * @description Whether a parameter is overridable
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                 *
                 * @enum {string}
                 */
                OverrideOptions: "yes" | "no";
                /**
                 * @description An instance of a data source (i.e. "Master environment of the stable space", "Yelp API", "Sanity dev dataset").
                 * These are created in the UI and shared across a whole project.
                 * NOTE: if you acquire a list of data sources or do not have manage permissions, you will receive "SECRET"
                 * for all header, parameter, and variable values to obscure the actual encrypted secret value.
                 */
                DataSource: {
                    /** @description Public ID of the data source */
                    id: string;
                    /** @description Display name of the data source */
                    displayName: string;
                    /** @description The type of data connector this connects to (e.g. 'cms-items', provided by an intalled integration) */
                    connectorType: string;
                    /** @description Base resource URL of the data source. No trailing slash. */
                    baseUrl: string;
                    /** @description HTTP headers to pass with requests to the data source */
                    headers?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
                    parameters?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Variables needed to make calls to the data source */
                    variables?: {
                        [key: string]: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataVariableDefinition"];
                    };
                    /** @description Custom configuration specific to the data source being defined (used to maintain UI state for custom integrations) */
                    custom?: {
                        [key: string]: unknown;
                    };
                };
                /** @description A specific type of data that a Data Source can provide (i.e. "Recipe", "Recipes List by Tag", "Yelp Reviews of My Restaurant"). These are created in the UI and shared a whole project. */
                DataType: {
                    /** @description Public ID of the data type */
                    id: string;
                    /** @description Display name of the data type */
                    displayName: string;
                    /** @description Public ID of the associated data source */
                    dataSourceId: string;
                    /**
                     * @description A connector-specific archetype for this data type; used to select UI as well as perform any
                     * necessary post-processing on the response. e.g. 'cms-entry', 'cms-query'. Can be undefined if
                     * no special UI or processing is required.
                     */
                    archetype?: string;
                    allowedOnComponents?: string[];
                    /** @description Resource path, appended to the data source's baseUrl (e.g. baseUrl = https://base.url, path = /v1/endpoint -> final URL https://base.url/v1/endpoint). Must have leading slash. */
                    path: string;
                    /** @description Time-to-live (in seconds) for the primary resource data cache. */
                    ttl?: number;
                    /** @description Long term data resource cache configuration. */
                    longTermCache?: {
                        /** @description A flag to turn the long term cache on. */
                        enabled: boolean;
                        /** @description Time-to-live (in hours) for the long term resource data cache. */
                        ttlInHours?: number;
                    };
                    /** @description A key for the resource data cache purging. */
                    purgeKey?: string;
                    /** @description URL to a custom badge icon for the Uniform dashboard for this data type. If not set falls back to the data connector or integration icons. */
                    badgeIconUrl?: string;
                    /** @description HTTP headers to pass with requests to the data type. Merged with headers from the data source, overriding identical keys. */
                    headers?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
                    parameters?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Body to pass with requests to the data type (ignored unless method is POST) */
                    body?: string;
                    /**
                     * @description HTTP method to use with requests to the data type.
                     * @default GET
                     * @enum {string}
                     */
                    method: "GET" | "POST" | "HEAD";
                    /** @description Variables needed to make calls to the data type. Merged with variables from the data source, overriding identical keys. */
                    variables?: {
                        [key: string]: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataVariableDefinition"];
                    };
                    /** @description Custom configuration specific to the data source being defined */
                    custom?: {
                        [key: string]: unknown;
                    };
                };
                /** @description Defines the shape of a data variable on a Data Source or Data Type */
                DataVariableDefinition: {
                    /** @description Display name of the data variable */
                    displayName?: string;
                    /** @description Explanatory text that is provided to the data resource editor to explain what this variable does. */
                    helpText?: string;
                    /**
                     * @description Type of the data variable. Optionally used as a point of reference for custom integrations to decide how to render an editor for a variable.
                     * @default text
                     */
                    type?: string;
                    /** @description Default value of the data variable */
                    default: string;
                    /** @description Sets the order of the variable when displayed in a list with other variables. If not set, the order defaults to alphabetical with any explicitly set orders first in the list. */
                    order?: number;
                };
                /**
                 * @description Data definitions attached to this component. The property name is the key of the data in the data document.
                 * Note: data definitions are inherited from ancestors at runtime (and may be overridden by descendants that use the same key).
                 */
                DataResourceDefinitions: {
                    [key: string]: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinition"];
                };
                /** @description Defines a data resource, which is a named JSON document, usually from an API response, which may be projected onto parameters */
                DataResourceDefinition: {
                    /** @description Public ID of the data type that provides this data */
                    type: string;
                    /** @description Whether this data is a pattern data resource that can be overridden when a pattern is referenced on another composition. If this is not a pattern composition, this has no meaning and should not be used. If unspecified, the default is false. */
                    isPatternParameter?: boolean;
                    /**
                     * @description When true, the default data resource of a pattern data parameter (isPatternParameter=true) will be ignored when the pattern is referenced.
                     * Unless specifically overridden, the pattern data parameter will be provided with a null default value - leaving any data connections to it unresolvable.
                     * If isPatternParameter is false or undefined, this has no meaning.
                     */
                    ignorePatternParameterDefault?: boolean;
                    variables?: external$7["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceVariables"];
                };
                /** @description Variable values for a data resource. */
                DataResourceVariables: {
                    [key: string]: string;
                };
                /** @description Project map node information related to a component. */
                CompositionProjectMapNodeInfo: {
                    /**
                     * Format: uuid
                     * @description Unique identifier for the project map node
                     */
                    id: string;
                    /** @description Path of the project map node */
                    path: string;
                    /**
                     * Format: uuid
                     * @description Unique identifier for the project map that this node belongs to.
                     */
                    projectMapId: string;
                };
            };
        };
        operations: {};
    };
}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths$5 {
    "/api/v1/data-sources": {
        get: {
            parameters: {
                query: {
                    projectId: string;
                };
            };
            responses: {
                /**
                 * Gets a list of data sources.
                 * Note that all parameters, headers, and variables will have the value 'SECRET', as this endpoint
                 * requires minimal permissions. To decrypt secrets, you must be an admin or manage-data-sources privileged
                 * user, and fetch using the `data-source` endpoint for each data source.
                 */
                200: {
                    content: {
                        "application/json": {
                            results: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataSource"][];
                        };
                    };
                };
                400: external$6["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$6["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$6["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$6["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$6["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
        };
    };
}
interface external$6 {
    "swagger.yml": {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** @description Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        "application/json": external$6["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        "application/json": external$6["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        "application/json": external$6["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Resource not found */
                NotFoundError: {
                    content: {
                        "application/json": external$6["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
    "uniform-canvas-types.swagger.yml": {
        paths: {};
        components: {
            schemas: {
                /** @description Public ID (used in code). Do not change after creation. */
                PublicIdProperty: string;
                /** @description The definition of a component parameter */
                ComponentDefinitionParameter: {
                    id: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the parameter */
                    name: string;
                    /** @description Appears next to the parameter in the Composition editor */
                    helpText?: string;
                    /** @description Type name of the parameter (provided by a Uniform integration) */
                    type: string;
                    /** @description The configuration object for the type (type-specific) */
                    typeConfig?: unknown;
                };
                /** @description The definition of a named component slot that can contain other components */
                ComponentDefinitionSlot: {
                    id: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the slot */
                    name: string;
                    /** @description A list of component definition public IDs that are allowed in this named slot */
                    allowedComponents: string[];
                    /**
                     * @description Whether this slot inherits its allowed components from the parent slot it lives in. If true, allowedComponents is irrelevant.
                     * If allowAllComponents is true, this value is ignored.
                     *
                     * @default false
                     */
                    inheritAllowedComponents: boolean;
                    /**
                     * @description When false or not defined, only components in allowedComponents may be added to this slot - and if allowedComponents is empty, nothing can be added.
                     * When true, every component and pattern that is defined may be added to this slot regardless of any other setting including inheritAllowedComponents.
                     */
                    allowAllComponents?: boolean;
                    /**
                     * @description When not defined, or false: all patterns for components listed in allowedComponents are automatically allowed in the slot.
                     * When true: patterns for components listed in allowedComponents are not allowed in the slot unless explicitly added to allowedComponents as `$p:<patternid>`
                     */
                    patternsInAllowedComponents?: boolean;
                    /** @description Minimum valid number of components in this slot */
                    minComponents?: number;
                    /** @description Maximum valid number of components in this slot */
                    maxComponents?: number;
                };
                /** @description The definition of a composition's slug settings */
                ComponentDefinitionSlugSettings: {
                    /**
                     * @description Whether the slug is required
                     * no: slug is optional
                     * yes: slug is required
                     * disabled: slug is disabled and will not be shown in the editor
                     *
                     * @default no
                     * @enum {string}
                     */
                    required?: "no" | "yes" | "disabled";
                    /**
                     * @description Slug uniqueness configuration.
                     * no = no unique constraint
                     * local = must be unique within this component type
                     * global = must be unique across all component types
                     *
                     * @enum {string}
                     */
                    unique?: "no" | "local" | "global";
                    /** @description Regular expression slugs must match */
                    regularExpression?: string;
                    /**
                     * @description Custom error message when regular expression validation fails.
                     * Has no effect if `regularExpression` is not set.
                     */
                    regularExpressionMessage?: string;
                };
                /** @description The definition of a component variant */
                ComponentDefinitionVariant: {
                    id: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the variant */
                    name: string;
                };
                /** @description Permission set for a component defintion */
                ComponentDefinitionPermission: {
                    roleId: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /**
                     * @description Permission type for this permission ComponentDefinition:
                     * read | write | create | delete
                     *
                     * @enum {string}
                     */
                    permission: "read" | "write" | "create" | "delete";
                    /** @description State of the component that this permission applies to */
                    state: number;
                };
                /** @description Defines a component type that can live on a Composition */
                ComponentDefinition: {
                    id: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the component definition */
                    name: string;
                    /**
                     * @description Icon name or URL for the component definition (e.g. 'screen' or 'https://s3/my-component.jpg')
                     * @default screen
                     */
                    icon?: string;
                    /**
                     * @description The public ID of the parameter whose value should be used to create a display title for this component in the UI.
                     * The parameter type must support being used as a title parameter for this to work.
                     */
                    titleParameter?: string | null;
                    /**
                     * @description Whether this component type can be the root of a composition. If false, this component is only used within slots on other components.
                     * @default false
                     */
                    canBeComposition?: boolean;
                    /** @description The parameters for this component. Parameters are key-value pairs that can be anything from text values to links to CMS entries. */
                    parameters?: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionParameter"][];
                    /**
                     * @description if this component uses team permissions or custom permissions
                     * @default true
                     */
                    useTeamPermissions?: boolean;
                    /** @description Custom role permissions for this component definition */
                    permissions?: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionPermission"][];
                    /** @description The named slots for this component; placement areas where arrays of other components can be added. */
                    slots?: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionSlot"][];
                    slugSettings?: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionSlugSettings"];
                    /** @description Default component instance value */
                    defaults?: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"] | null;
                    /** @description Named variants for this component; enables creation of visual variants that use the same parameter data */
                    variants?: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionVariant"][];
                    /** @description Created date string for this definition (ignored for writes) */
                    created?: string;
                    /** @description Last modified date string for this definition (ignored for writes) */
                    updated?: string;
                };
                /** @description Defines a content type */
                ContentType: {
                    id: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the content type */
                    name: string;
                    /**
                     * @description The public ID of the field whose value should be used to create a display title for entries of this content type in the UI.
                     * The field type must support being used as a title field for this to work.
                     */
                    titleField?: string | null;
                    /** @description The fields for this content type. Fields are key-value pairs that can be text, numbers, JSON objects, etc. */
                    fields?: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionParameter"][];
                    /** @description Created date string for this content type (ignored for writes) */
                    created?: string;
                    /** @description Last modified date string for this content type (ignored for writes) */
                    updated?: string;
                };
                /** @description Defines an editable parameter on a component. */
                ComponentParameter: {
                    /** @description The value of the parameter. Any JSON-serializable value is acceptable. */
                    value: unknown;
                    /** @description The type of the parameter. Determines how it is displayed when editing, and tells the consumer how to process it. */
                    type: string;
                    connectedData?: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataElementConnectionDefinition"];
                };
                /**
                 * @description Defines a connection to a data element on a data resource.
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the edgehanced/data-bound state of a composition may be made without notice.
                 */
                DataElementConnectionDefinition: {
                    /** @description A JSON Pointer expression that defines the data element to connect the parameter to. */
                    pointer: string;
                    /**
                     * @description The syntax used to select the data element to bind to
                     * @enum {string}
                     */
                    syntax: "jptr";
                };
                /** @description Defines the shape of a component instance served by the composition API. */
                ComponentInstance: {
                    /** @description Type of the component instance (public_id of its definition) */
                    type: string;
                    /** @description Component parameter values for the component instance */
                    parameters?: {
                        [key: string]: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    /** @description Public ID of alternate visual appearance for this component, if any selected */
                    variant?: string;
                    /** @description Slots containing any child components */
                    slots?: {
                        [key: string]: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"][];
                    };
                    /**
                     * @description Unique identifier of the component within the composition.
                     * No assumptions should be made about the format of this value other than "it will be unique."
                     * This is not set unless specifically requested via `withComponentIDs` API parameter.
                     */
                    _id?: string;
                    /** @description Indicates this component instance should be sourced from a pattern library pattern. */
                    _pattern?: string;
                    _dataResources?: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinitions"];
                    /**
                     * @description Data definitions coming from a pattern resolved for this component. Merged with _dataResources during resolution.
                     * Means nothing for PUTs; it will be ignored.
                     */
                    _patternDataResources?: {
                        [key: string]: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinition"];
                    };
                    /**
                     * @description Describes why the pattern could not be resolved, if a pattern could not be resolved. For PUTs, this is allowed but ignored.
                     * CYCLIC: A cyclic pattern graph was detected, which could not be resolved because it would cause an infinite loop.
                     * NOTFOUND: The pattern ID referenced could not be found. It may have been deleted, or not be published yet.
                     * Means nothing for PUTs; it will be ignored.
                     *
                     * @enum {string}
                     */
                    _patternError?: "NOTFOUND" | "CYCLIC";
                    /**
                     * @description Defines patch overrides to component IDs that live in the composition.
                     * This can be used to override parameters that are defined on patterns,
                     * including nested patterns, with values that are specific to this composition.
                     * The keys in this object are component IDs.
                     * Overrides are applied from the top down, so for example if both the composition
                     * and a pattern on the composition define an override on a nested pattern,
                     * the composition's override replaces the pattern's.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overrides?: {
                        [key: string]: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverride"];
                    };
                    /**
                     * @description When used on a pattern, defines how the pattern's parameters may be overridden
                     * by consumers of the pattern.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overridability?: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverridability"];
                };
                /** @description Defines the shape of the root component in a composition */
                RootComponentInstance: {
                    /** @description Type of the component instance (public_id of its definition) */
                    type: string;
                    /** @description Component parameter values for the component instance */
                    parameters?: {
                        [key: string]: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    /** @description Public ID of alternate visual appearance for this component, if any selected */
                    variant?: string;
                    /** @description Project map nodes associated with this component.  Must pass withProjectMapNodes parameter to be populated. */
                    projectMapNodes?: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["CompositionProjectMapNodeInfo"][];
                    /** @description Slots containing any child components */
                    slots?: {
                        [key: string]: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"][];
                    };
                    /** @description The public UUID of the composition. */
                    _id: string;
                    /** @description Slug pattern of this component. */
                    _slug?: string | null;
                    /** @description Friendly name of this component. */
                    _name: string;
                    _dataResources?: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinitions"];
                    /**
                     * @description Defines patch overrides to component IDs that live in the composition.
                     * This can be used to override parameters that are defined on patterns,
                     * including nested patterns, with values that are specific to this composition.
                     * The keys in this object are component IDs.
                     * Overrides are applied from the top down, so for example if both the composition
                     * and a pattern on the composition define an override on a nested pattern,
                     * the composition's override replaces the pattern's.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overrides?: {
                        [key: string]: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverride"];
                    };
                    /**
                     * @description When used on a pattern, defines how the pattern's parameters may be overridden
                     * by consumers of the pattern.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overridability?: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverridability"];
                };
                /**
                 * @description Defines how to override a specific component.
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                 */
                ComponentOverride: {
                    parameters?: {
                        [key: string]: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    variant?: string;
                };
                /**
                 * @description Defines how a component on a pattern may have its values overridden.
                 * NOTE: Data resources' overridability is defined in the data resource definition, not here.
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                 */
                ComponentOverridability: {
                    /** @description Defines component parameter value overrides. Keys are the parameter public ID. */
                    parameters?: {
                        [key: string]: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["OverrideOptions"];
                    };
                    /** @description Allows overriding a display variant is allowed, if it is defined on the component the pattern is derived from. Default = false. */
                    variants?: boolean;
                };
                /**
                 * @description Whether a parameter is overridable
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                 *
                 * @enum {string}
                 */
                OverrideOptions: "yes" | "no";
                /**
                 * @description An instance of a data source (i.e. "Master environment of the stable space", "Yelp API", "Sanity dev dataset").
                 * These are created in the UI and shared across a whole project.
                 * NOTE: if you acquire a list of data sources or do not have manage permissions, you will receive "SECRET"
                 * for all header, parameter, and variable values to obscure the actual encrypted secret value.
                 */
                DataSource: {
                    /** @description Public ID of the data source */
                    id: string;
                    /** @description Display name of the data source */
                    displayName: string;
                    /** @description The type of data connector this connects to (e.g. 'cms-items', provided by an intalled integration) */
                    connectorType: string;
                    /** @description Base resource URL of the data source. No trailing slash. */
                    baseUrl: string;
                    /** @description HTTP headers to pass with requests to the data source */
                    headers?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
                    parameters?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Variables needed to make calls to the data source */
                    variables?: {
                        [key: string]: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataVariableDefinition"];
                    };
                    /** @description Custom configuration specific to the data source being defined (used to maintain UI state for custom integrations) */
                    custom?: {
                        [key: string]: unknown;
                    };
                };
                /** @description A specific type of data that a Data Source can provide (i.e. "Recipe", "Recipes List by Tag", "Yelp Reviews of My Restaurant"). These are created in the UI and shared a whole project. */
                DataType: {
                    /** @description Public ID of the data type */
                    id: string;
                    /** @description Display name of the data type */
                    displayName: string;
                    /** @description Public ID of the associated data source */
                    dataSourceId: string;
                    /**
                     * @description A connector-specific archetype for this data type; used to select UI as well as perform any
                     * necessary post-processing on the response. e.g. 'cms-entry', 'cms-query'. Can be undefined if
                     * no special UI or processing is required.
                     */
                    archetype?: string;
                    allowedOnComponents?: string[];
                    /** @description Resource path, appended to the data source's baseUrl (e.g. baseUrl = https://base.url, path = /v1/endpoint -> final URL https://base.url/v1/endpoint). Must have leading slash. */
                    path: string;
                    /** @description Time-to-live (in seconds) for the primary resource data cache. */
                    ttl?: number;
                    /** @description Long term data resource cache configuration. */
                    longTermCache?: {
                        /** @description A flag to turn the long term cache on. */
                        enabled: boolean;
                        /** @description Time-to-live (in hours) for the long term resource data cache. */
                        ttlInHours?: number;
                    };
                    /** @description A key for the resource data cache purging. */
                    purgeKey?: string;
                    /** @description URL to a custom badge icon for the Uniform dashboard for this data type. If not set falls back to the data connector or integration icons. */
                    badgeIconUrl?: string;
                    /** @description HTTP headers to pass with requests to the data type. Merged with headers from the data source, overriding identical keys. */
                    headers?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
                    parameters?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Body to pass with requests to the data type (ignored unless method is POST) */
                    body?: string;
                    /**
                     * @description HTTP method to use with requests to the data type.
                     * @default GET
                     * @enum {string}
                     */
                    method: "GET" | "POST" | "HEAD";
                    /** @description Variables needed to make calls to the data type. Merged with variables from the data source, overriding identical keys. */
                    variables?: {
                        [key: string]: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataVariableDefinition"];
                    };
                    /** @description Custom configuration specific to the data source being defined */
                    custom?: {
                        [key: string]: unknown;
                    };
                };
                /** @description Defines the shape of a data variable on a Data Source or Data Type */
                DataVariableDefinition: {
                    /** @description Display name of the data variable */
                    displayName?: string;
                    /** @description Explanatory text that is provided to the data resource editor to explain what this variable does. */
                    helpText?: string;
                    /**
                     * @description Type of the data variable. Optionally used as a point of reference for custom integrations to decide how to render an editor for a variable.
                     * @default text
                     */
                    type?: string;
                    /** @description Default value of the data variable */
                    default: string;
                    /** @description Sets the order of the variable when displayed in a list with other variables. If not set, the order defaults to alphabetical with any explicitly set orders first in the list. */
                    order?: number;
                };
                /**
                 * @description Data definitions attached to this component. The property name is the key of the data in the data document.
                 * Note: data definitions are inherited from ancestors at runtime (and may be overridden by descendants that use the same key).
                 */
                DataResourceDefinitions: {
                    [key: string]: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinition"];
                };
                /** @description Defines a data resource, which is a named JSON document, usually from an API response, which may be projected onto parameters */
                DataResourceDefinition: {
                    /** @description Public ID of the data type that provides this data */
                    type: string;
                    /** @description Whether this data is a pattern data resource that can be overridden when a pattern is referenced on another composition. If this is not a pattern composition, this has no meaning and should not be used. If unspecified, the default is false. */
                    isPatternParameter?: boolean;
                    /**
                     * @description When true, the default data resource of a pattern data parameter (isPatternParameter=true) will be ignored when the pattern is referenced.
                     * Unless specifically overridden, the pattern data parameter will be provided with a null default value - leaving any data connections to it unresolvable.
                     * If isPatternParameter is false or undefined, this has no meaning.
                     */
                    ignorePatternParameterDefault?: boolean;
                    variables?: external$6["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceVariables"];
                };
                /** @description Variable values for a data resource. */
                DataResourceVariables: {
                    [key: string]: string;
                };
                /** @description Project map node information related to a component. */
                CompositionProjectMapNodeInfo: {
                    /**
                     * Format: uuid
                     * @description Unique identifier for the project map node
                     */
                    id: string;
                    /** @description Path of the project map node */
                    path: string;
                    /**
                     * Format: uuid
                     * @description Unique identifier for the project map that this node belongs to.
                     */
                    projectMapId: string;
                };
            };
        };
        operations: {};
    };
}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths$4 {
    "/api/v1/data-types": {
        get: {
            parameters: {
                query: {
                    projectId: string;
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": {
                            results: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataType"][];
                        };
                    };
                };
                400: external$5["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$5["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$5["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$5["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$5["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
        };
        put: {
            responses: {
                /** OK */
                204: never;
                400: external$5["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$5["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$5["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$5["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$5["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        data: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataType"];
                        /** Format: uuid */
                        projectId: string;
                    };
                };
            };
        };
        delete: {
            responses: {
                /** OK */
                204: never;
                400: external$5["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$5["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$5["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$5["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$5["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        typeId: string;
                        /** Format: uuid */
                        projectId: string;
                    };
                };
            };
        };
    };
}
interface external$5 {
    "swagger.yml": {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** @description Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        "application/json": external$5["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        "application/json": external$5["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        "application/json": external$5["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Resource not found */
                NotFoundError: {
                    content: {
                        "application/json": external$5["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
    "uniform-canvas-types.swagger.yml": {
        paths: {};
        components: {
            schemas: {
                /** @description Public ID (used in code). Do not change after creation. */
                PublicIdProperty: string;
                /** @description The definition of a component parameter */
                ComponentDefinitionParameter: {
                    id: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the parameter */
                    name: string;
                    /** @description Appears next to the parameter in the Composition editor */
                    helpText?: string;
                    /** @description Type name of the parameter (provided by a Uniform integration) */
                    type: string;
                    /** @description The configuration object for the type (type-specific) */
                    typeConfig?: unknown;
                };
                /** @description The definition of a named component slot that can contain other components */
                ComponentDefinitionSlot: {
                    id: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the slot */
                    name: string;
                    /** @description A list of component definition public IDs that are allowed in this named slot */
                    allowedComponents: string[];
                    /**
                     * @description Whether this slot inherits its allowed components from the parent slot it lives in. If true, allowedComponents is irrelevant.
                     * If allowAllComponents is true, this value is ignored.
                     *
                     * @default false
                     */
                    inheritAllowedComponents: boolean;
                    /**
                     * @description When false or not defined, only components in allowedComponents may be added to this slot - and if allowedComponents is empty, nothing can be added.
                     * When true, every component and pattern that is defined may be added to this slot regardless of any other setting including inheritAllowedComponents.
                     */
                    allowAllComponents?: boolean;
                    /**
                     * @description When not defined, or false: all patterns for components listed in allowedComponents are automatically allowed in the slot.
                     * When true: patterns for components listed in allowedComponents are not allowed in the slot unless explicitly added to allowedComponents as `$p:<patternid>`
                     */
                    patternsInAllowedComponents?: boolean;
                    /** @description Minimum valid number of components in this slot */
                    minComponents?: number;
                    /** @description Maximum valid number of components in this slot */
                    maxComponents?: number;
                };
                /** @description The definition of a composition's slug settings */
                ComponentDefinitionSlugSettings: {
                    /**
                     * @description Whether the slug is required
                     * no: slug is optional
                     * yes: slug is required
                     * disabled: slug is disabled and will not be shown in the editor
                     *
                     * @default no
                     * @enum {string}
                     */
                    required?: "no" | "yes" | "disabled";
                    /**
                     * @description Slug uniqueness configuration.
                     * no = no unique constraint
                     * local = must be unique within this component type
                     * global = must be unique across all component types
                     *
                     * @enum {string}
                     */
                    unique?: "no" | "local" | "global";
                    /** @description Regular expression slugs must match */
                    regularExpression?: string;
                    /**
                     * @description Custom error message when regular expression validation fails.
                     * Has no effect if `regularExpression` is not set.
                     */
                    regularExpressionMessage?: string;
                };
                /** @description The definition of a component variant */
                ComponentDefinitionVariant: {
                    id: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the variant */
                    name: string;
                };
                /** @description Permission set for a component defintion */
                ComponentDefinitionPermission: {
                    roleId: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /**
                     * @description Permission type for this permission ComponentDefinition:
                     * read | write | create | delete
                     *
                     * @enum {string}
                     */
                    permission: "read" | "write" | "create" | "delete";
                    /** @description State of the component that this permission applies to */
                    state: number;
                };
                /** @description Defines a component type that can live on a Composition */
                ComponentDefinition: {
                    id: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the component definition */
                    name: string;
                    /**
                     * @description Icon name or URL for the component definition (e.g. 'screen' or 'https://s3/my-component.jpg')
                     * @default screen
                     */
                    icon?: string;
                    /**
                     * @description The public ID of the parameter whose value should be used to create a display title for this component in the UI.
                     * The parameter type must support being used as a title parameter for this to work.
                     */
                    titleParameter?: string | null;
                    /**
                     * @description Whether this component type can be the root of a composition. If false, this component is only used within slots on other components.
                     * @default false
                     */
                    canBeComposition?: boolean;
                    /** @description The parameters for this component. Parameters are key-value pairs that can be anything from text values to links to CMS entries. */
                    parameters?: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionParameter"][];
                    /**
                     * @description if this component uses team permissions or custom permissions
                     * @default true
                     */
                    useTeamPermissions?: boolean;
                    /** @description Custom role permissions for this component definition */
                    permissions?: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionPermission"][];
                    /** @description The named slots for this component; placement areas where arrays of other components can be added. */
                    slots?: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionSlot"][];
                    slugSettings?: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionSlugSettings"];
                    /** @description Default component instance value */
                    defaults?: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"] | null;
                    /** @description Named variants for this component; enables creation of visual variants that use the same parameter data */
                    variants?: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionVariant"][];
                    /** @description Created date string for this definition (ignored for writes) */
                    created?: string;
                    /** @description Last modified date string for this definition (ignored for writes) */
                    updated?: string;
                };
                /** @description Defines a content type */
                ContentType: {
                    id: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the content type */
                    name: string;
                    /**
                     * @description The public ID of the field whose value should be used to create a display title for entries of this content type in the UI.
                     * The field type must support being used as a title field for this to work.
                     */
                    titleField?: string | null;
                    /** @description The fields for this content type. Fields are key-value pairs that can be text, numbers, JSON objects, etc. */
                    fields?: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionParameter"][];
                    /** @description Created date string for this content type (ignored for writes) */
                    created?: string;
                    /** @description Last modified date string for this content type (ignored for writes) */
                    updated?: string;
                };
                /** @description Defines an editable parameter on a component. */
                ComponentParameter: {
                    /** @description The value of the parameter. Any JSON-serializable value is acceptable. */
                    value: unknown;
                    /** @description The type of the parameter. Determines how it is displayed when editing, and tells the consumer how to process it. */
                    type: string;
                    connectedData?: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataElementConnectionDefinition"];
                };
                /**
                 * @description Defines a connection to a data element on a data resource.
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the edgehanced/data-bound state of a composition may be made without notice.
                 */
                DataElementConnectionDefinition: {
                    /** @description A JSON Pointer expression that defines the data element to connect the parameter to. */
                    pointer: string;
                    /**
                     * @description The syntax used to select the data element to bind to
                     * @enum {string}
                     */
                    syntax: "jptr";
                };
                /** @description Defines the shape of a component instance served by the composition API. */
                ComponentInstance: {
                    /** @description Type of the component instance (public_id of its definition) */
                    type: string;
                    /** @description Component parameter values for the component instance */
                    parameters?: {
                        [key: string]: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    /** @description Public ID of alternate visual appearance for this component, if any selected */
                    variant?: string;
                    /** @description Slots containing any child components */
                    slots?: {
                        [key: string]: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"][];
                    };
                    /**
                     * @description Unique identifier of the component within the composition.
                     * No assumptions should be made about the format of this value other than "it will be unique."
                     * This is not set unless specifically requested via `withComponentIDs` API parameter.
                     */
                    _id?: string;
                    /** @description Indicates this component instance should be sourced from a pattern library pattern. */
                    _pattern?: string;
                    _dataResources?: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinitions"];
                    /**
                     * @description Data definitions coming from a pattern resolved for this component. Merged with _dataResources during resolution.
                     * Means nothing for PUTs; it will be ignored.
                     */
                    _patternDataResources?: {
                        [key: string]: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinition"];
                    };
                    /**
                     * @description Describes why the pattern could not be resolved, if a pattern could not be resolved. For PUTs, this is allowed but ignored.
                     * CYCLIC: A cyclic pattern graph was detected, which could not be resolved because it would cause an infinite loop.
                     * NOTFOUND: The pattern ID referenced could not be found. It may have been deleted, or not be published yet.
                     * Means nothing for PUTs; it will be ignored.
                     *
                     * @enum {string}
                     */
                    _patternError?: "NOTFOUND" | "CYCLIC";
                    /**
                     * @description Defines patch overrides to component IDs that live in the composition.
                     * This can be used to override parameters that are defined on patterns,
                     * including nested patterns, with values that are specific to this composition.
                     * The keys in this object are component IDs.
                     * Overrides are applied from the top down, so for example if both the composition
                     * and a pattern on the composition define an override on a nested pattern,
                     * the composition's override replaces the pattern's.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overrides?: {
                        [key: string]: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverride"];
                    };
                    /**
                     * @description When used on a pattern, defines how the pattern's parameters may be overridden
                     * by consumers of the pattern.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overridability?: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverridability"];
                };
                /** @description Defines the shape of the root component in a composition */
                RootComponentInstance: {
                    /** @description Type of the component instance (public_id of its definition) */
                    type: string;
                    /** @description Component parameter values for the component instance */
                    parameters?: {
                        [key: string]: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    /** @description Public ID of alternate visual appearance for this component, if any selected */
                    variant?: string;
                    /** @description Project map nodes associated with this component.  Must pass withProjectMapNodes parameter to be populated. */
                    projectMapNodes?: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["CompositionProjectMapNodeInfo"][];
                    /** @description Slots containing any child components */
                    slots?: {
                        [key: string]: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"][];
                    };
                    /** @description The public UUID of the composition. */
                    _id: string;
                    /** @description Slug pattern of this component. */
                    _slug?: string | null;
                    /** @description Friendly name of this component. */
                    _name: string;
                    _dataResources?: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinitions"];
                    /**
                     * @description Defines patch overrides to component IDs that live in the composition.
                     * This can be used to override parameters that are defined on patterns,
                     * including nested patterns, with values that are specific to this composition.
                     * The keys in this object are component IDs.
                     * Overrides are applied from the top down, so for example if both the composition
                     * and a pattern on the composition define an override on a nested pattern,
                     * the composition's override replaces the pattern's.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overrides?: {
                        [key: string]: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverride"];
                    };
                    /**
                     * @description When used on a pattern, defines how the pattern's parameters may be overridden
                     * by consumers of the pattern.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overridability?: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverridability"];
                };
                /**
                 * @description Defines how to override a specific component.
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                 */
                ComponentOverride: {
                    parameters?: {
                        [key: string]: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    variant?: string;
                };
                /**
                 * @description Defines how a component on a pattern may have its values overridden.
                 * NOTE: Data resources' overridability is defined in the data resource definition, not here.
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                 */
                ComponentOverridability: {
                    /** @description Defines component parameter value overrides. Keys are the parameter public ID. */
                    parameters?: {
                        [key: string]: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["OverrideOptions"];
                    };
                    /** @description Allows overriding a display variant is allowed, if it is defined on the component the pattern is derived from. Default = false. */
                    variants?: boolean;
                };
                /**
                 * @description Whether a parameter is overridable
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                 *
                 * @enum {string}
                 */
                OverrideOptions: "yes" | "no";
                /**
                 * @description An instance of a data source (i.e. "Master environment of the stable space", "Yelp API", "Sanity dev dataset").
                 * These are created in the UI and shared across a whole project.
                 * NOTE: if you acquire a list of data sources or do not have manage permissions, you will receive "SECRET"
                 * for all header, parameter, and variable values to obscure the actual encrypted secret value.
                 */
                DataSource: {
                    /** @description Public ID of the data source */
                    id: string;
                    /** @description Display name of the data source */
                    displayName: string;
                    /** @description The type of data connector this connects to (e.g. 'cms-items', provided by an intalled integration) */
                    connectorType: string;
                    /** @description Base resource URL of the data source. No trailing slash. */
                    baseUrl: string;
                    /** @description HTTP headers to pass with requests to the data source */
                    headers?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
                    parameters?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Variables needed to make calls to the data source */
                    variables?: {
                        [key: string]: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataVariableDefinition"];
                    };
                    /** @description Custom configuration specific to the data source being defined (used to maintain UI state for custom integrations) */
                    custom?: {
                        [key: string]: unknown;
                    };
                };
                /** @description A specific type of data that a Data Source can provide (i.e. "Recipe", "Recipes List by Tag", "Yelp Reviews of My Restaurant"). These are created in the UI and shared a whole project. */
                DataType: {
                    /** @description Public ID of the data type */
                    id: string;
                    /** @description Display name of the data type */
                    displayName: string;
                    /** @description Public ID of the associated data source */
                    dataSourceId: string;
                    /**
                     * @description A connector-specific archetype for this data type; used to select UI as well as perform any
                     * necessary post-processing on the response. e.g. 'cms-entry', 'cms-query'. Can be undefined if
                     * no special UI or processing is required.
                     */
                    archetype?: string;
                    allowedOnComponents?: string[];
                    /** @description Resource path, appended to the data source's baseUrl (e.g. baseUrl = https://base.url, path = /v1/endpoint -> final URL https://base.url/v1/endpoint). Must have leading slash. */
                    path: string;
                    /** @description Time-to-live (in seconds) for the primary resource data cache. */
                    ttl?: number;
                    /** @description Long term data resource cache configuration. */
                    longTermCache?: {
                        /** @description A flag to turn the long term cache on. */
                        enabled: boolean;
                        /** @description Time-to-live (in hours) for the long term resource data cache. */
                        ttlInHours?: number;
                    };
                    /** @description A key for the resource data cache purging. */
                    purgeKey?: string;
                    /** @description URL to a custom badge icon for the Uniform dashboard for this data type. If not set falls back to the data connector or integration icons. */
                    badgeIconUrl?: string;
                    /** @description HTTP headers to pass with requests to the data type. Merged with headers from the data source, overriding identical keys. */
                    headers?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
                    parameters?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Body to pass with requests to the data type (ignored unless method is POST) */
                    body?: string;
                    /**
                     * @description HTTP method to use with requests to the data type.
                     * @default GET
                     * @enum {string}
                     */
                    method: "GET" | "POST" | "HEAD";
                    /** @description Variables needed to make calls to the data type. Merged with variables from the data source, overriding identical keys. */
                    variables?: {
                        [key: string]: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataVariableDefinition"];
                    };
                    /** @description Custom configuration specific to the data source being defined */
                    custom?: {
                        [key: string]: unknown;
                    };
                };
                /** @description Defines the shape of a data variable on a Data Source or Data Type */
                DataVariableDefinition: {
                    /** @description Display name of the data variable */
                    displayName?: string;
                    /** @description Explanatory text that is provided to the data resource editor to explain what this variable does. */
                    helpText?: string;
                    /**
                     * @description Type of the data variable. Optionally used as a point of reference for custom integrations to decide how to render an editor for a variable.
                     * @default text
                     */
                    type?: string;
                    /** @description Default value of the data variable */
                    default: string;
                    /** @description Sets the order of the variable when displayed in a list with other variables. If not set, the order defaults to alphabetical with any explicitly set orders first in the list. */
                    order?: number;
                };
                /**
                 * @description Data definitions attached to this component. The property name is the key of the data in the data document.
                 * Note: data definitions are inherited from ancestors at runtime (and may be overridden by descendants that use the same key).
                 */
                DataResourceDefinitions: {
                    [key: string]: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinition"];
                };
                /** @description Defines a data resource, which is a named JSON document, usually from an API response, which may be projected onto parameters */
                DataResourceDefinition: {
                    /** @description Public ID of the data type that provides this data */
                    type: string;
                    /** @description Whether this data is a pattern data resource that can be overridden when a pattern is referenced on another composition. If this is not a pattern composition, this has no meaning and should not be used. If unspecified, the default is false. */
                    isPatternParameter?: boolean;
                    /**
                     * @description When true, the default data resource of a pattern data parameter (isPatternParameter=true) will be ignored when the pattern is referenced.
                     * Unless specifically overridden, the pattern data parameter will be provided with a null default value - leaving any data connections to it unresolvable.
                     * If isPatternParameter is false or undefined, this has no meaning.
                     */
                    ignorePatternParameterDefault?: boolean;
                    variables?: external$5["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceVariables"];
                };
                /** @description Variable values for a data resource. */
                DataResourceVariables: {
                    [key: string]: string;
                };
                /** @description Project map node information related to a component. */
                CompositionProjectMapNodeInfo: {
                    /**
                     * Format: uuid
                     * @description Unique identifier for the project map node
                     */
                    id: string;
                    /** @description Path of the project map node */
                    path: string;
                    /**
                     * Format: uuid
                     * @description Unique identifier for the project map that this node belongs to.
                     */
                    projectMapId: string;
                };
            };
        };
        operations: {};
    };
}

type DataTypeApi = paths$4['/api/v1/data-types'];
type DataSourcesApi = paths$5['/api/v1/data-sources'];
type DataSourceApi = paths$6['/api/v1/data-source'];
/** Query parameter options for GET /api/v1/data-types */
type DataTypeGetParameters = DataTypeApi['get']['parameters']['query'];
/** The GET response from /api/v1/data-types */
type DataTypeGetResponse = DataTypeApi['get']['responses']['200']['content']['application/json'];
/** The PUT request body for /api/v1/data-types */
type DataTypePutParameters = DataTypeApi['put']['requestBody']['content']['application/json'];
/** Shape of the DELETE request body for /api/v1/data-types */
type DataTypeDeleteParameters = DataTypeApi['delete']['requestBody']['content']['application/json'];
/** Query parameter options for GET /api/v1/data-source */
type DataSourceGetParameters = DataSourceApi['get']['parameters']['query'];
/** Query parameter options for GET /api/v1/data-sources */
type DataSourcesGetParameters = DataSourcesApi['get']['parameters']['query'];
/** The GET response from /api/v1/data-sources */
type DataSourceGetResponse = DataSourceApi['get']['responses']['200']['content']['application/json'];
/** The GET response from /api/v1/data-sources */
type DataSourcesGetResponse = DataSourcesApi['get']['responses']['200']['content']['application/json'];
/** The PUT request body for /api/v1/data-source */
type DataSourcePutParameters = DataSourceApi['put']['requestBody']['content']['application/json'];
/** Shape of the DELETE request body for /api/v1/data-source */
type DataSourceDeleteParameters = DataSourceApi['delete']['requestBody']['content']['application/json'];
type DataType = components$3['schemas']['DataType'];
type DataSource = components$3['schemas']['DataSource'];
type DataVariableDefinition = components$3['schemas']['DataVariableDefinition'];

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths$3 {
    "/api/v1/canvas": {
        get: {
            parameters: {
                query: {
                    /** Specify a single composition ID to fetch. Changes response from list to single. */
                    compositionId?: components$2["parameters"]["compositionId"];
                    /** Specify multiple composition IDs to fetch. Response type will be a list. */
                    compositionIDs?: components$2["parameters"]["compositionIDs"];
                    /** Filters composition lists by the user who created them. The user is specified by their identity subject. */
                    createdBy?: components$2["parameters"]["createdBy"];
                    /**
                     * Matches compositions where their name, slug, or definition name contains the specified keyword.
                     * NOT a full text search; does not match composition contents.
                     */
                    keyword?: components$2["parameters"]["keyword"];
                    /** Max number of records to return */
                    limit?: components$2["parameters"]["limit"];
                    /** Number of records to skip */
                    offset?: components$2["parameters"]["offset"];
                    /** Sets the sorting of the results. If unspecified, results are sorted by name ascending. */
                    orderBy?: components$2["parameters"]["orderBy"];
                    /**
                     * Matches compositions based on whether they are a pattern composition or a regular composition.
                     * If true, only pattern compositions will be returned.
                     * If false, only regular compositions will be returned.
                     * If omitted, both pattern and regular compositions will be returned.
                     */
                    pattern?: components$2["parameters"]["pattern"];
                    /** The project the composition(s) are on. */
                    projectId: components$2["parameters"]["projectId"];
                    /** Specify a project map ID to fetch by path or node ID from. If not specified, the default project map for the projectId is used. */
                    projectMapId?: components$2["parameters"]["projectMapId"];
                    /** Specify a single composition to fetch by assodicated project map node ID.  Changes response from list to single. */
                    projectMapNodeId?: components$2["parameters"]["projectMapNodeId"];
                    /** Specify a single composition to fetch by assodicated project map node path.  Changes response from list to single. */
                    projectMapNodePath?: components$2["parameters"]["projectMapNodePath"];
                    /**
                     * @deprecated Signals an enhancer proxy to skip processing enhancements to the data and return raw data only.
                     * This improves performance if you do not require enhanced component data.
                     * If calling the Canvas API directly with no enhancer proxy, this has no effect.
                     */
                    skipEnhance?: components$2["parameters"]["skipEnhance"];
                    /**
                     * If true, any pattern references in the composition will be left unresolved.
                     * This is appropriate if you intend to serialize the composition without patterns
                     * embedded into it, and serialize the pattern data separately.
                     */
                    skipPatternResolution?: components$2["parameters"]["skipPatternResolution"];
                    /** @deprecated This parameter is unused and has no effect. Passing this parameter will become an error in the future. */
                    skipParameterResolution?: components$2["parameters"]["skipParameterResolution"];
                    /**
                     * If true, any pattern override data is not resolved by the API.
                     * This is intended for internal use in the Canvas editor, and should not be used.
                     * Passing this parameter automatically implies withComponentIDs to be true.
                     */
                    skipOverridesResolution?: components$2["parameters"]["skipOverridesResolution"];
                    /** Specify a single composition to fetch by slug. Changes response from list to single. */
                    slug?: components$2["parameters"]["slug"];
                    /** Publishing state to fetch. 0 = draft, 64 = published. */
                    state?: components$2["parameters"]["state"];
                    /** The component type (by public ID) to filter by. Note that this filters the root composition type only; components in slots are not matched by this filter. */
                    type?: components$2["parameters"]["type"];
                    /**
                     * @deprecated Filters composition lists by the UI status of the composition.
                     * This internal status is subject to change without notice, and is thus marked deprecated to discourage use of internal data.
                     */
                    uiStatus?: components$2["parameters"]["uiStatus"];
                    /**
                     * Filters out compositions without attached node or filters out compositions with attached nodes
                     * in case of FALSE. If not specified - no filtration applied.
                     */
                    attachedToProjectMap?: components$2["parameters"]["attachedToProjectMap"];
                    /** Filters composition lists by the user who last updated them. The user is specified by their identity subject. */
                    updatedBy?: components$2["parameters"]["updatedBy"];
                    /**
                     * If true the `_id` unique identifier of each non-root component will be part of the response data.
                     * If false, the `_id` will not be present in the API response.
                     */
                    withComponentIDs?: components$2["parameters"]["withComponentIDs"];
                    /**
                     * Controls whether the total count of results will be returned along with the current results page in a list.
                     * Has no effect when not fetching a list. This does impact performance when enabled.
                     */
                    withTotalCount?: components$2["parameters"]["withTotalCount"];
                    /**
                     * @deprecated Returns the UI status string of the composition.
                     * This internal status is subject to change without notice, and is thus marked deprecated to discourage use of internal data.
                     */
                    withUIStatus?: components$2["parameters"]["withUIStatus"];
                    /** Includes project map node information in the composition results */
                    withProjectMapNodes?: components$2["parameters"]["withProjectMapNodes"];
                    /** @deprecated Includes content source map metadata on supported parameters */
                    withContentSourceMap?: components$2["parameters"]["withContentSourceMap"];
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": components$2["schemas"]["CompositionListResponse"] | components$2["schemas"]["CompositionApiResponse"];
                    };
                };
                400: external$4["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$4["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$4["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                /** Composition not found */
                404: {
                    content: {
                        "text/plain": string;
                    };
                };
                429: external$4["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$4["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
        };
        /** Upserts a composition */
        put: {
            responses: {
                /** OK */
                204: never;
                400: external$4["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$4["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$4["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$4["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$4["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description The project ID to upsert the composition to
                         */
                        projectId: string;
                        /** @description The publishing state to upsert into. 0 = draft, 64 = published */
                        state: number;
                        composition: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["RootComponentInstance"];
                        /**
                         * @description True if the composition is a pattern (which can be referenced on other compositions)
                         * @default false
                         */
                        pattern?: boolean;
                        /** @description Ignored if present */
                        created?: string;
                        /** @description Ignored if present */
                        modified?: string;
                    };
                };
            };
        };
        /** Deletes or unpublishes a composition */
        delete: {
            responses: {
                /** OK */
                204: never;
                400: external$4["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$4["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$4["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$4["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$4["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description The ID of the composition to delete
                         */
                        compositionId: string;
                        /**
                         * Format: uuid
                         * @description The ID of the project the composition to delete belongs to
                         */
                        projectId: string;
                        /** @description The state to delete (0 = draft, 64 = published [causes unpublishing], unspecified = all) */
                        state?: number;
                    };
                };
            };
        };
        /** Handles preflight requests. This endpoint allows CORS. */
        options: {
            responses: {
                /** OK */
                204: never;
            };
        };
    };
}
interface components$2 {
    schemas: {
        CompositionApiResponse: {
            /** @description Publishing state to fetch. 0 = draft, 64 = published. */
            state: number;
            /**
             * @deprecated
             * @description UI status value. Subject to change without notice; do not rely on this value. Only present when `withUIStatus` option is true.
             * @enum {string}
             */
            uiStatus?: "Draft" | "Modified" | "Published" | "Orphan";
            /**
             * Format: uuid
             * @description The project ID that this layout data is part of
             */
            projectId: string;
            /**
             * Format: date-time,
             * @description Created date string for this definition
             */
            created: string;
            /**
             * Format: date-time,
             * @description Modified date string for this definition
             */
            modified: string;
            /** @description Whether this composition is a pattern (can be referenced by other compositions, not treated as a composition) */
            pattern: boolean;
            composition: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["RootComponentInstance"];
        };
        CompositionListResponse: {
            compositions: components$2["schemas"]["CompositionApiResponse"][];
            /** @description Total number of compositions that match the query. Only present when `withTotalCount` option is true. */
            totalCount?: number;
        };
    };
    parameters: {
        /** @description The project the composition(s) are on. */
        projectId: string;
        /** @description Specify a single composition ID to fetch. Changes response from list to single. */
        compositionId: string;
        /** @description Specify multiple composition IDs to fetch. Response type will be a list. */
        compositionIDs: string[];
        /** @description Specify a single composition to fetch by slug. Changes response from list to single. */
        slug: string;
        /** @description Specify a single composition to fetch by assodicated project map node ID.  Changes response from list to single. */
        projectMapNodeId: string;
        /** @description Specify a single composition to fetch by assodicated project map node path.  Changes response from list to single. */
        projectMapNodePath: string;
        /** @description Specify a project map ID to fetch by path or node ID from. If not specified, the default project map for the projectId is used. */
        projectMapId: string;
        /** @description The component type (by public ID) to filter by. Note that this filters the root composition type only; components in slots are not matched by this filter. */
        type: string[];
        /** @description Publishing state to fetch. 0 = draft, 64 = published. */
        state: number;
        /** @description Number of records to skip */
        offset: number;
        /** @description Max number of records to return */
        limit: number;
        /**
         * @deprecated
         * @description Signals an enhancer proxy to skip processing enhancements to the data and return raw data only.
         * This improves performance if you do not require enhanced component data.
         * If calling the Canvas API directly with no enhancer proxy, this has no effect.
         */
        skipEnhance: boolean;
        /**
         * @description If true, any pattern references in the composition will be left unresolved.
         * This is appropriate if you intend to serialize the composition without patterns
         * embedded into it, and serialize the pattern data separately.
         */
        skipPatternResolution: boolean;
        /**
         * @description If true, any pattern override data is not resolved by the API.
         * This is intended for internal use in the Canvas editor, and should not be used.
         * Passing this parameter automatically implies withComponentIDs to be true.
         */
        skipOverridesResolution: boolean;
        /**
         * @deprecated
         * @description This parameter is unused and has no effect. Passing this parameter will become an error in the future.
         */
        skipParameterResolution: boolean;
        /**
         * @description If true the `_id` unique identifier of each non-root component will be part of the response data.
         * If false, the `_id` will not be present in the API response.
         */
        withComponentIDs: boolean;
        /**
         * @description Matches compositions where their name, slug, or definition name contains the specified keyword.
         * NOT a full text search; does not match composition contents.
         */
        keyword: string;
        /**
         * @description Matches compositions based on whether they are a pattern composition or a regular composition.
         * If true, only pattern compositions will be returned.
         * If false, only regular compositions will be returned.
         * If omitted, both pattern and regular compositions will be returned.
         */
        pattern: boolean;
        /** @description Sets the sorting of the results. If unspecified, results are sorted by name ascending. */
        orderBy: ("updated_at_DESC" | "updated_at_ASC" | "created_at_DESC" | "created_at_ASC" | "name_DESC" | "name_ASC" | "slug_DESC" | "slug_ASC")[];
        /**
         * @deprecated
         * @description Returns the UI status string of the composition.
         * This internal status is subject to change without notice, and is thus marked deprecated to discourage use of internal data.
         */
        withUIStatus: boolean;
        /**
         * @deprecated
         * @description Filters composition lists by the UI status of the composition.
         * This internal status is subject to change without notice, and is thus marked deprecated to discourage use of internal data.
         */
        uiStatus: ("Draft" | "Modified" | "Published" | "Orphan")[];
        /**
         * @description Filters out compositions without attached node or filters out compositions with attached nodes
         * in case of FALSE. If not specified - no filtration applied.
         */
        attachedToProjectMap: boolean;
        /** @description Includes project map node information in the composition results */
        withProjectMapNodes: boolean;
        /**
         * @deprecated
         * @description Includes content source map metadata on supported parameters
         */
        withContentSourceMap: boolean;
        /** @description Filters composition lists by the user who created them. The user is specified by their identity subject. */
        createdBy: string;
        /** @description Filters composition lists by the user who last updated them. The user is specified by their identity subject. */
        updatedBy: string;
        /**
         * @description Controls whether the total count of results will be returned along with the current results page in a list.
         * Has no effect when not fetching a list. This does impact performance when enabled.
         */
        withTotalCount: boolean;
    };
}
interface external$4 {
    "swagger.yml": {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** @description Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        "application/json": external$4["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        "application/json": external$4["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        "application/json": external$4["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Resource not found */
                NotFoundError: {
                    content: {
                        "application/json": external$4["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
    "uniform-canvas-types.swagger.yml": {
        paths: {};
        components: {
            schemas: {
                /** @description Public ID (used in code). Do not change after creation. */
                PublicIdProperty: string;
                /** @description The definition of a component parameter */
                ComponentDefinitionParameter: {
                    id: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the parameter */
                    name: string;
                    /** @description Appears next to the parameter in the Composition editor */
                    helpText?: string;
                    /** @description Type name of the parameter (provided by a Uniform integration) */
                    type: string;
                    /** @description The configuration object for the type (type-specific) */
                    typeConfig?: unknown;
                };
                /** @description The definition of a named component slot that can contain other components */
                ComponentDefinitionSlot: {
                    id: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the slot */
                    name: string;
                    /** @description A list of component definition public IDs that are allowed in this named slot */
                    allowedComponents: string[];
                    /**
                     * @description Whether this slot inherits its allowed components from the parent slot it lives in. If true, allowedComponents is irrelevant.
                     * If allowAllComponents is true, this value is ignored.
                     *
                     * @default false
                     */
                    inheritAllowedComponents: boolean;
                    /**
                     * @description When false or not defined, only components in allowedComponents may be added to this slot - and if allowedComponents is empty, nothing can be added.
                     * When true, every component and pattern that is defined may be added to this slot regardless of any other setting including inheritAllowedComponents.
                     */
                    allowAllComponents?: boolean;
                    /**
                     * @description When not defined, or false: all patterns for components listed in allowedComponents are automatically allowed in the slot.
                     * When true: patterns for components listed in allowedComponents are not allowed in the slot unless explicitly added to allowedComponents as `$p:<patternid>`
                     */
                    patternsInAllowedComponents?: boolean;
                    /** @description Minimum valid number of components in this slot */
                    minComponents?: number;
                    /** @description Maximum valid number of components in this slot */
                    maxComponents?: number;
                };
                /** @description The definition of a composition's slug settings */
                ComponentDefinitionSlugSettings: {
                    /**
                     * @description Whether the slug is required
                     * no: slug is optional
                     * yes: slug is required
                     * disabled: slug is disabled and will not be shown in the editor
                     *
                     * @default no
                     * @enum {string}
                     */
                    required?: "no" | "yes" | "disabled";
                    /**
                     * @description Slug uniqueness configuration.
                     * no = no unique constraint
                     * local = must be unique within this component type
                     * global = must be unique across all component types
                     *
                     * @enum {string}
                     */
                    unique?: "no" | "local" | "global";
                    /** @description Regular expression slugs must match */
                    regularExpression?: string;
                    /**
                     * @description Custom error message when regular expression validation fails.
                     * Has no effect if `regularExpression` is not set.
                     */
                    regularExpressionMessage?: string;
                };
                /** @description The definition of a component variant */
                ComponentDefinitionVariant: {
                    id: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the variant */
                    name: string;
                };
                /** @description Permission set for a component defintion */
                ComponentDefinitionPermission: {
                    roleId: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /**
                     * @description Permission type for this permission ComponentDefinition:
                     * read | write | create | delete
                     *
                     * @enum {string}
                     */
                    permission: "read" | "write" | "create" | "delete";
                    /** @description State of the component that this permission applies to */
                    state: number;
                };
                /** @description Defines a component type that can live on a Composition */
                ComponentDefinition: {
                    id: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the component definition */
                    name: string;
                    /**
                     * @description Icon name or URL for the component definition (e.g. 'screen' or 'https://s3/my-component.jpg')
                     * @default screen
                     */
                    icon?: string;
                    /**
                     * @description The public ID of the parameter whose value should be used to create a display title for this component in the UI.
                     * The parameter type must support being used as a title parameter for this to work.
                     */
                    titleParameter?: string | null;
                    /**
                     * @description Whether this component type can be the root of a composition. If false, this component is only used within slots on other components.
                     * @default false
                     */
                    canBeComposition?: boolean;
                    /** @description The parameters for this component. Parameters are key-value pairs that can be anything from text values to links to CMS entries. */
                    parameters?: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionParameter"][];
                    /**
                     * @description if this component uses team permissions or custom permissions
                     * @default true
                     */
                    useTeamPermissions?: boolean;
                    /** @description Custom role permissions for this component definition */
                    permissions?: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionPermission"][];
                    /** @description The named slots for this component; placement areas where arrays of other components can be added. */
                    slots?: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionSlot"][];
                    slugSettings?: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionSlugSettings"];
                    /** @description Default component instance value */
                    defaults?: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"] | null;
                    /** @description Named variants for this component; enables creation of visual variants that use the same parameter data */
                    variants?: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionVariant"][];
                    /** @description Created date string for this definition (ignored for writes) */
                    created?: string;
                    /** @description Last modified date string for this definition (ignored for writes) */
                    updated?: string;
                };
                /** @description Defines a content type */
                ContentType: {
                    id: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the content type */
                    name: string;
                    /**
                     * @description The public ID of the field whose value should be used to create a display title for entries of this content type in the UI.
                     * The field type must support being used as a title field for this to work.
                     */
                    titleField?: string | null;
                    /** @description The fields for this content type. Fields are key-value pairs that can be text, numbers, JSON objects, etc. */
                    fields?: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionParameter"][];
                    /** @description Created date string for this content type (ignored for writes) */
                    created?: string;
                    /** @description Last modified date string for this content type (ignored for writes) */
                    updated?: string;
                };
                /** @description Defines an editable parameter on a component. */
                ComponentParameter: {
                    /** @description The value of the parameter. Any JSON-serializable value is acceptable. */
                    value: unknown;
                    /** @description The type of the parameter. Determines how it is displayed when editing, and tells the consumer how to process it. */
                    type: string;
                    connectedData?: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataElementConnectionDefinition"];
                };
                /**
                 * @description Defines a connection to a data element on a data resource.
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the edgehanced/data-bound state of a composition may be made without notice.
                 */
                DataElementConnectionDefinition: {
                    /** @description A JSON Pointer expression that defines the data element to connect the parameter to. */
                    pointer: string;
                    /**
                     * @description The syntax used to select the data element to bind to
                     * @enum {string}
                     */
                    syntax: "jptr";
                };
                /** @description Defines the shape of a component instance served by the composition API. */
                ComponentInstance: {
                    /** @description Type of the component instance (public_id of its definition) */
                    type: string;
                    /** @description Component parameter values for the component instance */
                    parameters?: {
                        [key: string]: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    /** @description Public ID of alternate visual appearance for this component, if any selected */
                    variant?: string;
                    /** @description Slots containing any child components */
                    slots?: {
                        [key: string]: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"][];
                    };
                    /**
                     * @description Unique identifier of the component within the composition.
                     * No assumptions should be made about the format of this value other than "it will be unique."
                     * This is not set unless specifically requested via `withComponentIDs` API parameter.
                     */
                    _id?: string;
                    /** @description Indicates this component instance should be sourced from a pattern library pattern. */
                    _pattern?: string;
                    _dataResources?: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinitions"];
                    /**
                     * @description Data definitions coming from a pattern resolved for this component. Merged with _dataResources during resolution.
                     * Means nothing for PUTs; it will be ignored.
                     */
                    _patternDataResources?: {
                        [key: string]: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinition"];
                    };
                    /**
                     * @description Describes why the pattern could not be resolved, if a pattern could not be resolved. For PUTs, this is allowed but ignored.
                     * CYCLIC: A cyclic pattern graph was detected, which could not be resolved because it would cause an infinite loop.
                     * NOTFOUND: The pattern ID referenced could not be found. It may have been deleted, or not be published yet.
                     * Means nothing for PUTs; it will be ignored.
                     *
                     * @enum {string}
                     */
                    _patternError?: "NOTFOUND" | "CYCLIC";
                    /**
                     * @description Defines patch overrides to component IDs that live in the composition.
                     * This can be used to override parameters that are defined on patterns,
                     * including nested patterns, with values that are specific to this composition.
                     * The keys in this object are component IDs.
                     * Overrides are applied from the top down, so for example if both the composition
                     * and a pattern on the composition define an override on a nested pattern,
                     * the composition's override replaces the pattern's.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overrides?: {
                        [key: string]: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverride"];
                    };
                    /**
                     * @description When used on a pattern, defines how the pattern's parameters may be overridden
                     * by consumers of the pattern.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overridability?: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverridability"];
                };
                /** @description Defines the shape of the root component in a composition */
                RootComponentInstance: {
                    /** @description Type of the component instance (public_id of its definition) */
                    type: string;
                    /** @description Component parameter values for the component instance */
                    parameters?: {
                        [key: string]: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    /** @description Public ID of alternate visual appearance for this component, if any selected */
                    variant?: string;
                    /** @description Project map nodes associated with this component.  Must pass withProjectMapNodes parameter to be populated. */
                    projectMapNodes?: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["CompositionProjectMapNodeInfo"][];
                    /** @description Slots containing any child components */
                    slots?: {
                        [key: string]: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"][];
                    };
                    /** @description The public UUID of the composition. */
                    _id: string;
                    /** @description Slug pattern of this component. */
                    _slug?: string | null;
                    /** @description Friendly name of this component. */
                    _name: string;
                    _dataResources?: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinitions"];
                    /**
                     * @description Defines patch overrides to component IDs that live in the composition.
                     * This can be used to override parameters that are defined on patterns,
                     * including nested patterns, with values that are specific to this composition.
                     * The keys in this object are component IDs.
                     * Overrides are applied from the top down, so for example if both the composition
                     * and a pattern on the composition define an override on a nested pattern,
                     * the composition's override replaces the pattern's.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overrides?: {
                        [key: string]: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverride"];
                    };
                    /**
                     * @description When used on a pattern, defines how the pattern's parameters may be overridden
                     * by consumers of the pattern.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overridability?: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverridability"];
                };
                /**
                 * @description Defines how to override a specific component.
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                 */
                ComponentOverride: {
                    parameters?: {
                        [key: string]: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    variant?: string;
                };
                /**
                 * @description Defines how a component on a pattern may have its values overridden.
                 * NOTE: Data resources' overridability is defined in the data resource definition, not here.
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                 */
                ComponentOverridability: {
                    /** @description Defines component parameter value overrides. Keys are the parameter public ID. */
                    parameters?: {
                        [key: string]: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["OverrideOptions"];
                    };
                    /** @description Allows overriding a display variant is allowed, if it is defined on the component the pattern is derived from. Default = false. */
                    variants?: boolean;
                };
                /**
                 * @description Whether a parameter is overridable
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                 *
                 * @enum {string}
                 */
                OverrideOptions: "yes" | "no";
                /**
                 * @description An instance of a data source (i.e. "Master environment of the stable space", "Yelp API", "Sanity dev dataset").
                 * These are created in the UI and shared across a whole project.
                 * NOTE: if you acquire a list of data sources or do not have manage permissions, you will receive "SECRET"
                 * for all header, parameter, and variable values to obscure the actual encrypted secret value.
                 */
                DataSource: {
                    /** @description Public ID of the data source */
                    id: string;
                    /** @description Display name of the data source */
                    displayName: string;
                    /** @description The type of data connector this connects to (e.g. 'cms-items', provided by an intalled integration) */
                    connectorType: string;
                    /** @description Base resource URL of the data source. No trailing slash. */
                    baseUrl: string;
                    /** @description HTTP headers to pass with requests to the data source */
                    headers?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
                    parameters?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Variables needed to make calls to the data source */
                    variables?: {
                        [key: string]: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataVariableDefinition"];
                    };
                    /** @description Custom configuration specific to the data source being defined (used to maintain UI state for custom integrations) */
                    custom?: {
                        [key: string]: unknown;
                    };
                };
                /** @description A specific type of data that a Data Source can provide (i.e. "Recipe", "Recipes List by Tag", "Yelp Reviews of My Restaurant"). These are created in the UI and shared a whole project. */
                DataType: {
                    /** @description Public ID of the data type */
                    id: string;
                    /** @description Display name of the data type */
                    displayName: string;
                    /** @description Public ID of the associated data source */
                    dataSourceId: string;
                    /**
                     * @description A connector-specific archetype for this data type; used to select UI as well as perform any
                     * necessary post-processing on the response. e.g. 'cms-entry', 'cms-query'. Can be undefined if
                     * no special UI or processing is required.
                     */
                    archetype?: string;
                    allowedOnComponents?: string[];
                    /** @description Resource path, appended to the data source's baseUrl (e.g. baseUrl = https://base.url, path = /v1/endpoint -> final URL https://base.url/v1/endpoint). Must have leading slash. */
                    path: string;
                    /** @description Time-to-live (in seconds) for the primary resource data cache. */
                    ttl?: number;
                    /** @description Long term data resource cache configuration. */
                    longTermCache?: {
                        /** @description A flag to turn the long term cache on. */
                        enabled: boolean;
                        /** @description Time-to-live (in hours) for the long term resource data cache. */
                        ttlInHours?: number;
                    };
                    /** @description A key for the resource data cache purging. */
                    purgeKey?: string;
                    /** @description URL to a custom badge icon for the Uniform dashboard for this data type. If not set falls back to the data connector or integration icons. */
                    badgeIconUrl?: string;
                    /** @description HTTP headers to pass with requests to the data type. Merged with headers from the data source, overriding identical keys. */
                    headers?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
                    parameters?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Body to pass with requests to the data type (ignored unless method is POST) */
                    body?: string;
                    /**
                     * @description HTTP method to use with requests to the data type.
                     * @default GET
                     * @enum {string}
                     */
                    method: "GET" | "POST" | "HEAD";
                    /** @description Variables needed to make calls to the data type. Merged with variables from the data source, overriding identical keys. */
                    variables?: {
                        [key: string]: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataVariableDefinition"];
                    };
                    /** @description Custom configuration specific to the data source being defined */
                    custom?: {
                        [key: string]: unknown;
                    };
                };
                /** @description Defines the shape of a data variable on a Data Source or Data Type */
                DataVariableDefinition: {
                    /** @description Display name of the data variable */
                    displayName?: string;
                    /** @description Explanatory text that is provided to the data resource editor to explain what this variable does. */
                    helpText?: string;
                    /**
                     * @description Type of the data variable. Optionally used as a point of reference for custom integrations to decide how to render an editor for a variable.
                     * @default text
                     */
                    type?: string;
                    /** @description Default value of the data variable */
                    default: string;
                    /** @description Sets the order of the variable when displayed in a list with other variables. If not set, the order defaults to alphabetical with any explicitly set orders first in the list. */
                    order?: number;
                };
                /**
                 * @description Data definitions attached to this component. The property name is the key of the data in the data document.
                 * Note: data definitions are inherited from ancestors at runtime (and may be overridden by descendants that use the same key).
                 */
                DataResourceDefinitions: {
                    [key: string]: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinition"];
                };
                /** @description Defines a data resource, which is a named JSON document, usually from an API response, which may be projected onto parameters */
                DataResourceDefinition: {
                    /** @description Public ID of the data type that provides this data */
                    type: string;
                    /** @description Whether this data is a pattern data resource that can be overridden when a pattern is referenced on another composition. If this is not a pattern composition, this has no meaning and should not be used. If unspecified, the default is false. */
                    isPatternParameter?: boolean;
                    /**
                     * @description When true, the default data resource of a pattern data parameter (isPatternParameter=true) will be ignored when the pattern is referenced.
                     * Unless specifically overridden, the pattern data parameter will be provided with a null default value - leaving any data connections to it unresolvable.
                     * If isPatternParameter is false or undefined, this has no meaning.
                     */
                    ignorePatternParameterDefault?: boolean;
                    variables?: external$4["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceVariables"];
                };
                /** @description Variable values for a data resource. */
                DataResourceVariables: {
                    [key: string]: string;
                };
                /** @description Project map node information related to a component. */
                CompositionProjectMapNodeInfo: {
                    /**
                     * Format: uuid
                     * @description Unique identifier for the project map node
                     */
                    id: string;
                    /** @description Path of the project map node */
                    path: string;
                    /**
                     * Format: uuid
                     * @description Unique identifier for the project map that this node belongs to.
                     */
                    projectMapId: string;
                };
            };
        };
        operations: {};
    };
}

interface components$1 {
    schemas: {
        CompositionResolvedGetResponse: components$1["schemas"]["EdgehancerResult"] & external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["schemas"]["CompositionApiResponse"];
        EdgehancerResult: {
            diagnostics?: components$1["schemas"]["CompositionDiagnostics"];
            errors?: components$1["schemas"]["CompositionIssue"][];
            warnings?: components$1["schemas"]["CompositionIssue"][];
        };
        EdgehancersError: {
            message: string;
            status: number;
            statusText: string;
        };
        UniformError: components$1["schemas"]["EdgehancersError"] | external$3["../../../lambda/functions/swagger.yml"]["components"]["schemas"]["Error"];
        InvalidationPayload: {
            /** @description List of variables with values to invalidate */
            variables?: {
                name: string;
                value: string;
            }[];
            /** @description List of surrogate keys to invalidate */
            surrogateKeys?: string[];
        };
        BatchInvalidationPayload: {
            dataTypeId: string;
            /** Format: uuid */
            purgeKey: string;
            conditions?: components$1["schemas"]["InvalidationPayload"];
        }[];
        DataDiagnostic: {
            componentPath: string;
            dataType: string;
            dataName: string;
            performance: {
                cacheHit: boolean;
                total: number;
                retryCount: number;
                retryDelay: number;
                sourceCache?: string;
            };
            data: unknown;
        };
        /**
         * @description Diagnostic information about request processing, including origin/config/data
         * * timings, edge locations, cache statuses and raw data.
         * * Only set when diagnostics=true is passed to the options.
         */
        CompositionDiagnostics: {
            /** @description Edge location where the request was processed */
            edgeLocation?: string;
            compositionFetch?: {
                /** @description How long it took to fetch the composition (ms) */
                duration: number;
                /** @description Indicates if the composition was fetched from the cache */
                cacheHit: boolean;
                /** @description Indicates if the request results in a valid composition */
                hasValidComposition: boolean;
                /** @description Edge cache location used */
                cacheLocation?: string;
                /** @description Uniform-specifc request identifiers */
                requestId?: string;
            };
            configRetrieval?: {
                /** @description How long it took to retrieve the config (ms, in parallel to composition fetch) */
                duration: number;
                /** @description How many data type configs were retrieved */
                dataTypeCount: number;
            };
            data?: components$1["schemas"]["DataDiagnostic"][];
        };
        CompositionIssue: {
            componentPath?: string;
            componentType?: string;
            message: string;
            type: string;
            parameterName?: string;
            expression?: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataElementConnectionDefinition"];
            dataName?: string;
            dataType?: string;
            inputName?: string;
            code?: string;
        };
        InvalidationResult: {
            ok: boolean;
        };
        BatchInvalidationResult: {
            ok: number;
            failed: number;
        };
    };
    responses: {
        /** Invalid caller input came with the request */
        BadRequestError: {
            content: {
                "application/json": components$1["schemas"]["UniformError"];
            };
        };
        UnauthorizedError: {
            content: {
                "application/json": components$1["schemas"]["UniformError"];
            };
        };
        ForbiddenError: {
            content: {
                "application/json": components$1["schemas"]["UniformError"];
            };
        };
        /** The requested resource does not exist */
        NotFoundError: {
            content: {
                "application/json": components$1["schemas"]["UniformError"];
            };
        };
        /** Invalid method was used to call the endpoint */
        MethodNotAllowedError: {
            content: {
                "application/json": components$1["schemas"]["UniformError"];
            };
        };
        /** The request body could not be parsed or understood */
        UnprocessableEntityError: {
            content: {
                "application/json": components$1["schemas"]["UniformError"];
            };
        };
        RateLimitError: {
            content: {
                "application/json": components$1["schemas"]["UniformError"];
            };
        };
        /** An unexpected error occurred */
        InternalServerError: {
            content: {
                "application/json": components$1["schemas"]["UniformError"];
            };
        };
        CompositionResult: {
            content: {
                "application/json": {
                    diagnostics?: components$1["schemas"]["CompositionDiagnostics"];
                    errors?: components$1["schemas"]["CompositionIssue"][];
                    warnings?: components$1["schemas"]["CompositionIssue"][];
                } & external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["schemas"]["CompositionApiResponse"];
            };
        };
        /** Edge route response */
        EdgeRouteResponse: {
            content: {
                "application/json": external$3["../../../lambda/functions/v1-route.swagger.yml"]["components"]["schemas"]["RouteResponseRedirect"] | external$3["../../../lambda/functions/v1-route.swagger.yml"]["components"]["schemas"]["RouteResponseNotFound"] | {
                    matchedRoute?: string;
                    dynamicInputs?: external$3["../../../lambda/functions/v1-route.swagger.yml"]["components"]["schemas"]["RouteDynamicInputs"];
                    /** @enum {string} */
                    type?: "composition";
                    compositionApiResponse?: components$1["schemas"]["CompositionResolvedGetResponse"];
                };
            };
        };
        /** Invalidation request was processed; ok indicates if it succeeded */
        InvalidationResult: {
            content: {
                "application/json": components$1["schemas"]["InvalidationResult"];
            };
        };
        /** Batch invalidation request was processed; number of successful and failed jobs is included */
        BatchInvalidationResult: {
            content: {
                "application/json": components$1["schemas"]["BatchInvalidationResult"];
            };
        };
    };
}
interface external$3 {
    "../../../lambda/functions/swagger.yml": {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** @description Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        "application/json": external$3["../../../lambda/functions/swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        "application/json": external$3["../../../lambda/functions/swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        "application/json": external$3["../../../lambda/functions/swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Resource not found */
                NotFoundError: {
                    content: {
                        "application/json": external$3["../../../lambda/functions/swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
    "../../../lambda/functions/uniform-canvas-types.swagger.yml": {
        paths: {};
        components: {
            schemas: {
                /** @description Public ID (used in code). Do not change after creation. */
                PublicIdProperty: string;
                /** @description The definition of a component parameter */
                ComponentDefinitionParameter: {
                    id: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the parameter */
                    name: string;
                    /** @description Appears next to the parameter in the Composition editor */
                    helpText?: string;
                    /** @description Type name of the parameter (provided by a Uniform integration) */
                    type: string;
                    /** @description The configuration object for the type (type-specific) */
                    typeConfig?: unknown;
                };
                /** @description The definition of a named component slot that can contain other components */
                ComponentDefinitionSlot: {
                    id: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the slot */
                    name: string;
                    /** @description A list of component definition public IDs that are allowed in this named slot */
                    allowedComponents: string[];
                    /**
                     * @description Whether this slot inherits its allowed components from the parent slot it lives in. If true, allowedComponents is irrelevant.
                     * If allowAllComponents is true, this value is ignored.
                     *
                     * @default false
                     */
                    inheritAllowedComponents: boolean;
                    /**
                     * @description When false or not defined, only components in allowedComponents may be added to this slot - and if allowedComponents is empty, nothing can be added.
                     * When true, every component and pattern that is defined may be added to this slot regardless of any other setting including inheritAllowedComponents.
                     */
                    allowAllComponents?: boolean;
                    /**
                     * @description When not defined, or false: all patterns for components listed in allowedComponents are automatically allowed in the slot.
                     * When true: patterns for components listed in allowedComponents are not allowed in the slot unless explicitly added to allowedComponents as `$p:<patternid>`
                     */
                    patternsInAllowedComponents?: boolean;
                    /** @description Minimum valid number of components in this slot */
                    minComponents?: number;
                    /** @description Maximum valid number of components in this slot */
                    maxComponents?: number;
                };
                /** @description The definition of a composition's slug settings */
                ComponentDefinitionSlugSettings: {
                    /**
                     * @description Whether the slug is required
                     * no: slug is optional
                     * yes: slug is required
                     * disabled: slug is disabled and will not be shown in the editor
                     *
                     * @default no
                     * @enum {string}
                     */
                    required?: "no" | "yes" | "disabled";
                    /**
                     * @description Slug uniqueness configuration.
                     * no = no unique constraint
                     * local = must be unique within this component type
                     * global = must be unique across all component types
                     *
                     * @enum {string}
                     */
                    unique?: "no" | "local" | "global";
                    /** @description Regular expression slugs must match */
                    regularExpression?: string;
                    /**
                     * @description Custom error message when regular expression validation fails.
                     * Has no effect if `regularExpression` is not set.
                     */
                    regularExpressionMessage?: string;
                };
                /** @description The definition of a component variant */
                ComponentDefinitionVariant: {
                    id: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the variant */
                    name: string;
                };
                /** @description Permission set for a component defintion */
                ComponentDefinitionPermission: {
                    roleId: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /**
                     * @description Permission type for this permission ComponentDefinition:
                     * read | write | create | delete
                     *
                     * @enum {string}
                     */
                    permission: "read" | "write" | "create" | "delete";
                    /** @description State of the component that this permission applies to */
                    state: number;
                };
                /** @description Defines a component type that can live on a Composition */
                ComponentDefinition: {
                    id: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the component definition */
                    name: string;
                    /**
                     * @description Icon name or URL for the component definition (e.g. 'screen' or 'https://s3/my-component.jpg')
                     * @default screen
                     */
                    icon?: string;
                    /**
                     * @description The public ID of the parameter whose value should be used to create a display title for this component in the UI.
                     * The parameter type must support being used as a title parameter for this to work.
                     */
                    titleParameter?: string | null;
                    /**
                     * @description Whether this component type can be the root of a composition. If false, this component is only used within slots on other components.
                     * @default false
                     */
                    canBeComposition?: boolean;
                    /** @description The parameters for this component. Parameters are key-value pairs that can be anything from text values to links to CMS entries. */
                    parameters?: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionParameter"][];
                    /**
                     * @description if this component uses team permissions or custom permissions
                     * @default true
                     */
                    useTeamPermissions?: boolean;
                    /** @description Custom role permissions for this component definition */
                    permissions?: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionPermission"][];
                    /** @description The named slots for this component; placement areas where arrays of other components can be added. */
                    slots?: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionSlot"][];
                    slugSettings?: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionSlugSettings"];
                    /** @description Default component instance value */
                    defaults?: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"] | null;
                    /** @description Named variants for this component; enables creation of visual variants that use the same parameter data */
                    variants?: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionVariant"][];
                    /** @description Created date string for this definition (ignored for writes) */
                    created?: string;
                    /** @description Last modified date string for this definition (ignored for writes) */
                    updated?: string;
                };
                /** @description Defines a content type */
                ContentType: {
                    id: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the content type */
                    name: string;
                    /**
                     * @description The public ID of the field whose value should be used to create a display title for entries of this content type in the UI.
                     * The field type must support being used as a title field for this to work.
                     */
                    titleField?: string | null;
                    /** @description The fields for this content type. Fields are key-value pairs that can be text, numbers, JSON objects, etc. */
                    fields?: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionParameter"][];
                    /** @description Created date string for this content type (ignored for writes) */
                    created?: string;
                    /** @description Last modified date string for this content type (ignored for writes) */
                    updated?: string;
                };
                /** @description Defines an editable parameter on a component. */
                ComponentParameter: {
                    /** @description The value of the parameter. Any JSON-serializable value is acceptable. */
                    value: unknown;
                    /** @description The type of the parameter. Determines how it is displayed when editing, and tells the consumer how to process it. */
                    type: string;
                    connectedData?: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataElementConnectionDefinition"];
                };
                /**
                 * @description Defines a connection to a data element on a data resource.
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the edgehanced/data-bound state of a composition may be made without notice.
                 */
                DataElementConnectionDefinition: {
                    /** @description A JSON Pointer expression that defines the data element to connect the parameter to. */
                    pointer: string;
                    /**
                     * @description The syntax used to select the data element to bind to
                     * @enum {string}
                     */
                    syntax: "jptr";
                };
                /** @description Defines the shape of a component instance served by the composition API. */
                ComponentInstance: {
                    /** @description Type of the component instance (public_id of its definition) */
                    type: string;
                    /** @description Component parameter values for the component instance */
                    parameters?: {
                        [key: string]: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    /** @description Public ID of alternate visual appearance for this component, if any selected */
                    variant?: string;
                    /** @description Slots containing any child components */
                    slots?: {
                        [key: string]: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"][];
                    };
                    /**
                     * @description Unique identifier of the component within the composition.
                     * No assumptions should be made about the format of this value other than "it will be unique."
                     * This is not set unless specifically requested via `withComponentIDs` API parameter.
                     */
                    _id?: string;
                    /** @description Indicates this component instance should be sourced from a pattern library pattern. */
                    _pattern?: string;
                    _dataResources?: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinitions"];
                    /**
                     * @description Data definitions coming from a pattern resolved for this component. Merged with _dataResources during resolution.
                     * Means nothing for PUTs; it will be ignored.
                     */
                    _patternDataResources?: {
                        [key: string]: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinition"];
                    };
                    /**
                     * @description Describes why the pattern could not be resolved, if a pattern could not be resolved. For PUTs, this is allowed but ignored.
                     * CYCLIC: A cyclic pattern graph was detected, which could not be resolved because it would cause an infinite loop.
                     * NOTFOUND: The pattern ID referenced could not be found. It may have been deleted, or not be published yet.
                     * Means nothing for PUTs; it will be ignored.
                     *
                     * @enum {string}
                     */
                    _patternError?: "NOTFOUND" | "CYCLIC";
                    /**
                     * @description Defines patch overrides to component IDs that live in the composition.
                     * This can be used to override parameters that are defined on patterns,
                     * including nested patterns, with values that are specific to this composition.
                     * The keys in this object are component IDs.
                     * Overrides are applied from the top down, so for example if both the composition
                     * and a pattern on the composition define an override on a nested pattern,
                     * the composition's override replaces the pattern's.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overrides?: {
                        [key: string]: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverride"];
                    };
                    /**
                     * @description When used on a pattern, defines how the pattern's parameters may be overridden
                     * by consumers of the pattern.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overridability?: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverridability"];
                };
                /** @description Defines the shape of the root component in a composition */
                RootComponentInstance: {
                    /** @description Type of the component instance (public_id of its definition) */
                    type: string;
                    /** @description Component parameter values for the component instance */
                    parameters?: {
                        [key: string]: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    /** @description Public ID of alternate visual appearance for this component, if any selected */
                    variant?: string;
                    /** @description Project map nodes associated with this component.  Must pass withProjectMapNodes parameter to be populated. */
                    projectMapNodes?: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["CompositionProjectMapNodeInfo"][];
                    /** @description Slots containing any child components */
                    slots?: {
                        [key: string]: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"][];
                    };
                    /** @description The public UUID of the composition. */
                    _id: string;
                    /** @description Slug pattern of this component. */
                    _slug?: string | null;
                    /** @description Friendly name of this component. */
                    _name: string;
                    _dataResources?: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinitions"];
                    /**
                     * @description Defines patch overrides to component IDs that live in the composition.
                     * This can be used to override parameters that are defined on patterns,
                     * including nested patterns, with values that are specific to this composition.
                     * The keys in this object are component IDs.
                     * Overrides are applied from the top down, so for example if both the composition
                     * and a pattern on the composition define an override on a nested pattern,
                     * the composition's override replaces the pattern's.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overrides?: {
                        [key: string]: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverride"];
                    };
                    /**
                     * @description When used on a pattern, defines how the pattern's parameters may be overridden
                     * by consumers of the pattern.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overridability?: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverridability"];
                };
                /**
                 * @description Defines how to override a specific component.
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                 */
                ComponentOverride: {
                    parameters?: {
                        [key: string]: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    variant?: string;
                };
                /**
                 * @description Defines how a component on a pattern may have its values overridden.
                 * NOTE: Data resources' overridability is defined in the data resource definition, not here.
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                 */
                ComponentOverridability: {
                    /** @description Defines component parameter value overrides. Keys are the parameter public ID. */
                    parameters?: {
                        [key: string]: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["OverrideOptions"];
                    };
                    /** @description Allows overriding a display variant is allowed, if it is defined on the component the pattern is derived from. Default = false. */
                    variants?: boolean;
                };
                /**
                 * @description Whether a parameter is overridable
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                 *
                 * @enum {string}
                 */
                OverrideOptions: "yes" | "no";
                /**
                 * @description An instance of a data source (i.e. "Master environment of the stable space", "Yelp API", "Sanity dev dataset").
                 * These are created in the UI and shared across a whole project.
                 * NOTE: if you acquire a list of data sources or do not have manage permissions, you will receive "SECRET"
                 * for all header, parameter, and variable values to obscure the actual encrypted secret value.
                 */
                DataSource: {
                    /** @description Public ID of the data source */
                    id: string;
                    /** @description Display name of the data source */
                    displayName: string;
                    /** @description The type of data connector this connects to (e.g. 'cms-items', provided by an intalled integration) */
                    connectorType: string;
                    /** @description Base resource URL of the data source. No trailing slash. */
                    baseUrl: string;
                    /** @description HTTP headers to pass with requests to the data source */
                    headers?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
                    parameters?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Variables needed to make calls to the data source */
                    variables?: {
                        [key: string]: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataVariableDefinition"];
                    };
                    /** @description Custom configuration specific to the data source being defined (used to maintain UI state for custom integrations) */
                    custom?: {
                        [key: string]: unknown;
                    };
                };
                /** @description A specific type of data that a Data Source can provide (i.e. "Recipe", "Recipes List by Tag", "Yelp Reviews of My Restaurant"). These are created in the UI and shared a whole project. */
                DataType: {
                    /** @description Public ID of the data type */
                    id: string;
                    /** @description Display name of the data type */
                    displayName: string;
                    /** @description Public ID of the associated data source */
                    dataSourceId: string;
                    /**
                     * @description A connector-specific archetype for this data type; used to select UI as well as perform any
                     * necessary post-processing on the response. e.g. 'cms-entry', 'cms-query'. Can be undefined if
                     * no special UI or processing is required.
                     */
                    archetype?: string;
                    allowedOnComponents?: string[];
                    /** @description Resource path, appended to the data source's baseUrl (e.g. baseUrl = https://base.url, path = /v1/endpoint -> final URL https://base.url/v1/endpoint). Must have leading slash. */
                    path: string;
                    /** @description Time-to-live (in seconds) for the primary resource data cache. */
                    ttl?: number;
                    /** @description Long term data resource cache configuration. */
                    longTermCache?: {
                        /** @description A flag to turn the long term cache on. */
                        enabled: boolean;
                        /** @description Time-to-live (in hours) for the long term resource data cache. */
                        ttlInHours?: number;
                    };
                    /** @description A key for the resource data cache purging. */
                    purgeKey?: string;
                    /** @description URL to a custom badge icon for the Uniform dashboard for this data type. If not set falls back to the data connector or integration icons. */
                    badgeIconUrl?: string;
                    /** @description HTTP headers to pass with requests to the data type. Merged with headers from the data source, overriding identical keys. */
                    headers?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
                    parameters?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Body to pass with requests to the data type (ignored unless method is POST) */
                    body?: string;
                    /**
                     * @description HTTP method to use with requests to the data type.
                     * @default GET
                     * @enum {string}
                     */
                    method: "GET" | "POST" | "HEAD";
                    /** @description Variables needed to make calls to the data type. Merged with variables from the data source, overriding identical keys. */
                    variables?: {
                        [key: string]: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataVariableDefinition"];
                    };
                    /** @description Custom configuration specific to the data source being defined */
                    custom?: {
                        [key: string]: unknown;
                    };
                };
                /** @description Defines the shape of a data variable on a Data Source or Data Type */
                DataVariableDefinition: {
                    /** @description Display name of the data variable */
                    displayName?: string;
                    /** @description Explanatory text that is provided to the data resource editor to explain what this variable does. */
                    helpText?: string;
                    /**
                     * @description Type of the data variable. Optionally used as a point of reference for custom integrations to decide how to render an editor for a variable.
                     * @default text
                     */
                    type?: string;
                    /** @description Default value of the data variable */
                    default: string;
                    /** @description Sets the order of the variable when displayed in a list with other variables. If not set, the order defaults to alphabetical with any explicitly set orders first in the list. */
                    order?: number;
                };
                /**
                 * @description Data definitions attached to this component. The property name is the key of the data in the data document.
                 * Note: data definitions are inherited from ancestors at runtime (and may be overridden by descendants that use the same key).
                 */
                DataResourceDefinitions: {
                    [key: string]: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinition"];
                };
                /** @description Defines a data resource, which is a named JSON document, usually from an API response, which may be projected onto parameters */
                DataResourceDefinition: {
                    /** @description Public ID of the data type that provides this data */
                    type: string;
                    /** @description Whether this data is a pattern data resource that can be overridden when a pattern is referenced on another composition. If this is not a pattern composition, this has no meaning and should not be used. If unspecified, the default is false. */
                    isPatternParameter?: boolean;
                    /**
                     * @description When true, the default data resource of a pattern data parameter (isPatternParameter=true) will be ignored when the pattern is referenced.
                     * Unless specifically overridden, the pattern data parameter will be provided with a null default value - leaving any data connections to it unresolvable.
                     * If isPatternParameter is false or undefined, this has no meaning.
                     */
                    ignorePatternParameterDefault?: boolean;
                    variables?: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceVariables"];
                };
                /** @description Variable values for a data resource. */
                DataResourceVariables: {
                    [key: string]: string;
                };
                /** @description Project map node information related to a component. */
                CompositionProjectMapNodeInfo: {
                    /**
                     * Format: uuid
                     * @description Unique identifier for the project map node
                     */
                    id: string;
                    /** @description Path of the project map node */
                    path: string;
                    /**
                     * Format: uuid
                     * @description Unique identifier for the project map that this node belongs to.
                     */
                    projectMapId: string;
                };
            };
        };
        operations: {};
    };
    "../../../lambda/functions/v1-canvas.swagger.yml": {
        paths: {
            "/api/v1/canvas": {
                get: {
                    parameters: {
                        query: {
                            /** Specify a single composition ID to fetch. Changes response from list to single. */
                            compositionId?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["compositionId"];
                            /** Specify multiple composition IDs to fetch. Response type will be a list. */
                            compositionIDs?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["compositionIDs"];
                            /** Filters composition lists by the user who created them. The user is specified by their identity subject. */
                            createdBy?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["createdBy"];
                            /**
                             * Matches compositions where their name, slug, or definition name contains the specified keyword.
                             * NOT a full text search; does not match composition contents.
                             */
                            keyword?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["keyword"];
                            /** Max number of records to return */
                            limit?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["limit"];
                            /** Number of records to skip */
                            offset?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["offset"];
                            /** Sets the sorting of the results. If unspecified, results are sorted by name ascending. */
                            orderBy?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["orderBy"];
                            /**
                             * Matches compositions based on whether they are a pattern composition or a regular composition.
                             * If true, only pattern compositions will be returned.
                             * If false, only regular compositions will be returned.
                             * If omitted, both pattern and regular compositions will be returned.
                             */
                            pattern?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["pattern"];
                            /** The project the composition(s) are on. */
                            projectId: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["projectId"];
                            /** Specify a project map ID to fetch by path or node ID from. If not specified, the default project map for the projectId is used. */
                            projectMapId?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["projectMapId"];
                            /** Specify a single composition to fetch by assodicated project map node ID.  Changes response from list to single. */
                            projectMapNodeId?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["projectMapNodeId"];
                            /** Specify a single composition to fetch by assodicated project map node path.  Changes response from list to single. */
                            projectMapNodePath?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["projectMapNodePath"];
                            /**
                             * @deprecated Signals an enhancer proxy to skip processing enhancements to the data and return raw data only.
                             * This improves performance if you do not require enhanced component data.
                             * If calling the Canvas API directly with no enhancer proxy, this has no effect.
                             */
                            skipEnhance?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["skipEnhance"];
                            /**
                             * If true, any pattern references in the composition will be left unresolved.
                             * This is appropriate if you intend to serialize the composition without patterns
                             * embedded into it, and serialize the pattern data separately.
                             */
                            skipPatternResolution?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["skipPatternResolution"];
                            /** @deprecated This parameter is unused and has no effect. Passing this parameter will become an error in the future. */
                            skipParameterResolution?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["skipParameterResolution"];
                            /**
                             * If true, any pattern override data is not resolved by the API.
                             * This is intended for internal use in the Canvas editor, and should not be used.
                             * Passing this parameter automatically implies withComponentIDs to be true.
                             */
                            skipOverridesResolution?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["skipOverridesResolution"];
                            /** Specify a single composition to fetch by slug. Changes response from list to single. */
                            slug?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["slug"];
                            /** Publishing state to fetch. 0 = draft, 64 = published. */
                            state?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["state"];
                            /** The component type (by public ID) to filter by. Note that this filters the root composition type only; components in slots are not matched by this filter. */
                            type?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["type"];
                            /**
                             * @deprecated Filters composition lists by the UI status of the composition.
                             * This internal status is subject to change without notice, and is thus marked deprecated to discourage use of internal data.
                             */
                            uiStatus?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["uiStatus"];
                            /**
                             * Filters out compositions without attached node or filters out compositions with attached nodes
                             * in case of FALSE. If not specified - no filtration applied.
                             */
                            attachedToProjectMap?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["attachedToProjectMap"];
                            /** Filters composition lists by the user who last updated them. The user is specified by their identity subject. */
                            updatedBy?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["updatedBy"];
                            /**
                             * If true the `_id` unique identifier of each non-root component will be part of the response data.
                             * If false, the `_id` will not be present in the API response.
                             */
                            withComponentIDs?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["withComponentIDs"];
                            /**
                             * Controls whether the total count of results will be returned along with the current results page in a list.
                             * Has no effect when not fetching a list. This does impact performance when enabled.
                             */
                            withTotalCount?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["withTotalCount"];
                            /**
                             * @deprecated Returns the UI status string of the composition.
                             * This internal status is subject to change without notice, and is thus marked deprecated to discourage use of internal data.
                             */
                            withUIStatus?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["withUIStatus"];
                            /** Includes project map node information in the composition results */
                            withProjectMapNodes?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["withProjectMapNodes"];
                            /** @deprecated Includes content source map metadata on supported parameters */
                            withContentSourceMap?: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["parameters"]["withContentSourceMap"];
                        };
                    };
                    responses: {
                        /** OK */
                        200: {
                            content: {
                                "application/json": external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["schemas"]["CompositionListResponse"] | external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["schemas"]["CompositionApiResponse"];
                            };
                        };
                        400: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["BadRequestError"];
                        401: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                        403: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["ForbiddenError"];
                        /** Composition not found */
                        404: {
                            content: {
                                "text/plain": string;
                            };
                        };
                        429: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["RateLimitError"];
                        500: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["InternalServerError"];
                    };
                };
                /** Upserts a composition */
                put: {
                    responses: {
                        /** OK */
                        204: never;
                        400: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["BadRequestError"];
                        401: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                        403: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["ForbiddenError"];
                        429: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["RateLimitError"];
                        500: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["InternalServerError"];
                    };
                    requestBody: {
                        content: {
                            "application/json": {
                                /**
                                 * Format: uuid
                                 * @description The project ID to upsert the composition to
                                 */
                                projectId: string;
                                /** @description The publishing state to upsert into. 0 = draft, 64 = published */
                                state: number;
                                composition: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["RootComponentInstance"];
                                /**
                                 * @description True if the composition is a pattern (which can be referenced on other compositions)
                                 * @default false
                                 */
                                pattern?: boolean;
                                /** @description Ignored if present */
                                created?: string;
                                /** @description Ignored if present */
                                modified?: string;
                            };
                        };
                    };
                };
                /** Deletes or unpublishes a composition */
                delete: {
                    responses: {
                        /** OK */
                        204: never;
                        400: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["BadRequestError"];
                        401: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                        403: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["ForbiddenError"];
                        429: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["RateLimitError"];
                        500: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["InternalServerError"];
                    };
                    requestBody: {
                        content: {
                            "application/json": {
                                /**
                                 * Format: uuid
                                 * @description The ID of the composition to delete
                                 */
                                compositionId: string;
                                /**
                                 * Format: uuid
                                 * @description The ID of the project the composition to delete belongs to
                                 */
                                projectId: string;
                                /** @description The state to delete (0 = draft, 64 = published [causes unpublishing], unspecified = all) */
                                state?: number;
                            };
                        };
                    };
                };
                /** Handles preflight requests. This endpoint allows CORS. */
                options: {
                    responses: {
                        /** OK */
                        204: never;
                    };
                };
            };
        };
        components: {
            schemas: {
                CompositionApiResponse: {
                    /** @description Publishing state to fetch. 0 = draft, 64 = published. */
                    state: number;
                    /**
                     * @deprecated
                     * @description UI status value. Subject to change without notice; do not rely on this value. Only present when `withUIStatus` option is true.
                     * @enum {string}
                     */
                    uiStatus?: "Draft" | "Modified" | "Published" | "Orphan";
                    /**
                     * Format: uuid
                     * @description The project ID that this layout data is part of
                     */
                    projectId: string;
                    /**
                     * Format: date-time,
                     * @description Created date string for this definition
                     */
                    created: string;
                    /**
                     * Format: date-time,
                     * @description Modified date string for this definition
                     */
                    modified: string;
                    /** @description Whether this composition is a pattern (can be referenced by other compositions, not treated as a composition) */
                    pattern: boolean;
                    composition: external$3["../../../lambda/functions/uniform-canvas-types.swagger.yml"]["components"]["schemas"]["RootComponentInstance"];
                };
                CompositionListResponse: {
                    compositions: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["schemas"]["CompositionApiResponse"][];
                    /** @description Total number of compositions that match the query. Only present when `withTotalCount` option is true. */
                    totalCount?: number;
                };
            };
            parameters: {
                /** @description The project the composition(s) are on. */
                projectId: string;
                /** @description Specify a single composition ID to fetch. Changes response from list to single. */
                compositionId: string;
                /** @description Specify multiple composition IDs to fetch. Response type will be a list. */
                compositionIDs: string[];
                /** @description Specify a single composition to fetch by slug. Changes response from list to single. */
                slug: string;
                /** @description Specify a single composition to fetch by assodicated project map node ID.  Changes response from list to single. */
                projectMapNodeId: string;
                /** @description Specify a single composition to fetch by assodicated project map node path.  Changes response from list to single. */
                projectMapNodePath: string;
                /** @description Specify a project map ID to fetch by path or node ID from. If not specified, the default project map for the projectId is used. */
                projectMapId: string;
                /** @description The component type (by public ID) to filter by. Note that this filters the root composition type only; components in slots are not matched by this filter. */
                type: string[];
                /** @description Publishing state to fetch. 0 = draft, 64 = published. */
                state: number;
                /** @description Number of records to skip */
                offset: number;
                /** @description Max number of records to return */
                limit: number;
                /**
                 * @deprecated
                 * @description Signals an enhancer proxy to skip processing enhancements to the data and return raw data only.
                 * This improves performance if you do not require enhanced component data.
                 * If calling the Canvas API directly with no enhancer proxy, this has no effect.
                 */
                skipEnhance: boolean;
                /**
                 * @description If true, any pattern references in the composition will be left unresolved.
                 * This is appropriate if you intend to serialize the composition without patterns
                 * embedded into it, and serialize the pattern data separately.
                 */
                skipPatternResolution: boolean;
                /**
                 * @description If true, any pattern override data is not resolved by the API.
                 * This is intended for internal use in the Canvas editor, and should not be used.
                 * Passing this parameter automatically implies withComponentIDs to be true.
                 */
                skipOverridesResolution: boolean;
                /**
                 * @deprecated
                 * @description This parameter is unused and has no effect. Passing this parameter will become an error in the future.
                 */
                skipParameterResolution: boolean;
                /**
                 * @description If true the `_id` unique identifier of each non-root component will be part of the response data.
                 * If false, the `_id` will not be present in the API response.
                 */
                withComponentIDs: boolean;
                /**
                 * @description Matches compositions where their name, slug, or definition name contains the specified keyword.
                 * NOT a full text search; does not match composition contents.
                 */
                keyword: string;
                /**
                 * @description Matches compositions based on whether they are a pattern composition or a regular composition.
                 * If true, only pattern compositions will be returned.
                 * If false, only regular compositions will be returned.
                 * If omitted, both pattern and regular compositions will be returned.
                 */
                pattern: boolean;
                /** @description Sets the sorting of the results. If unspecified, results are sorted by name ascending. */
                orderBy: ("updated_at_DESC" | "updated_at_ASC" | "created_at_DESC" | "created_at_ASC" | "name_DESC" | "name_ASC" | "slug_DESC" | "slug_ASC")[];
                /**
                 * @deprecated
                 * @description Returns the UI status string of the composition.
                 * This internal status is subject to change without notice, and is thus marked deprecated to discourage use of internal data.
                 */
                withUIStatus: boolean;
                /**
                 * @deprecated
                 * @description Filters composition lists by the UI status of the composition.
                 * This internal status is subject to change without notice, and is thus marked deprecated to discourage use of internal data.
                 */
                uiStatus: ("Draft" | "Modified" | "Published" | "Orphan")[];
                /**
                 * @description Filters out compositions without attached node or filters out compositions with attached nodes
                 * in case of FALSE. If not specified - no filtration applied.
                 */
                attachedToProjectMap: boolean;
                /** @description Includes project map node information in the composition results */
                withProjectMapNodes: boolean;
                /**
                 * @deprecated
                 * @description Includes content source map metadata on supported parameters
                 */
                withContentSourceMap: boolean;
                /** @description Filters composition lists by the user who created them. The user is specified by their identity subject. */
                createdBy: string;
                /** @description Filters composition lists by the user who last updated them. The user is specified by their identity subject. */
                updatedBy: string;
                /**
                 * @description Controls whether the total count of results will be returned along with the current results page in a list.
                 * Has no effect when not fetching a list. This does impact performance when enabled.
                 */
                withTotalCount: boolean;
            };
        };
        operations: {};
    };
    "../../../lambda/functions/v1-redirect.swagger.yml": {
        paths: {
            "/api/v1/redirect": {
                /** Called to retrieve a list of redirects related to a project */
                get: {
                    parameters: {
                        query: {
                            /** The project to fetch redirects for */
                            projectId: string;
                            /** Id of the redirect to retrieve */
                            id?: string;
                            /** Ids of the redirects to retrieve */
                            ids?: string[];
                            /** Source url to attempt to find redirects for */
                            sourceUrl?: string;
                            /** Id of the project map the source or target belongs to. */
                            projectMapId?: string;
                            /** Id of the project map node to find redirects for. */
                            sourceProjectMapNodeId?: string;
                            /** Id of the project map node to find redirects for. */
                            targetProjectMapNodeId?: string;
                            /** Column to order results by, only applicable if trie is not active. */
                            orderBy?: "updated_at asc" | "updated_at desc" | "source_url asc" | "source_url desc" | "target_url asc" | "target_url desc" | "created_by asc" | "created_by desc";
                            /** Limit the results to this number of results, ignored if using trie parameter. */
                            limit?: number;
                            /** Offset the results a certain amount, useful for pagination. */
                            offset?: number;
                            /** Search text to filter redirects by, filtering on the source and target urls */
                            search?: string;
                        };
                    };
                    responses: {
                        /** OK */
                        200: {
                            content: {
                                "application/json": {
                                    redirects: external$3["../../../lambda/functions/v1-redirect.swagger.yml"]["components"]["schemas"]["RedirectGetResponse"];
                                    total?: number;
                                    resultUrl?: string;
                                };
                            };
                        };
                        400: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["BadRequestError"];
                        401: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                        403: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["ForbiddenError"];
                        429: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["RateLimitError"];
                        500: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["InternalServerError"];
                    };
                };
                put: {
                    responses: {
                        /** OK */
                        200: {
                            content: {
                                "application/json": {
                                    /**
                                     * Format: uuid
                                     * @description Id of the redirect
                                     */
                                    id: string;
                                };
                            };
                        };
                        /** OK */
                        204: never;
                        400: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["BadRequestError"];
                        401: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                        403: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["ForbiddenError"];
                        429: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["RateLimitError"];
                        500: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["InternalServerError"];
                    };
                    requestBody: {
                        content: {
                            "application/json": {
                                /** @description Redirect object to insert */
                                redirect: external$3["../../../lambda/functions/v1-redirect.swagger.yml"]["components"]["schemas"]["Redirect"];
                                /**
                                 * Format: uuid
                                 * @description Project id to insert the redirect into
                                 */
                                projectId: string;
                            };
                        };
                    };
                };
                /** Called to delete a redirect */
                delete: {
                    responses: {
                        /** OK */
                        200: {
                            content: {
                                "application/json": {
                                    /**
                                     * Format: uuid
                                     * @description Id of the redirect
                                     */
                                    id: string;
                                };
                            };
                        };
                        /** OK */
                        204: never;
                        400: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["BadRequestError"];
                        401: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                        403: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["ForbiddenError"];
                        429: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["RateLimitError"];
                        500: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["InternalServerError"];
                    };
                    requestBody: {
                        content: {
                            "application/json": {
                                /**
                                 * Format: uuid
                                 * @description Redirect id to be deleted.
                                 */
                                id: string;
                                /**
                                 * Format: uuid
                                 * @description Project the redirect belongs to.
                                 */
                                projectId: string;
                            };
                        };
                    };
                };
                /** Handles preflight requests. This endpoint allows CORS. */
                options: {
                    responses: {
                        /** OK */
                        204: never;
                    };
                };
            };
        };
        components: {
            schemas: {
                RedirectGetResponse: {
                    redirect: external$3["../../../lambda/functions/v1-redirect.swagger.yml"]["components"]["schemas"]["Redirect"];
                    metadata: external$3["../../../lambda/functions/v1-redirect.swagger.yml"]["components"]["schemas"]["RedirectMetadata"];
                }[];
                RedirectMetadata: {
                    /** @description The last time the redirect was modified in UTC */
                    updatedAt?: string;
                    /** @description The last user who modified this redirect */
                    updatedBy?: string;
                    /** @description The time the redirect was created in UTC */
                    createdAt?: string;
                    /** @description The user who created this redirect or system */
                    createdBy?: string;
                };
                Redirect: {
                    /**
                     * Format: uuid
                     * @description Id of the redirect.
                     */
                    id?: string;
                    /** @description Source meant to match a url that needs to be redirected. */
                    sourceUrl: string;
                    /** @description Target meant to be redirected to. */
                    targetUrl: string;
                    /** @description Redirect type to occur from this redirect. */
                    targetStatusCode: number;
                    /**
                     * Format: uuid
                     * @description Project map node related to the source this redirect.
                     */
                    sourceProjectMapNodeId?: string;
                    /**
                     * Format: uuid
                     * @description Project map node related to the target this redirect.
                     */
                    targetProjectMapNodeId?: string;
                    /**
                     * Format: uuid
                     * @description Project map related to this redirect.
                     */
                    projectMapId?: string;
                    /** @description Signals the redirect engine to retain query string parameters to the target url. */
                    sourceRetainQuerystring?: boolean;
                    /** @description Incoming requests must match the domain that's defined in the redirection source. */
                    sourceMustMatchDomain?: boolean;
                    /** @description Rewritten url should match the protocol (http / https) of the incoming request instead of whatever is defined in the redirection target. */
                    targetPreserveIncomingProtocol?: boolean;
                    /** @description Rewritten url should match the domain of the incoming request regardless of what is defined in the redirection target. */
                    targetPreserveIncomingDomain?: boolean;
                    /** @description Stop running rules after this redirect rule gets executed. */
                    stopExecutingAfter?: boolean;
                    /** @description Merge incoming querystring with the querystring defined on the redirection target, taking the incoming querystring parameter where a merge is not possible. */
                    targetMergeQuerystring?: boolean;
                    /** @description Label as system generated or user generated. */
                    labelAsSystem?: boolean;
                };
            };
        };
        operations: {};
    };
    "../../../lambda/functions/v1-route.swagger.yml": {
        paths: {
            "/api/v1/route": {
                /** Fetches the correct response action for a given route (redirection, composition, not found) */
                get: {
                    parameters: {
                        query: {
                            /** The project to fetch a route from */
                            projectId: external$3["../../../lambda/functions/v1-route.swagger.yml"]["components"]["parameters"]["projectId"];
                            /**
                             * The path to resolve. Dynamic project map nodes and redirects can be resolved when a matching path is passed.
                             * Query string parameters may be passed with the path. They are ignored for route matching.
                             * If the route matches a composition and the project map node allows passed query string parameters, query parameters will
                             * be returned as as dynamic inputs to the composition.
                             *
                             * Examples:
                             * * route "/company/about-us" would match "/company/about-us" in project map or redirects
                             * * route "/products/123" would match "/products/:productId" in project map or "/products/*" in redirects
                             * * route "/products/123?color=red" would match "/products/:productId" in project map, and provde productId=123 and color=red as dynamic inputs to the composition
                             *
                             * Conflict resolution:
                             * If a route matches multiple possible project map or redirect nodes, the resulting action will use the following logic:
                             * * If a redirect matches, it wins over project map nodes in all cases
                             * * If multiple redirects or project map nodes match the route, the one with the most specific path wins:
                             *     * The route with the most path segments wins
                             *     * If several matches have the same number of segments, the one with the fewest dynamic segments wins
                             *     * If still ambiguous, the first matching route arbitrarily wins
                             */
                            path: external$3["../../../lambda/functions/v1-route.swagger.yml"]["components"]["parameters"]["path"];
                            /** Specify a project map ID to fetch route from. If not specified, the default project map for the projectId is used. */
                            projectMapId?: external$3["../../../lambda/functions/v1-route.swagger.yml"]["components"]["parameters"]["projectMapId"];
                            /** Publishing state to fetch. 0 = draft, 64 = published. */
                            state?: external$3["../../../lambda/functions/v1-route.swagger.yml"]["components"]["parameters"]["state"];
                            /**
                             * If true the `_id` unique identifier of each non-root component will be part of the response data.
                             * If false, the `_id` will not be present in the API response.
                             */
                            withComponentIDs?: external$3["../../../lambda/functions/v1-route.swagger.yml"]["components"]["parameters"]["withComponentIDs"];
                        };
                    };
                    responses: {
                        /** OK */
                        200: {
                            content: {
                                "application/json": external$3["../../../lambda/functions/v1-route.swagger.yml"]["components"]["schemas"]["RouteResponse"];
                            };
                        };
                        400: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["BadRequestError"];
                        401: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                        403: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["ForbiddenError"];
                        429: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["RateLimitError"];
                        500: external$3["../../../lambda/functions/swagger.yml"]["components"]["responses"]["InternalServerError"];
                    };
                };
                /** Handles preflight requests. This endpoint allows CORS. */
                options: {
                    responses: {
                        /** OK */
                        204: never;
                    };
                };
            };
        };
        components: {
            schemas: {
                RouteResponse: external$3["../../../lambda/functions/v1-route.swagger.yml"]["components"]["schemas"]["RouteResponseRedirect"] | external$3["../../../lambda/functions/v1-route.swagger.yml"]["components"]["schemas"]["RouteResponseComposition"] | external$3["../../../lambda/functions/v1-route.swagger.yml"]["components"]["schemas"]["RouteResponseNotFound"];
                /** @description The route matches a redirection configured in Uniform. */
                RouteResponseRedirect: {
                    /** @description The route that was matched in the redirects. */
                    matchedRoute: string;
                    dynamicInputs?: external$3["../../../lambda/functions/v1-route.swagger.yml"]["components"]["schemas"]["RouteDynamicInputs"];
                    /** @enum {string} */
                    type: "redirect";
                    redirect: external$3["../../../lambda/functions/v1-redirect.swagger.yml"]["components"]["schemas"]["Redirect"];
                };
                /**
                 * @description The route matches a composition.
                 * If any dynamic segments or query parameters are present in the route, they will be returned as dynamic inputs in the response.
                 */
                RouteResponseComposition: {
                    /** @description The route that was matched in the project map. */
                    matchedRoute: string;
                    dynamicInputs?: external$3["../../../lambda/functions/v1-route.swagger.yml"]["components"]["schemas"]["RouteDynamicInputs"];
                    /** @enum {string} */
                    type: "composition";
                    compositionApiResponse: external$3["../../../lambda/functions/v1-canvas.swagger.yml"]["components"]["schemas"]["CompositionApiResponse"];
                };
                /**
                 * @description The route does not match any configured redirections or compositions.
                 * NOTE: this response differs from a HTTP 404, which indicates that the project map or project ID was not found.
                 * Receiving this response with HTTP 200 means that the project was found, but the route did not match anything.
                 */
                RouteResponseNotFound: {
                    /** @enum {string} */
                    type: "notFound";
                };
                RouteDynamicInputs: {
                    [key: string]: string;
                };
            };
            parameters: {
                /** @description The project to fetch a route from */
                projectId: string;
                /**
                 * @description The path to resolve. Dynamic project map nodes and redirects can be resolved when a matching path is passed.
                 * Query string parameters may be passed with the path. They are ignored for route matching.
                 * If the route matches a composition and the project map node allows passed query string parameters, query parameters will
                 * be returned as as dynamic inputs to the composition.
                 *
                 * Examples:
                 * * route "/company/about-us" would match "/company/about-us" in project map or redirects
                 * * route "/products/123" would match "/products/:productId" in project map or "/products/*" in redirects
                 * * route "/products/123?color=red" would match "/products/:productId" in project map, and provde productId=123 and color=red as dynamic inputs to the composition
                 *
                 * Conflict resolution:
                 * If a route matches multiple possible project map or redirect nodes, the resulting action will use the following logic:
                 * * If a redirect matches, it wins over project map nodes in all cases
                 * * If multiple redirects or project map nodes match the route, the one with the most specific path wins:
                 *     * The route with the most path segments wins
                 *     * If several matches have the same number of segments, the one with the fewest dynamic segments wins
                 *     * If still ambiguous, the first matching route arbitrarily wins
                 */
                path: string;
                /** @description Specify a project map ID to fetch route from. If not specified, the default project map for the projectId is used. */
                projectMapId: string;
                /** @description Publishing state to fetch. 0 = draft, 64 = published. */
                state: number;
                /**
                 * @description If true the `_id` unique identifier of each non-root component will be part of the response data.
                 * If false, the `_id` will not be present in the API response.
                 */
                withComponentIDs: boolean;
            };
        };
        operations: {};
    };
}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths$2 {
    "/api/v1/route": {
        /** Fetches the correct response action for a given route (redirection, composition, not found) */
        get: {
            parameters: {
                query: {
                    /** The project to fetch a route from */
                    projectId: components["parameters"]["projectId"];
                    /**
                     * The path to resolve. Dynamic project map nodes and redirects can be resolved when a matching path is passed.
                     * Query string parameters may be passed with the path. They are ignored for route matching.
                     * If the route matches a composition and the project map node allows passed query string parameters, query parameters will
                     * be returned as as dynamic inputs to the composition.
                     *
                     * Examples:
                     * * route "/company/about-us" would match "/company/about-us" in project map or redirects
                     * * route "/products/123" would match "/products/:productId" in project map or "/products/*" in redirects
                     * * route "/products/123?color=red" would match "/products/:productId" in project map, and provde productId=123 and color=red as dynamic inputs to the composition
                     *
                     * Conflict resolution:
                     * If a route matches multiple possible project map or redirect nodes, the resulting action will use the following logic:
                     * * If a redirect matches, it wins over project map nodes in all cases
                     * * If multiple redirects or project map nodes match the route, the one with the most specific path wins:
                     *     * The route with the most path segments wins
                     *     * If several matches have the same number of segments, the one with the fewest dynamic segments wins
                     *     * If still ambiguous, the first matching route arbitrarily wins
                     */
                    path: components["parameters"]["path"];
                    /** Specify a project map ID to fetch route from. If not specified, the default project map for the projectId is used. */
                    projectMapId?: components["parameters"]["projectMapId"];
                    /** Publishing state to fetch. 0 = draft, 64 = published. */
                    state?: components["parameters"]["state"];
                    /**
                     * If true the `_id` unique identifier of each non-root component will be part of the response data.
                     * If false, the `_id` will not be present in the API response.
                     */
                    withComponentIDs?: components["parameters"]["withComponentIDs"];
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": components["schemas"]["RouteResponse"];
                    };
                };
                400: external$2["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$2["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$2["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$2["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$2["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
        };
        /** Handles preflight requests. This endpoint allows CORS. */
        options: {
            responses: {
                /** OK */
                204: never;
            };
        };
    };
}
interface components {
    schemas: {
        RouteResponse: components["schemas"]["RouteResponseRedirect"] | components["schemas"]["RouteResponseComposition"] | components["schemas"]["RouteResponseNotFound"];
        /** @description The route matches a redirection configured in Uniform. */
        RouteResponseRedirect: {
            /** @description The route that was matched in the redirects. */
            matchedRoute: string;
            dynamicInputs?: components["schemas"]["RouteDynamicInputs"];
            /** @enum {string} */
            type: "redirect";
            redirect: external$2["v1-redirect.swagger.yml"]["components"]["schemas"]["Redirect"];
        };
        /**
         * @description The route matches a composition.
         * If any dynamic segments or query parameters are present in the route, they will be returned as dynamic inputs in the response.
         */
        RouteResponseComposition: {
            /** @description The route that was matched in the project map. */
            matchedRoute: string;
            dynamicInputs?: components["schemas"]["RouteDynamicInputs"];
            /** @enum {string} */
            type: "composition";
            compositionApiResponse: external$2["v1-canvas.swagger.yml"]["components"]["schemas"]["CompositionApiResponse"];
        };
        /**
         * @description The route does not match any configured redirections or compositions.
         * NOTE: this response differs from a HTTP 404, which indicates that the project map or project ID was not found.
         * Receiving this response with HTTP 200 means that the project was found, but the route did not match anything.
         */
        RouteResponseNotFound: {
            /** @enum {string} */
            type: "notFound";
        };
        RouteDynamicInputs: {
            [key: string]: string;
        };
    };
    parameters: {
        /** @description The project to fetch a route from */
        projectId: string;
        /**
         * @description The path to resolve. Dynamic project map nodes and redirects can be resolved when a matching path is passed.
         * Query string parameters may be passed with the path. They are ignored for route matching.
         * If the route matches a composition and the project map node allows passed query string parameters, query parameters will
         * be returned as as dynamic inputs to the composition.
         *
         * Examples:
         * * route "/company/about-us" would match "/company/about-us" in project map or redirects
         * * route "/products/123" would match "/products/:productId" in project map or "/products/*" in redirects
         * * route "/products/123?color=red" would match "/products/:productId" in project map, and provde productId=123 and color=red as dynamic inputs to the composition
         *
         * Conflict resolution:
         * If a route matches multiple possible project map or redirect nodes, the resulting action will use the following logic:
         * * If a redirect matches, it wins over project map nodes in all cases
         * * If multiple redirects or project map nodes match the route, the one with the most specific path wins:
         *     * The route with the most path segments wins
         *     * If several matches have the same number of segments, the one with the fewest dynamic segments wins
         *     * If still ambiguous, the first matching route arbitrarily wins
         */
        path: string;
        /** @description Specify a project map ID to fetch route from. If not specified, the default project map for the projectId is used. */
        projectMapId: string;
        /** @description Publishing state to fetch. 0 = draft, 64 = published. */
        state: number;
        /**
         * @description If true the `_id` unique identifier of each non-root component will be part of the response data.
         * If false, the `_id` will not be present in the API response.
         */
        withComponentIDs: boolean;
    };
}
interface external$2 {
    "swagger.yml": {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** @description Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        "application/json": external$2["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        "application/json": external$2["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        "application/json": external$2["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Resource not found */
                NotFoundError: {
                    content: {
                        "application/json": external$2["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
    "uniform-canvas-types.swagger.yml": {
        paths: {};
        components: {
            schemas: {
                /** @description Public ID (used in code). Do not change after creation. */
                PublicIdProperty: string;
                /** @description The definition of a component parameter */
                ComponentDefinitionParameter: {
                    id: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the parameter */
                    name: string;
                    /** @description Appears next to the parameter in the Composition editor */
                    helpText?: string;
                    /** @description Type name of the parameter (provided by a Uniform integration) */
                    type: string;
                    /** @description The configuration object for the type (type-specific) */
                    typeConfig?: unknown;
                };
                /** @description The definition of a named component slot that can contain other components */
                ComponentDefinitionSlot: {
                    id: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the slot */
                    name: string;
                    /** @description A list of component definition public IDs that are allowed in this named slot */
                    allowedComponents: string[];
                    /**
                     * @description Whether this slot inherits its allowed components from the parent slot it lives in. If true, allowedComponents is irrelevant.
                     * If allowAllComponents is true, this value is ignored.
                     *
                     * @default false
                     */
                    inheritAllowedComponents: boolean;
                    /**
                     * @description When false or not defined, only components in allowedComponents may be added to this slot - and if allowedComponents is empty, nothing can be added.
                     * When true, every component and pattern that is defined may be added to this slot regardless of any other setting including inheritAllowedComponents.
                     */
                    allowAllComponents?: boolean;
                    /**
                     * @description When not defined, or false: all patterns for components listed in allowedComponents are automatically allowed in the slot.
                     * When true: patterns for components listed in allowedComponents are not allowed in the slot unless explicitly added to allowedComponents as `$p:<patternid>`
                     */
                    patternsInAllowedComponents?: boolean;
                    /** @description Minimum valid number of components in this slot */
                    minComponents?: number;
                    /** @description Maximum valid number of components in this slot */
                    maxComponents?: number;
                };
                /** @description The definition of a composition's slug settings */
                ComponentDefinitionSlugSettings: {
                    /**
                     * @description Whether the slug is required
                     * no: slug is optional
                     * yes: slug is required
                     * disabled: slug is disabled and will not be shown in the editor
                     *
                     * @default no
                     * @enum {string}
                     */
                    required?: "no" | "yes" | "disabled";
                    /**
                     * @description Slug uniqueness configuration.
                     * no = no unique constraint
                     * local = must be unique within this component type
                     * global = must be unique across all component types
                     *
                     * @enum {string}
                     */
                    unique?: "no" | "local" | "global";
                    /** @description Regular expression slugs must match */
                    regularExpression?: string;
                    /**
                     * @description Custom error message when regular expression validation fails.
                     * Has no effect if `regularExpression` is not set.
                     */
                    regularExpressionMessage?: string;
                };
                /** @description The definition of a component variant */
                ComponentDefinitionVariant: {
                    id: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the variant */
                    name: string;
                };
                /** @description Permission set for a component defintion */
                ComponentDefinitionPermission: {
                    roleId: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /**
                     * @description Permission type for this permission ComponentDefinition:
                     * read | write | create | delete
                     *
                     * @enum {string}
                     */
                    permission: "read" | "write" | "create" | "delete";
                    /** @description State of the component that this permission applies to */
                    state: number;
                };
                /** @description Defines a component type that can live on a Composition */
                ComponentDefinition: {
                    id: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the component definition */
                    name: string;
                    /**
                     * @description Icon name or URL for the component definition (e.g. 'screen' or 'https://s3/my-component.jpg')
                     * @default screen
                     */
                    icon?: string;
                    /**
                     * @description The public ID of the parameter whose value should be used to create a display title for this component in the UI.
                     * The parameter type must support being used as a title parameter for this to work.
                     */
                    titleParameter?: string | null;
                    /**
                     * @description Whether this component type can be the root of a composition. If false, this component is only used within slots on other components.
                     * @default false
                     */
                    canBeComposition?: boolean;
                    /** @description The parameters for this component. Parameters are key-value pairs that can be anything from text values to links to CMS entries. */
                    parameters?: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionParameter"][];
                    /**
                     * @description if this component uses team permissions or custom permissions
                     * @default true
                     */
                    useTeamPermissions?: boolean;
                    /** @description Custom role permissions for this component definition */
                    permissions?: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionPermission"][];
                    /** @description The named slots for this component; placement areas where arrays of other components can be added. */
                    slots?: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionSlot"][];
                    slugSettings?: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionSlugSettings"];
                    /** @description Default component instance value */
                    defaults?: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"] | null;
                    /** @description Named variants for this component; enables creation of visual variants that use the same parameter data */
                    variants?: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionVariant"][];
                    /** @description Created date string for this definition (ignored for writes) */
                    created?: string;
                    /** @description Last modified date string for this definition (ignored for writes) */
                    updated?: string;
                };
                /** @description Defines a content type */
                ContentType: {
                    id: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["PublicIdProperty"];
                    /** @description Friendly name of the content type */
                    name: string;
                    /**
                     * @description The public ID of the field whose value should be used to create a display title for entries of this content type in the UI.
                     * The field type must support being used as a title field for this to work.
                     */
                    titleField?: string | null;
                    /** @description The fields for this content type. Fields are key-value pairs that can be text, numbers, JSON objects, etc. */
                    fields?: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentDefinitionParameter"][];
                    /** @description Created date string for this content type (ignored for writes) */
                    created?: string;
                    /** @description Last modified date string for this content type (ignored for writes) */
                    updated?: string;
                };
                /** @description Defines an editable parameter on a component. */
                ComponentParameter: {
                    /** @description The value of the parameter. Any JSON-serializable value is acceptable. */
                    value: unknown;
                    /** @description The type of the parameter. Determines how it is displayed when editing, and tells the consumer how to process it. */
                    type: string;
                    connectedData?: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataElementConnectionDefinition"];
                };
                /**
                 * @description Defines a connection to a data element on a data resource.
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the edgehanced/data-bound state of a composition may be made without notice.
                 */
                DataElementConnectionDefinition: {
                    /** @description A JSON Pointer expression that defines the data element to connect the parameter to. */
                    pointer: string;
                    /**
                     * @description The syntax used to select the data element to bind to
                     * @enum {string}
                     */
                    syntax: "jptr";
                };
                /** @description Defines the shape of a component instance served by the composition API. */
                ComponentInstance: {
                    /** @description Type of the component instance (public_id of its definition) */
                    type: string;
                    /** @description Component parameter values for the component instance */
                    parameters?: {
                        [key: string]: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    /** @description Public ID of alternate visual appearance for this component, if any selected */
                    variant?: string;
                    /** @description Slots containing any child components */
                    slots?: {
                        [key: string]: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"][];
                    };
                    /**
                     * @description Unique identifier of the component within the composition.
                     * No assumptions should be made about the format of this value other than "it will be unique."
                     * This is not set unless specifically requested via `withComponentIDs` API parameter.
                     */
                    _id?: string;
                    /** @description Indicates this component instance should be sourced from a pattern library pattern. */
                    _pattern?: string;
                    _dataResources?: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinitions"];
                    /**
                     * @description Data definitions coming from a pattern resolved for this component. Merged with _dataResources during resolution.
                     * Means nothing for PUTs; it will be ignored.
                     */
                    _patternDataResources?: {
                        [key: string]: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinition"];
                    };
                    /**
                     * @description Describes why the pattern could not be resolved, if a pattern could not be resolved. For PUTs, this is allowed but ignored.
                     * CYCLIC: A cyclic pattern graph was detected, which could not be resolved because it would cause an infinite loop.
                     * NOTFOUND: The pattern ID referenced could not be found. It may have been deleted, or not be published yet.
                     * Means nothing for PUTs; it will be ignored.
                     *
                     * @enum {string}
                     */
                    _patternError?: "NOTFOUND" | "CYCLIC";
                    /**
                     * @description Defines patch overrides to component IDs that live in the composition.
                     * This can be used to override parameters that are defined on patterns,
                     * including nested patterns, with values that are specific to this composition.
                     * The keys in this object are component IDs.
                     * Overrides are applied from the top down, so for example if both the composition
                     * and a pattern on the composition define an override on a nested pattern,
                     * the composition's override replaces the pattern's.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overrides?: {
                        [key: string]: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverride"];
                    };
                    /**
                     * @description When used on a pattern, defines how the pattern's parameters may be overridden
                     * by consumers of the pattern.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overridability?: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverridability"];
                };
                /** @description Defines the shape of the root component in a composition */
                RootComponentInstance: {
                    /** @description Type of the component instance (public_id of its definition) */
                    type: string;
                    /** @description Component parameter values for the component instance */
                    parameters?: {
                        [key: string]: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    /** @description Public ID of alternate visual appearance for this component, if any selected */
                    variant?: string;
                    /** @description Project map nodes associated with this component.  Must pass withProjectMapNodes parameter to be populated. */
                    projectMapNodes?: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["CompositionProjectMapNodeInfo"][];
                    /** @description Slots containing any child components */
                    slots?: {
                        [key: string]: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentInstance"][];
                    };
                    /** @description The public UUID of the composition. */
                    _id: string;
                    /** @description Slug pattern of this component. */
                    _slug?: string | null;
                    /** @description Friendly name of this component. */
                    _name: string;
                    _dataResources?: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinitions"];
                    /**
                     * @description Defines patch overrides to component IDs that live in the composition.
                     * This can be used to override parameters that are defined on patterns,
                     * including nested patterns, with values that are specific to this composition.
                     * The keys in this object are component IDs.
                     * Overrides are applied from the top down, so for example if both the composition
                     * and a pattern on the composition define an override on a nested pattern,
                     * the composition's override replaces the pattern's.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overrides?: {
                        [key: string]: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverride"];
                    };
                    /**
                     * @description When used on a pattern, defines how the pattern's parameters may be overridden
                     * by consumers of the pattern.
                     *
                     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                     */
                    _overridability?: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentOverridability"];
                };
                /**
                 * @description Defines how to override a specific component.
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                 */
                ComponentOverride: {
                    parameters?: {
                        [key: string]: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["ComponentParameter"];
                    };
                    variant?: string;
                };
                /**
                 * @description Defines how a component on a pattern may have its values overridden.
                 * NOTE: Data resources' overridability is defined in the data resource definition, not here.
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                 */
                ComponentOverridability: {
                    /** @description Defines component parameter value overrides. Keys are the parameter public ID. */
                    parameters?: {
                        [key: string]: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["OverrideOptions"];
                    };
                    /** @description Allows overriding a display variant is allowed, if it is defined on the component the pattern is derived from. Default = false. */
                    variants?: boolean;
                };
                /**
                 * @description Whether a parameter is overridable
                 *
                 * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
                 * Future updates that do not break the overrides-applied state of a composition may be made without notice.
                 *
                 * @enum {string}
                 */
                OverrideOptions: "yes" | "no";
                /**
                 * @description An instance of a data source (i.e. "Master environment of the stable space", "Yelp API", "Sanity dev dataset").
                 * These are created in the UI and shared across a whole project.
                 * NOTE: if you acquire a list of data sources or do not have manage permissions, you will receive "SECRET"
                 * for all header, parameter, and variable values to obscure the actual encrypted secret value.
                 */
                DataSource: {
                    /** @description Public ID of the data source */
                    id: string;
                    /** @description Display name of the data source */
                    displayName: string;
                    /** @description The type of data connector this connects to (e.g. 'cms-items', provided by an intalled integration) */
                    connectorType: string;
                    /** @description Base resource URL of the data source. No trailing slash. */
                    baseUrl: string;
                    /** @description HTTP headers to pass with requests to the data source */
                    headers?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
                    parameters?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Variables needed to make calls to the data source */
                    variables?: {
                        [key: string]: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataVariableDefinition"];
                    };
                    /** @description Custom configuration specific to the data source being defined (used to maintain UI state for custom integrations) */
                    custom?: {
                        [key: string]: unknown;
                    };
                };
                /** @description A specific type of data that a Data Source can provide (i.e. "Recipe", "Recipes List by Tag", "Yelp Reviews of My Restaurant"). These are created in the UI and shared a whole project. */
                DataType: {
                    /** @description Public ID of the data type */
                    id: string;
                    /** @description Display name of the data type */
                    displayName: string;
                    /** @description Public ID of the associated data source */
                    dataSourceId: string;
                    /**
                     * @description A connector-specific archetype for this data type; used to select UI as well as perform any
                     * necessary post-processing on the response. e.g. 'cms-entry', 'cms-query'. Can be undefined if
                     * no special UI or processing is required.
                     */
                    archetype?: string;
                    allowedOnComponents?: string[];
                    /** @description Resource path, appended to the data source's baseUrl (e.g. baseUrl = https://base.url, path = /v1/endpoint -> final URL https://base.url/v1/endpoint). Must have leading slash. */
                    path: string;
                    /** @description Time-to-live (in seconds) for the primary resource data cache. */
                    ttl?: number;
                    /** @description Long term data resource cache configuration. */
                    longTermCache?: {
                        /** @description A flag to turn the long term cache on. */
                        enabled: boolean;
                        /** @description Time-to-live (in hours) for the long term resource data cache. */
                        ttlInHours?: number;
                    };
                    /** @description A key for the resource data cache purging. */
                    purgeKey?: string;
                    /** @description URL to a custom badge icon for the Uniform dashboard for this data type. If not set falls back to the data connector or integration icons. */
                    badgeIconUrl?: string;
                    /** @description HTTP headers to pass with requests to the data type. Merged with headers from the data source, overriding identical keys. */
                    headers?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
                    parameters?: {
                        key: string;
                        value: string;
                    }[];
                    /** @description Body to pass with requests to the data type (ignored unless method is POST) */
                    body?: string;
                    /**
                     * @description HTTP method to use with requests to the data type.
                     * @default GET
                     * @enum {string}
                     */
                    method: "GET" | "POST" | "HEAD";
                    /** @description Variables needed to make calls to the data type. Merged with variables from the data source, overriding identical keys. */
                    variables?: {
                        [key: string]: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataVariableDefinition"];
                    };
                    /** @description Custom configuration specific to the data source being defined */
                    custom?: {
                        [key: string]: unknown;
                    };
                };
                /** @description Defines the shape of a data variable on a Data Source or Data Type */
                DataVariableDefinition: {
                    /** @description Display name of the data variable */
                    displayName?: string;
                    /** @description Explanatory text that is provided to the data resource editor to explain what this variable does. */
                    helpText?: string;
                    /**
                     * @description Type of the data variable. Optionally used as a point of reference for custom integrations to decide how to render an editor for a variable.
                     * @default text
                     */
                    type?: string;
                    /** @description Default value of the data variable */
                    default: string;
                    /** @description Sets the order of the variable when displayed in a list with other variables. If not set, the order defaults to alphabetical with any explicitly set orders first in the list. */
                    order?: number;
                };
                /**
                 * @description Data definitions attached to this component. The property name is the key of the data in the data document.
                 * Note: data definitions are inherited from ancestors at runtime (and may be overridden by descendants that use the same key).
                 */
                DataResourceDefinitions: {
                    [key: string]: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceDefinition"];
                };
                /** @description Defines a data resource, which is a named JSON document, usually from an API response, which may be projected onto parameters */
                DataResourceDefinition: {
                    /** @description Public ID of the data type that provides this data */
                    type: string;
                    /** @description Whether this data is a pattern data resource that can be overridden when a pattern is referenced on another composition. If this is not a pattern composition, this has no meaning and should not be used. If unspecified, the default is false. */
                    isPatternParameter?: boolean;
                    /**
                     * @description When true, the default data resource of a pattern data parameter (isPatternParameter=true) will be ignored when the pattern is referenced.
                     * Unless specifically overridden, the pattern data parameter will be provided with a null default value - leaving any data connections to it unresolvable.
                     * If isPatternParameter is false or undefined, this has no meaning.
                     */
                    ignorePatternParameterDefault?: boolean;
                    variables?: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["DataResourceVariables"];
                };
                /** @description Variable values for a data resource. */
                DataResourceVariables: {
                    [key: string]: string;
                };
                /** @description Project map node information related to a component. */
                CompositionProjectMapNodeInfo: {
                    /**
                     * Format: uuid
                     * @description Unique identifier for the project map node
                     */
                    id: string;
                    /** @description Path of the project map node */
                    path: string;
                    /**
                     * Format: uuid
                     * @description Unique identifier for the project map that this node belongs to.
                     */
                    projectMapId: string;
                };
            };
        };
        operations: {};
    };
    "v1-canvas.swagger.yml": {
        paths: {
            "/api/v1/canvas": {
                get: {
                    parameters: {
                        query: {
                            /** Specify a single composition ID to fetch. Changes response from list to single. */
                            compositionId?: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["compositionId"];
                            /** Specify multiple composition IDs to fetch. Response type will be a list. */
                            compositionIDs?: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["compositionIDs"];
                            /** Filters composition lists by the user who created them. The user is specified by their identity subject. */
                            createdBy?: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["createdBy"];
                            /**
                             * Matches compositions where their name, slug, or definition name contains the specified keyword.
                             * NOT a full text search; does not match composition contents.
                             */
                            keyword?: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["keyword"];
                            /** Max number of records to return */
                            limit?: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["limit"];
                            /** Number of records to skip */
                            offset?: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["offset"];
                            /** Sets the sorting of the results. If unspecified, results are sorted by name ascending. */
                            orderBy?: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["orderBy"];
                            /**
                             * Matches compositions based on whether they are a pattern composition or a regular composition.
                             * If true, only pattern compositions will be returned.
                             * If false, only regular compositions will be returned.
                             * If omitted, both pattern and regular compositions will be returned.
                             */
                            pattern?: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["pattern"];
                            /** The project the composition(s) are on. */
                            projectId: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["projectId"];
                            /** Specify a project map ID to fetch by path or node ID from. If not specified, the default project map for the projectId is used. */
                            projectMapId?: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["projectMapId"];
                            /** Specify a single composition to fetch by assodicated project map node ID.  Changes response from list to single. */
                            projectMapNodeId?: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["projectMapNodeId"];
                            /** Specify a single composition to fetch by assodicated project map node path.  Changes response from list to single. */
                            projectMapNodePath?: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["projectMapNodePath"];
                            /**
                             * @deprecated Signals an enhancer proxy to skip processing enhancements to the data and return raw data only.
                             * This improves performance if you do not require enhanced component data.
                             * If calling the Canvas API directly with no enhancer proxy, this has no effect.
                             */
                            skipEnhance?: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["skipEnhance"];
                            /**
                             * If true, any pattern references in the composition will be left unresolved.
                             * This is appropriate if you intend to serialize the composition without patterns
                             * embedded into it, and serialize the pattern data separately.
                             */
                            skipPatternResolution?: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["skipPatternResolution"];
                            /** @deprecated This parameter is unused and has no effect. Passing this parameter will become an error in the future. */
                            skipParameterResolution?: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["skipParameterResolution"];
                            /**
                             * If true, any pattern override data is not resolved by the API.
                             * This is intended for internal use in the Canvas editor, and should not be used.
                             * Passing this parameter automatically implies withComponentIDs to be true.
                             */
                            skipOverridesResolution?: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["skipOverridesResolution"];
                            /** Specify a single composition to fetch by slug. Changes response from list to single. */
                            slug?: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["slug"];
                            /** Publishing state to fetch. 0 = draft, 64 = published. */
                            state?: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["state"];
                            /** The component type (by public ID) to filter by. Note that this filters the root composition type only; components in slots are not matched by this filter. */
                            type?: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["type"];
                            /**
                             * @deprecated Filters composition lists by the UI status of the composition.
                             * This internal status is subject to change without notice, and is thus marked deprecated to discourage use of internal data.
                             */
                            uiStatus?: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["uiStatus"];
                            /**
                             * Filters out compositions without attached node or filters out compositions with attached nodes
                             * in case of FALSE. If not specified - no filtration applied.
                             */
                            attachedToProjectMap?: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["attachedToProjectMap"];
                            /** Filters composition lists by the user who last updated them. The user is specified by their identity subject. */
                            updatedBy?: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["updatedBy"];
                            /**
                             * If true the `_id` unique identifier of each non-root component will be part of the response data.
                             * If false, the `_id` will not be present in the API response.
                             */
                            withComponentIDs?: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["withComponentIDs"];
                            /**
                             * Controls whether the total count of results will be returned along with the current results page in a list.
                             * Has no effect when not fetching a list. This does impact performance when enabled.
                             */
                            withTotalCount?: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["withTotalCount"];
                            /**
                             * @deprecated Returns the UI status string of the composition.
                             * This internal status is subject to change without notice, and is thus marked deprecated to discourage use of internal data.
                             */
                            withUIStatus?: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["withUIStatus"];
                            /** Includes project map node information in the composition results */
                            withProjectMapNodes?: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["withProjectMapNodes"];
                            /** @deprecated Includes content source map metadata on supported parameters */
                            withContentSourceMap?: external$2["v1-canvas.swagger.yml"]["components"]["parameters"]["withContentSourceMap"];
                        };
                    };
                    responses: {
                        /** OK */
                        200: {
                            content: {
                                "application/json": external$2["v1-canvas.swagger.yml"]["components"]["schemas"]["CompositionListResponse"] | external$2["v1-canvas.swagger.yml"]["components"]["schemas"]["CompositionApiResponse"];
                            };
                        };
                        400: external$2["swagger.yml"]["components"]["responses"]["BadRequestError"];
                        401: external$2["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                        403: external$2["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                        /** Composition not found */
                        404: {
                            content: {
                                "text/plain": string;
                            };
                        };
                        429: external$2["swagger.yml"]["components"]["responses"]["RateLimitError"];
                        500: external$2["swagger.yml"]["components"]["responses"]["InternalServerError"];
                    };
                };
                /** Upserts a composition */
                put: {
                    responses: {
                        /** OK */
                        204: never;
                        400: external$2["swagger.yml"]["components"]["responses"]["BadRequestError"];
                        401: external$2["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                        403: external$2["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                        429: external$2["swagger.yml"]["components"]["responses"]["RateLimitError"];
                        500: external$2["swagger.yml"]["components"]["responses"]["InternalServerError"];
                    };
                    requestBody: {
                        content: {
                            "application/json": {
                                /**
                                 * Format: uuid
                                 * @description The project ID to upsert the composition to
                                 */
                                projectId: string;
                                /** @description The publishing state to upsert into. 0 = draft, 64 = published */
                                state: number;
                                composition: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["RootComponentInstance"];
                                /**
                                 * @description True if the composition is a pattern (which can be referenced on other compositions)
                                 * @default false
                                 */
                                pattern?: boolean;
                                /** @description Ignored if present */
                                created?: string;
                                /** @description Ignored if present */
                                modified?: string;
                            };
                        };
                    };
                };
                /** Deletes or unpublishes a composition */
                delete: {
                    responses: {
                        /** OK */
                        204: never;
                        400: external$2["swagger.yml"]["components"]["responses"]["BadRequestError"];
                        401: external$2["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                        403: external$2["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                        429: external$2["swagger.yml"]["components"]["responses"]["RateLimitError"];
                        500: external$2["swagger.yml"]["components"]["responses"]["InternalServerError"];
                    };
                    requestBody: {
                        content: {
                            "application/json": {
                                /**
                                 * Format: uuid
                                 * @description The ID of the composition to delete
                                 */
                                compositionId: string;
                                /**
                                 * Format: uuid
                                 * @description The ID of the project the composition to delete belongs to
                                 */
                                projectId: string;
                                /** @description The state to delete (0 = draft, 64 = published [causes unpublishing], unspecified = all) */
                                state?: number;
                            };
                        };
                    };
                };
                /** Handles preflight requests. This endpoint allows CORS. */
                options: {
                    responses: {
                        /** OK */
                        204: never;
                    };
                };
            };
        };
        components: {
            schemas: {
                CompositionApiResponse: {
                    /** @description Publishing state to fetch. 0 = draft, 64 = published. */
                    state: number;
                    /**
                     * @deprecated
                     * @description UI status value. Subject to change without notice; do not rely on this value. Only present when `withUIStatus` option is true.
                     * @enum {string}
                     */
                    uiStatus?: "Draft" | "Modified" | "Published" | "Orphan";
                    /**
                     * Format: uuid
                     * @description The project ID that this layout data is part of
                     */
                    projectId: string;
                    /**
                     * Format: date-time,
                     * @description Created date string for this definition
                     */
                    created: string;
                    /**
                     * Format: date-time,
                     * @description Modified date string for this definition
                     */
                    modified: string;
                    /** @description Whether this composition is a pattern (can be referenced by other compositions, not treated as a composition) */
                    pattern: boolean;
                    composition: external$2["uniform-canvas-types.swagger.yml"]["components"]["schemas"]["RootComponentInstance"];
                };
                CompositionListResponse: {
                    compositions: external$2["v1-canvas.swagger.yml"]["components"]["schemas"]["CompositionApiResponse"][];
                    /** @description Total number of compositions that match the query. Only present when `withTotalCount` option is true. */
                    totalCount?: number;
                };
            };
            parameters: {
                /** @description The project the composition(s) are on. */
                projectId: string;
                /** @description Specify a single composition ID to fetch. Changes response from list to single. */
                compositionId: string;
                /** @description Specify multiple composition IDs to fetch. Response type will be a list. */
                compositionIDs: string[];
                /** @description Specify a single composition to fetch by slug. Changes response from list to single. */
                slug: string;
                /** @description Specify a single composition to fetch by assodicated project map node ID.  Changes response from list to single. */
                projectMapNodeId: string;
                /** @description Specify a single composition to fetch by assodicated project map node path.  Changes response from list to single. */
                projectMapNodePath: string;
                /** @description Specify a project map ID to fetch by path or node ID from. If not specified, the default project map for the projectId is used. */
                projectMapId: string;
                /** @description The component type (by public ID) to filter by. Note that this filters the root composition type only; components in slots are not matched by this filter. */
                type: string[];
                /** @description Publishing state to fetch. 0 = draft, 64 = published. */
                state: number;
                /** @description Number of records to skip */
                offset: number;
                /** @description Max number of records to return */
                limit: number;
                /**
                 * @deprecated
                 * @description Signals an enhancer proxy to skip processing enhancements to the data and return raw data only.
                 * This improves performance if you do not require enhanced component data.
                 * If calling the Canvas API directly with no enhancer proxy, this has no effect.
                 */
                skipEnhance: boolean;
                /**
                 * @description If true, any pattern references in the composition will be left unresolved.
                 * This is appropriate if you intend to serialize the composition without patterns
                 * embedded into it, and serialize the pattern data separately.
                 */
                skipPatternResolution: boolean;
                /**
                 * @description If true, any pattern override data is not resolved by the API.
                 * This is intended for internal use in the Canvas editor, and should not be used.
                 * Passing this parameter automatically implies withComponentIDs to be true.
                 */
                skipOverridesResolution: boolean;
                /**
                 * @deprecated
                 * @description This parameter is unused and has no effect. Passing this parameter will become an error in the future.
                 */
                skipParameterResolution: boolean;
                /**
                 * @description If true the `_id` unique identifier of each non-root component will be part of the response data.
                 * If false, the `_id` will not be present in the API response.
                 */
                withComponentIDs: boolean;
                /**
                 * @description Matches compositions where their name, slug, or definition name contains the specified keyword.
                 * NOT a full text search; does not match composition contents.
                 */
                keyword: string;
                /**
                 * @description Matches compositions based on whether they are a pattern composition or a regular composition.
                 * If true, only pattern compositions will be returned.
                 * If false, only regular compositions will be returned.
                 * If omitted, both pattern and regular compositions will be returned.
                 */
                pattern: boolean;
                /** @description Sets the sorting of the results. If unspecified, results are sorted by name ascending. */
                orderBy: ("updated_at_DESC" | "updated_at_ASC" | "created_at_DESC" | "created_at_ASC" | "name_DESC" | "name_ASC" | "slug_DESC" | "slug_ASC")[];
                /**
                 * @deprecated
                 * @description Returns the UI status string of the composition.
                 * This internal status is subject to change without notice, and is thus marked deprecated to discourage use of internal data.
                 */
                withUIStatus: boolean;
                /**
                 * @deprecated
                 * @description Filters composition lists by the UI status of the composition.
                 * This internal status is subject to change without notice, and is thus marked deprecated to discourage use of internal data.
                 */
                uiStatus: ("Draft" | "Modified" | "Published" | "Orphan")[];
                /**
                 * @description Filters out compositions without attached node or filters out compositions with attached nodes
                 * in case of FALSE. If not specified - no filtration applied.
                 */
                attachedToProjectMap: boolean;
                /** @description Includes project map node information in the composition results */
                withProjectMapNodes: boolean;
                /**
                 * @deprecated
                 * @description Includes content source map metadata on supported parameters
                 */
                withContentSourceMap: boolean;
                /** @description Filters composition lists by the user who created them. The user is specified by their identity subject. */
                createdBy: string;
                /** @description Filters composition lists by the user who last updated them. The user is specified by their identity subject. */
                updatedBy: string;
                /**
                 * @description Controls whether the total count of results will be returned along with the current results page in a list.
                 * Has no effect when not fetching a list. This does impact performance when enabled.
                 */
                withTotalCount: boolean;
            };
        };
        operations: {};
    };
    "v1-redirect.swagger.yml": {
        paths: {
            "/api/v1/redirect": {
                /** Called to retrieve a list of redirects related to a project */
                get: {
                    parameters: {
                        query: {
                            /** The project to fetch redirects for */
                            projectId: string;
                            /** Id of the redirect to retrieve */
                            id?: string;
                            /** Ids of the redirects to retrieve */
                            ids?: string[];
                            /** Source url to attempt to find redirects for */
                            sourceUrl?: string;
                            /** Id of the project map the source or target belongs to. */
                            projectMapId?: string;
                            /** Id of the project map node to find redirects for. */
                            sourceProjectMapNodeId?: string;
                            /** Id of the project map node to find redirects for. */
                            targetProjectMapNodeId?: string;
                            /** Column to order results by, only applicable if trie is not active. */
                            orderBy?: "updated_at asc" | "updated_at desc" | "source_url asc" | "source_url desc" | "target_url asc" | "target_url desc" | "created_by asc" | "created_by desc";
                            /** Limit the results to this number of results, ignored if using trie parameter. */
                            limit?: number;
                            /** Offset the results a certain amount, useful for pagination. */
                            offset?: number;
                            /** Search text to filter redirects by, filtering on the source and target urls */
                            search?: string;
                        };
                    };
                    responses: {
                        /** OK */
                        200: {
                            content: {
                                "application/json": {
                                    redirects: external$2["v1-redirect.swagger.yml"]["components"]["schemas"]["RedirectGetResponse"];
                                    total?: number;
                                    resultUrl?: string;
                                };
                            };
                        };
                        400: external$2["swagger.yml"]["components"]["responses"]["BadRequestError"];
                        401: external$2["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                        403: external$2["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                        429: external$2["swagger.yml"]["components"]["responses"]["RateLimitError"];
                        500: external$2["swagger.yml"]["components"]["responses"]["InternalServerError"];
                    };
                };
                put: {
                    responses: {
                        /** OK */
                        200: {
                            content: {
                                "application/json": {
                                    /**
                                     * Format: uuid
                                     * @description Id of the redirect
                                     */
                                    id: string;
                                };
                            };
                        };
                        /** OK */
                        204: never;
                        400: external$2["swagger.yml"]["components"]["responses"]["BadRequestError"];
                        401: external$2["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                        403: external$2["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                        429: external$2["swagger.yml"]["components"]["responses"]["RateLimitError"];
                        500: external$2["swagger.yml"]["components"]["responses"]["InternalServerError"];
                    };
                    requestBody: {
                        content: {
                            "application/json": {
                                /** @description Redirect object to insert */
                                redirect: external$2["v1-redirect.swagger.yml"]["components"]["schemas"]["Redirect"];
                                /**
                                 * Format: uuid
                                 * @description Project id to insert the redirect into
                                 */
                                projectId: string;
                            };
                        };
                    };
                };
                /** Called to delete a redirect */
                delete: {
                    responses: {
                        /** OK */
                        200: {
                            content: {
                                "application/json": {
                                    /**
                                     * Format: uuid
                                     * @description Id of the redirect
                                     */
                                    id: string;
                                };
                            };
                        };
                        /** OK */
                        204: never;
                        400: external$2["swagger.yml"]["components"]["responses"]["BadRequestError"];
                        401: external$2["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                        403: external$2["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                        429: external$2["swagger.yml"]["components"]["responses"]["RateLimitError"];
                        500: external$2["swagger.yml"]["components"]["responses"]["InternalServerError"];
                    };
                    requestBody: {
                        content: {
                            "application/json": {
                                /**
                                 * Format: uuid
                                 * @description Redirect id to be deleted.
                                 */
                                id: string;
                                /**
                                 * Format: uuid
                                 * @description Project the redirect belongs to.
                                 */
                                projectId: string;
                            };
                        };
                    };
                };
                /** Handles preflight requests. This endpoint allows CORS. */
                options: {
                    responses: {
                        /** OK */
                        204: never;
                    };
                };
            };
        };
        components: {
            schemas: {
                RedirectGetResponse: {
                    redirect: external$2["v1-redirect.swagger.yml"]["components"]["schemas"]["Redirect"];
                    metadata: external$2["v1-redirect.swagger.yml"]["components"]["schemas"]["RedirectMetadata"];
                }[];
                RedirectMetadata: {
                    /** @description The last time the redirect was modified in UTC */
                    updatedAt?: string;
                    /** @description The last user who modified this redirect */
                    updatedBy?: string;
                    /** @description The time the redirect was created in UTC */
                    createdAt?: string;
                    /** @description The user who created this redirect or system */
                    createdBy?: string;
                };
                Redirect: {
                    /**
                     * Format: uuid
                     * @description Id of the redirect.
                     */
                    id?: string;
                    /** @description Source meant to match a url that needs to be redirected. */
                    sourceUrl: string;
                    /** @description Target meant to be redirected to. */
                    targetUrl: string;
                    /** @description Redirect type to occur from this redirect. */
                    targetStatusCode: number;
                    /**
                     * Format: uuid
                     * @description Project map node related to the source this redirect.
                     */
                    sourceProjectMapNodeId?: string;
                    /**
                     * Format: uuid
                     * @description Project map node related to the target this redirect.
                     */
                    targetProjectMapNodeId?: string;
                    /**
                     * Format: uuid
                     * @description Project map related to this redirect.
                     */
                    projectMapId?: string;
                    /** @description Signals the redirect engine to retain query string parameters to the target url. */
                    sourceRetainQuerystring?: boolean;
                    /** @description Incoming requests must match the domain that's defined in the redirection source. */
                    sourceMustMatchDomain?: boolean;
                    /** @description Rewritten url should match the protocol (http / https) of the incoming request instead of whatever is defined in the redirection target. */
                    targetPreserveIncomingProtocol?: boolean;
                    /** @description Rewritten url should match the domain of the incoming request regardless of what is defined in the redirection target. */
                    targetPreserveIncomingDomain?: boolean;
                    /** @description Stop running rules after this redirect rule gets executed. */
                    stopExecutingAfter?: boolean;
                    /** @description Merge incoming querystring with the querystring defined on the redirection target, taking the incoming querystring parameter where a merge is not possible. */
                    targetMergeQuerystring?: boolean;
                    /** @description Label as system generated or user generated. */
                    labelAsSystem?: boolean;
                };
            };
        };
        operations: {};
    };
}

type Components = components$2['schemas'];
type SharedComponents = components$3['schemas'];
type Api = paths$3['/api/v1/canvas'];
/** Query parameter options for GET /api/v1/canvas */
type CompositionGetParameters = Omit<Api['get']['parameters']['query'], 'type'> & {
    type?: string | string[];
};
type CompositionGetOrderBy = NonNullable<Api['get']['parameters']['query']['orderBy']>[0];
/** The GET response from /api/v1/canvas when `component` or `slug` params are specified */
type CompositionGetResponse = Components['CompositionApiResponse'];
/** @deprecated - internal use, do not rely on this value */
type CompositionUIStatus = NonNullable<Components['CompositionApiResponse']['uiStatus']>;
/** The GET response from /api/v1/canvas when `component` or `slug` are not specified */
type CompositionGetListResponse = Components['CompositionListResponse'];
/** The PUT request body for /api/v1/canvas */
type CompositionPutParameters = Api['put']['requestBody']['content']['application/json'];
/** Shape of the DELETE request body for /api/v1/canvas */
type CompositionDeleteParameters = Api['delete']['requestBody']['content']['application/json'];
/** Defines an editable parameter on a component. */
type ComponentParameter<TValue = unknown> = Omit<SharedComponents['ComponentParameter'], 'value'> & {
    /** The type of the parameter. Determines how it is displayed when editing, and tells the consumer how to process it. */
    value: TValue;
};
/** The type of the parameters in contextual editing mode. */
type ComponentParameterContextualEditing<TValue = unknown> = ComponentParameter<TValue> & {
    /** Data used for visual editing. It's not supposed to be used externally. The format might change without prior notice. */
    _contextualEditing?: {
        isEditable?: boolean;
    };
};
/** Defines a connection to a data element on a data resource. */
type DataElementConnectionDefinition = SharedComponents['DataElementConnectionDefinition'];
/** Variable values for a data resource. */
type DataResourceVariables = SharedComponents['DataResourceVariables'];
/**
 * Data definitions attached to this component. The property name is the key of the data in the data document.
 * Note: data definitions are inherited from ancestors at runtime (and may be overridden by descendants that use the same key).
 */
type DataResourceDefinitions = SharedComponents['DataResourceDefinitions'];
/** Defines a data resource, which is a named JSON document, usually from an API response, which may be projected onto parameters */
type DataResourceDefinition = SharedComponents['DataResourceDefinition'];
/** Defines the shape of a component instance served by the composition API. */
type ComponentInstance = SharedComponents['ComponentInstance'] & {
    /** Data for the component instance, provided by a component enhancer. Never set in unenhanced data. */
    data?: Record<string, unknown>;
};
/** Defines the shape of the root component in a composition */
type RootComponentInstance = SharedComponents['RootComponentInstance'];
/**
 * Defines the shape of a component override
 */
type OverrideOptions = SharedComponents['OverrideOptions'];
/**
 * Defines the shape of a component override
 */
type ComponentOverride = SharedComponents['ComponentOverride'];
/**
 * Defines a set of component overrides by component ID
 */
type ComponentOverrides = Record<string, ComponentOverride>;
/**
 * Defines how a component on a pattern may have its values overridden
 */
type ComponentOverridability = SharedComponents['ComponentOverridability'];
/** Defines single structure to keep all canvas models (used in CLI commands and Starter content generations) */
type CanvasDefinitions = {
    components?: Array<ComponentDefinition>;
    compositions?: Array<CompositionGetResponse>;
    dataTypes?: Array<DataType>;
};
/** Defines shared parameters for requests getting a single composition */
type CompositionGetOneSharedParameters = Pick<CompositionGetParameters, 'state' | 'skipEnhance' | 'skipPatternResolution' | 'withComponentIDs' | 'withUIStatus' | 'withTotalCount' | 'skipOverridesResolution' | 'withContentSourceMap'>;
type CompositionGetBy<RequiredParameters extends keyof CompositionGetParameters> = CompositionGetOneSharedParameters & Required<Pick<CompositionGetParameters, RequiredParameters>>;
type SpecificProjectMap = {
    projectMapId?: string;
};
/** Defines exact parameters for specific requests getting a single composition */
type CompositionGetByNodePathParameters = CompositionGetBy<'projectMapNodePath'> & SpecificProjectMap;
type CompositionGetByNodeIdParameters = CompositionGetBy<'projectMapNodeId'> & SpecificProjectMap;
type CompositionGetBySlugParameters = CompositionGetBy<'slug'>;
type CompositionGetByIdParameters = CompositionGetBy<'compositionId'>;
/** Switches for data resolution */
type DataResolutionOption = {
    skipDataResolution?: boolean;
};
type DataResolutionOptionNegative = {
    skipDataResolution: true;
};
type DataResolutionOptionPositive = {
    skipDataResolution?: false;
};
type DataResolutionParameters = {
    /**
     * Adds additional diagnostics about edge request processing to the response (`diagnostics`).
     * Because this adds a lot of data to the response, we do not recommend using this unless diagnosing performance issues.
     */
    diagnostics?: boolean;
};
/** Types of issue that can occur when fetching composition data */
type CompositionIssue = CompositionPatternIssue | DataResourceIssue | DataElementBindingIssue | DataResourceInputIssue | DataResolutionConfigIssue | OverrideIssue;
type CompositionIssueCore = components$1['schemas']['CompositionIssue'];
/** An error that occured resolving a pattern that is referenced on the composition */
type CompositionPatternIssue = CompositionIssueCore & {
    type: 'pattern';
    code: NonNullable<ComponentInstance['_patternError']>;
};
/** An error while binding a data element from a data resource to a component parameter (i.e. a missing property in the data resource) */
type DataElementBindingIssue = CompositionIssueCore & {
    type: 'binding';
    parameterName: string;
    expression?: DataElementConnectionDefinition;
};
/** An error that occurred fetching a data defined on the composition or a pattern within */
type DataResourceIssue = CompositionIssueCore & {
    type: 'data';
    dataName: string;
    dataType: string;
};
/**
 * An issue that occurred while binding dynamic inputs to composition data resources,
 * specifically when an expected dynamic input did not have a value.
 */
type DataResourceInputIssue = CompositionIssueCore & {
    type: 'input';
    inputName: string;
};
/** Error in data resolution configuration (internal error) */
type DataResolutionConfigIssue = {
    message: string;
    type: 'config';
};
/** Error in applying component overrides */
type OverrideIssue = CompositionIssueCore & {
    message: string;
    type: 'override';
};
/** Diagnostics about edge request processing */
type CompositionDiagnostics = components$1['schemas']['CompositionDiagnostics'];
/** Diagnostic data about the load performance of attached composition datas */
type CompositionDataDiagnostic = components$1['schemas']['DataDiagnostic'];
/** Response as it comes from uniform.global/api/v1/composition */
type CompositionResolvedGetResponse = components$1['schemas']['CompositionResolvedGetResponse'];
/** All valid response types */
type CompositionGetValidResponses = CompositionGetResponse | CompositionResolvedGetResponse;
/** The GET response from /api/v1/route */
type RouteGetParameters = paths$2['/api/v1/route']['get']['parameters']['query'] & DataResolutionParameters;
type RouteGetResponse = components['schemas']['RouteResponse'];
type RouteGetResponseComposition = components['schemas']['RouteResponseComposition'];
type RouteGetResponseRedirect = components['schemas']['RouteResponseRedirect'];
type RouteGetResponseNotFound = components['schemas']['RouteResponseNotFound'];
type RouteDynamicInputs = components['schemas']['RouteDynamicInputs'];
/** GET response from uniform.global/api/v1/route when result is a composition */
type RouteGetResponseEdgehancedComposition = Omit<RouteGetResponseComposition, 'compositionApiResponse'> & {
    compositionApiResponse: CompositionResolvedGetResponse;
};

type CanvasClientOptions = ClientOptions & {
    edgeApiHost?: string;
};
declare class CanvasClient extends ApiClient<CanvasClientOptions> {
    private edgeApiHost;
    constructor(options: CanvasClientOptions);
    /** Fetches lists of Canvas compositions, optionally by type */
    getCompositionList(options?: Omit<CompositionGetParameters, 'projectId' | 'compositionId' | 'slug'>): Promise<{
        compositions: {
            state: number;
            uiStatus?: "Draft" | "Modified" | "Published" | "Orphan" | undefined;
            projectId: string;
            created: string;
            modified: string;
            pattern: boolean;
            composition: {
                type: string;
                parameters?: {
                    [key: string]: {
                        value: unknown;
                        type: string;
                        connectedData?: {
                            pointer: string;
                            syntax: "jptr";
                        } | undefined;
                    };
                } | undefined;
                variant?: string | undefined;
                projectMapNodes?: {
                    id: string;
                    path: string;
                    projectMapId: string;
                }[] | undefined;
                slots?: {
                    [key: string]: {
                        type: string;
                        parameters?: {
                            [key: string]: {
                                value: unknown;
                                type: string;
                                connectedData?: {
                                    pointer: string;
                                    syntax: "jptr";
                                } | undefined;
                            };
                        } | undefined;
                        variant?: string | undefined;
                        slots?: {
                            [key: string]: any[];
                        } | undefined;
                        _id?: string | undefined;
                        _pattern?: string | undefined;
                        _dataResources?: {
                            [key: string]: {
                                type: string;
                                isPatternParameter?: boolean | undefined;
                                ignorePatternParameterDefault?: boolean | undefined;
                                variables?: {
                                    [key: string]: string;
                                } | undefined;
                            };
                        } | undefined;
                        _patternDataResources?: {
                            [key: string]: {
                                type: string;
                                isPatternParameter?: boolean | undefined;
                                ignorePatternParameterDefault?: boolean | undefined;
                                variables?: {
                                    [key: string]: string;
                                } | undefined;
                            };
                        } | undefined;
                        _patternError?: "NOTFOUND" | "CYCLIC" | undefined;
                        _overrides?: {
                            [key: string]: {
                                parameters?: {
                                    [key: string]: {
                                        value: unknown;
                                        type: string;
                                        connectedData?: {
                                            pointer: string;
                                            syntax: "jptr";
                                        } | undefined;
                                    };
                                } | undefined;
                                variant?: string | undefined;
                            };
                        } | undefined;
                        _overridability?: {
                            parameters?: {
                                [key: string]: "no" | "yes";
                            } | undefined;
                            variants?: boolean | undefined;
                        } | undefined;
                    }[];
                } | undefined;
                _id: string;
                _slug?: string | null | undefined;
                _name: string;
                _dataResources?: {
                    [key: string]: {
                        type: string;
                        isPatternParameter?: boolean | undefined;
                        ignorePatternParameterDefault?: boolean | undefined;
                        variables?: {
                            [key: string]: string;
                        } | undefined;
                    };
                } | undefined;
                _overrides?: {
                    [key: string]: {
                        parameters?: {
                            [key: string]: {
                                value: unknown;
                                type: string;
                                connectedData?: {
                                    pointer: string;
                                    syntax: "jptr";
                                } | undefined;
                            };
                        } | undefined;
                        variant?: string | undefined;
                    };
                } | undefined;
                _overridability?: {
                    parameters?: {
                        [key: string]: "no" | "yes";
                    } | undefined;
                    variants?: boolean | undefined;
                } | undefined;
            };
        }[];
        totalCount?: number | undefined;
    }>;
    /** Fetches one composition by its project map node path */
    getCompositionByNodePath(options: CompositionGetByNodePathParameters & DataResolutionOptionNegative): Promise<CompositionGetResponse>;
    getCompositionByNodePath(options: CompositionGetByNodePathParameters & DataResolutionOptionPositive & DataResolutionParameters): Promise<CompositionResolvedGetResponse>;
    getCompositionByNodePath<T extends CompositionGetResponse = CompositionGetValidResponses>(options: CompositionGetByNodePathParameters & DataResolutionOption & DataResolutionParameters): Promise<T>;
    /** Fetches one composition by its project map node ID */
    getCompositionByNodeId(options: CompositionGetByNodeIdParameters & DataResolutionOptionNegative): Promise<CompositionGetResponse>;
    getCompositionByNodeId(options: CompositionGetByNodeIdParameters & DataResolutionOptionPositive & DataResolutionParameters): Promise<CompositionResolvedGetResponse>;
    getCompositionByNodeId<T extends CompositionGetResponse = CompositionGetValidResponses>(options: CompositionGetByNodeIdParameters & DataResolutionOption & DataResolutionParameters): Promise<T>;
    /** Fetches one composition by its slug */
    getCompositionBySlug(options: CompositionGetBySlugParameters & DataResolutionOptionNegative): Promise<CompositionGetResponse>;
    getCompositionBySlug(options: CompositionGetBySlugParameters & DataResolutionOptionPositive & DataResolutionParameters): Promise<CompositionResolvedGetResponse>;
    getCompositionBySlug<T extends CompositionGetResponse = CompositionGetValidResponses>(options: CompositionGetBySlugParameters & DataResolutionOption & DataResolutionParameters): Promise<T>;
    /** Fetches one composition by its ID */
    getCompositionById(options: CompositionGetByIdParameters & DataResolutionOptionNegative): Promise<CompositionGetResponse>;
    getCompositionById(options: CompositionGetByIdParameters & DataResolutionOptionPositive & DataResolutionParameters): Promise<CompositionResolvedGetResponse>;
    getCompositionById<T extends CompositionGetResponse = CompositionGetValidResponses>(options: CompositionGetByIdParameters & DataResolutionOption & DataResolutionParameters): Promise<T>;
    private getOneComposition;
    /** Updates or creates a Canvas component definition */
    updateComposition(body: Omit<CompositionPutParameters, 'projectId'>): Promise<void>;
    /** Deletes a Canvas component definition */
    removeComposition(body: Omit<CompositionDeleteParameters, 'projectId'>): Promise<void>;
    /** Fetches all Canvas component definitions */
    getComponentDefinitions(options?: Omit<ComponentDefinitionGetParameters, 'projectId'>): Promise<{
        componentDefinitions: {
            id: string;
            name: string;
            icon?: string | undefined;
            titleParameter?: string | null | undefined;
            canBeComposition?: boolean | undefined;
            parameters?: {
                id: string;
                name: string;
                helpText?: string | undefined;
                type: string;
                typeConfig?: unknown;
            }[] | undefined;
            useTeamPermissions?: boolean | undefined;
            permissions?: {
                roleId: string;
                permission: "read" | "write" | "create" | "delete";
                state: number;
            }[] | undefined;
            slots?: {
                id: string;
                name: string;
                allowedComponents: string[];
                inheritAllowedComponents: boolean;
                allowAllComponents?: boolean | undefined;
                patternsInAllowedComponents?: boolean | undefined;
                minComponents?: number | undefined;
                maxComponents?: number | undefined;
            }[] | undefined;
            slugSettings?: {
                required?: "no" | "yes" | "disabled" | undefined;
                unique?: "no" | "local" | "global" | undefined;
                regularExpression?: string | undefined;
                regularExpressionMessage?: string | undefined;
            } | undefined;
            defaults?: {
                type: string;
                parameters?: {
                    [key: string]: {
                        value: unknown;
                        type: string;
                        connectedData?: {
                            pointer: string;
                            syntax: "jptr";
                        } | undefined;
                    };
                } | undefined;
                variant?: string | undefined;
                slots?: {
                    [key: string]: any[];
                } | undefined;
                _id?: string | undefined;
                _pattern?: string | undefined;
                _dataResources?: {
                    [key: string]: {
                        type: string;
                        isPatternParameter?: boolean | undefined;
                        ignorePatternParameterDefault?: boolean | undefined;
                        variables?: {
                            [key: string]: string;
                        } | undefined;
                    };
                } | undefined;
                _patternDataResources?: {
                    [key: string]: {
                        type: string;
                        isPatternParameter?: boolean | undefined;
                        ignorePatternParameterDefault?: boolean | undefined;
                        variables?: {
                            [key: string]: string;
                        } | undefined;
                    };
                } | undefined;
                _patternError?: "NOTFOUND" | "CYCLIC" | undefined;
                _overrides?: {
                    [key: string]: {
                        parameters?: {
                            [key: string]: {
                                value: unknown;
                                type: string;
                                connectedData?: {
                                    pointer: string;
                                    syntax: "jptr";
                                } | undefined;
                            };
                        } | undefined;
                        variant?: string | undefined;
                    };
                } | undefined;
                _overridability?: {
                    parameters?: {
                        [key: string]: "no" | "yes";
                    } | undefined;
                    variants?: boolean | undefined;
                } | undefined;
            } | null | undefined;
            variants?: {
                id: string;
                name: string;
            }[] | undefined;
            created?: string | undefined;
            updated?: string | undefined;
        }[];
    }>;
    /** Updates or creates a Canvas component definition */
    updateComponentDefinition(body: Omit<ComponentDefinitionPutParameters, 'projectId'>): Promise<void>;
    /** Deletes a Canvas component definition */
    removeComponentDefinition(body: Omit<ComponentDefinitionDeleteParameters, 'projectId'>): Promise<void>;
}
declare class UncachedCanvasClient extends CanvasClient {
    constructor(options: Omit<CanvasClientOptions, 'bypassCache'>);
}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths$1 {
    "/api/v1/composition-relationships": {
        /** Gets the relationships for a composition */
        get: {
            parameters: {
                query: {
                    projectId: string;
                    type: "definition";
                    definitionIds?: string;
                    withCompositions?: boolean | null;
                };
            };
            responses: {
                /** 200 response */
                200: {
                    content: {
                        "application/json": {
                            id: string;
                            compositions?: {
                                /** @enum {string} */
                                uiStatus?: "Draft" | "Modified" | "Published" | "Orphan";
                                composition: {
                                    _id: string;
                                    _name: string;
                                };
                                pattern: boolean;
                            }[];
                            totalCount: number;
                        }[];
                    };
                };
                400: external$1["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$1["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$1["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$1["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$1["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
        };
        /** Reindexes the composition relationships for a project */
        post: {
            responses: {
                /** 200 response */
                200: {
                    content: {
                        "application/json": {
                            success: boolean;
                        };
                    };
                };
                400: external$1["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external$1["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external$1["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external$1["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external$1["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** Format: uuid */
                        projectId: string;
                        /** @enum {string} */
                        type: "clear" | "index";
                        definitionId?: string;
                        compositionId?: string;
                        state?: number;
                    };
                };
            };
        };
    };
}
interface external$1 {
    "swagger.yml": {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** @description Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        "application/json": external$1["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        "application/json": external$1["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        "application/json": external$1["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Resource not found */
                NotFoundError: {
                    content: {
                        "application/json": external$1["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
interface paths {
    "/api/v1/usage-tracking": {
        /** Gets current version of the usage tracking for a project */
        get: {
            parameters: {
                query: {
                    projectId: string;
                };
            };
            responses: {
                /** 200 response */
                200: {
                    content: {
                        "application/json": {
                            version: number;
                        };
                    };
                };
                400: external["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
        };
        /** Sets version of the usage tracking for a project */
        post: {
            responses: {
                /** 200 response */
                200: {
                    content: {
                        "application/json": {
                            version: number;
                        };
                    };
                };
                400: external["swagger.yml"]["components"]["responses"]["BadRequestError"];
                401: external["swagger.yml"]["components"]["responses"]["UnauthorizedError"];
                403: external["swagger.yml"]["components"]["responses"]["ForbiddenError"];
                429: external["swagger.yml"]["components"]["responses"]["RateLimitError"];
                500: external["swagger.yml"]["components"]["responses"]["InternalServerError"];
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** Format: uuid */
                        projectId: string;
                        version: number;
                    };
                };
            };
        };
    };
}
interface external {
    "swagger.yml": {
        paths: {};
        components: {
            schemas: {
                Error: {
                    /** @description Error message(s) that occurred while processing the request */
                    errorMessage?: string[] | string;
                };
            };
            responses: {
                /** Request input validation failed */
                BadRequestError: {
                    content: {
                        "application/json": external["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** API key or token was not valid */
                UnauthorizedError: {
                    content: {
                        "application/json": external["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Permission was denied */
                ForbiddenError: {
                    content: {
                        "application/json": external["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Resource not found */
                NotFoundError: {
                    content: {
                        "application/json": external["swagger.yml"]["components"]["schemas"]["Error"];
                    };
                };
                /** Too many requests in allowed time period */
                RateLimitError: unknown;
                /** Execution error occurred */
                InternalServerError: unknown;
            };
        };
        operations: {};
    };
}

type CompositionRelationshipsDefinitionApi = paths$1['/api/v1/composition-relationships'];
type CompositionRelationshipsDefinitionGetParameters = CompositionRelationshipsDefinitionApi['get']['parameters']['query'];
type CompositionRelationshipsDDefinitionGetResponse = CompositionRelationshipsDefinitionApi['get']['responses']['200']['content']['application/json'];
type UsageTrackingApi = paths['/api/v1/usage-tracking'];
type UsageTrackingGetParameters = UsageTrackingApi['get']['parameters']['query'];
type UsageTrackingGetResponse = UsageTrackingApi['get']['responses']['200']['content']['application/json'];
type UsageTrackingPostParameters = UsageTrackingApi['post']['requestBody']['content']['application/json'];
type UsageTrackingPostResponse = UsageTrackingApi['post']['responses']['200']['content']['application/json'];
type CompositionRelationshipsClientOptions = ClientOptions;
declare class unstable_CompositionRelationshipClient extends ApiClient<CompositionRelationshipsClientOptions> {
    private readonly _options;
    constructor(options: CompositionRelationshipsClientOptions);
    getDefinitionsRelationships: ({ definitionIds, withCompositions, }: {
        definitionIds: string[];
        withCompositions?: boolean | undefined;
    }) => Promise<CompositionRelationshipsDDefinitionGetResponse>;
    clearAllRelationships: () => Promise<{
        success: boolean;
    }>;
    indexCompositionRelationships: ({ state, compositionId, }: {
        state: number;
        compositionId: string;
    }) => Promise<{
        success: boolean;
    }>;
    getVersion: () => Promise<UsageTrackingGetResponse['version']>;
    setVersion: (version: UsageTrackingPostParameters['version']) => Promise<UsageTrackingPostResponse>;
}

type PreviewPanelSettings = {
    isInteractive: boolean;
};

type EnhancerContext = {
    preview?: boolean;
};
/** Options passed to a ComponentEnhancer function */
type ComponentEnhancerOptions<TContext extends EnhancerContext = EnhancerContext> = {
    component: Readonly<ComponentInstance>;
    context: TContext;
};
/**
 * A function which is called for each matching component in a composition, which can manipulate the value of a specific key in the component's `data` property.
 * Used to enhance layout data with information from other platforms, such as private APIs, where the value is not tied to a parameter
 * and is intrinsic to the component itself.
 *
 * Note: the configuration of enhancers namespaces component enhancers into a named property on the data object to avoid collisions,
 * thus an enhancer need not worry about merging values with other enhancers, nor which key it has been registered under.
 *
 * Return values:
 * TValue - sets the configured key in the component's data value to this value
 * undefined - do not set the component's data key
 */
type ComponentEnhancerFunction<TValue = unknown, TContext extends EnhancerContext = EnhancerContext> = (options: ComponentEnhancerOptions<TContext>) => Promise<TValue | undefined> | TValue | undefined;
/**
 * Defines logic to add arbitrary async data to a component's `data` property.
 * Used to enhance layout data with information from other platforms, such as private APIs,
 * where the value is not tied to a parameter and is intrinsic to the component itself.
 */
type ComponentEnhancer<TValue = unknown, TContext extends EnhancerContext = EnhancerContext> = {
    /** Function called to enhance a single component in a composition. */
    enhanceOne: ComponentEnhancerFunction<TValue, TContext>;
    /**
     * The limit policy that defines how much concurrency and retry is allowed for this enhancer.
     * If the enhancer does not define completeAll(), this limit policy is applied to enhanceOne() calls.
     * If the enhancer does define completeAll(), this limit policy is applied to the completeAll() calls.
     * If the limit policy is undefined, unbounded concurrency is allowed and no error retrying will occur.
     */
    limitPolicy?: LimitPolicy;
    completeAll?: () => Promise<void>;
};
/** Options passed to a ComponentParameterEnhancer function */
type ComponentParameterEnhancerOptions<TRawValue = unknown, TContext extends EnhancerContext = EnhancerContext> = {
    parameter: Readonly<ComponentParameter<TRawValue>>;
    parameterName: string;
    component: Readonly<ComponentInstance>;
    context: TContext;
};
/**
 * A function which is called for each component parameter in a component tree, which can manipulate the value of the parameter.
 * Used to enhance layout data with information from other platforms, such as CMS, commerce, indexing, etc.
 *
 * Return values:
 * TValue - replaces the original parameter value with this value
 * undefined - do not change the original parameter value
 * null - sets the parameter value to null, replacing any existing value (i.e. if its value could not be resolved in an external system)
 */
type ComponentParameterEnhancerFunction<TRawValue = unknown, TOutputValue = unknown, TContext extends EnhancerContext = EnhancerContext> = (options: ComponentParameterEnhancerOptions<TRawValue, TContext>) => Promise<TOutputValue | undefined | null> | TOutputValue | undefined | null;
/**
 * Defines logic to replace the value of a component parameter with arbitrary async data.
 * Used to enhance layout data with information from other platforms, such as CMS, commerce, indexing, etc,
 * where that data is directly expandable from a parameter value.
 */
type ComponentParameterEnhancer<TRawValue = unknown, TOutputValue = unknown, TContext extends EnhancerContext = EnhancerContext> = {
    /** Function called to enhance a single parameter to be enhanced. */
    enhanceOne: ComponentParameterEnhancerFunction<TRawValue, TOutputValue, TContext>;
    /**
     * The limit policy that defines how much concurrency and retry is allowed for this enhancer.
     * If the enhancer does not define completeAll(), this limit policy is applied to enhanceOne() calls.
     * If the enhancer does define completeAll(), this limit policy is applied to the completeAll() calls.
     * If the limit policy is undefined, unbounded concurrency is allowed and no error retrying will occur.
     */
    limitPolicy?: LimitPolicy;
    /**
     * Function called, if defined, after all enhanceOne() calls have completed for the composition being enhanced.
     * Used to enable batching.
     * Return the number of batched items processed (or zero if that does not apply).
     */
    completeAll?: () => Promise<number>;
};

type schemas = components$1['schemas'];
type InvalidationPayload = schemas['InvalidationPayload'];
type InvalidationResult = schemas['InvalidationResult'];
type BatchInvalidationPayload = schemas['BatchInvalidationPayload'];

type LinkParameterType = 'projectMapNode' | 'url' | 'tel' | 'email';
type LinkTypeConfiguration = Partial<Record<LinkParameterType, boolean>>;
type LinkParamConfiguration = {
    required?: boolean;
    linkTypes?: LinkTypeConfiguration;
};
type ProjectMapLinkParamValue = {
    type: 'projectMapNode';
    projectMapId: string;
    nodeId: string;
    path: string;
    dynamicInputValues?: Record<string, string>;
};
type NonProjectMapLinkParamValue = {
    type: Exclude<LinkParameterType, 'projectMapNode'>;
    path: string;
};
type LinkParamValue = ProjectMapLinkParamValue | NonProjectMapLinkParamValue | undefined;
/**
 * @deprecated Use ProjectMapLinkParamValue | undefined instead
 */
type ProjectMapLinkComponentParameterValue = ProjectMapLinkParamValue | undefined;
/**
 * @deprecated Use LinkParamValue instead
 */
type LinkComponentParameterValue = LinkParamValue;

type RichTextBuiltInFormat = 'code' | 'bold' | 'italic' | 'underline' | 'strikethrough' | 'superscript' | 'subscript';
type RichTextBuiltInElement = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'unorderedList' | 'orderedList' | 'link';
type RichTextParamConfiguration = {
    required?: boolean;
    formatting?: {
        builtIn?: Array<RichTextBuiltInFormat>;
    };
    elements?: {
        builtIn?: Array<RichTextBuiltInElement>;
    };
};
type RichTextParamValue = SerializedEditorState | undefined | null;

/** API client to make comms with the Next Gen Mesh Data Source API simpler */
declare class DataSourceClient extends ApiClient {
    constructor(options: ClientOptions);
    /** Fetches all DataSources for a project */
    get(options?: ExceptProject<DataSourceGetParameters>): Promise<{
        result: {
            id: string;
            displayName: string;
            connectorType: string;
            baseUrl: string;
            headers?: {
                key: string;
                value: string;
            }[] | undefined;
            parameters?: {
                key: string;
                value: string;
            }[] | undefined;
            variables?: {
                [key: string]: {
                    displayName?: string | undefined;
                    helpText?: string | undefined;
                    type?: string | undefined;
                    default: string;
                    order?: number | undefined;
                };
            } | undefined;
            custom?: {
                [key: string]: unknown;
            } | undefined;
        };
    }>;
    /** Fetches all DataSources for a project */
    getList(options?: ExceptProject<DataSourcesGetParameters>): Promise<{
        results: {
            id: string;
            displayName: string;
            connectorType: string;
            baseUrl: string;
            headers?: {
                key: string;
                value: string;
            }[] | undefined;
            parameters?: {
                key: string;
                value: string;
            }[] | undefined;
            variables?: {
                [key: string]: {
                    displayName?: string | undefined;
                    helpText?: string | undefined;
                    type?: string | undefined;
                    default: string;
                    order?: number | undefined;
                };
            } | undefined;
            custom?: {
                [key: string]: unknown;
            } | undefined;
        }[];
    }>;
    /** Updates or creates (based on id) a DataSource */
    upsert(body: ExceptProject<DataSourcePutParameters>): Promise<void>;
    /** Deletes a DataSource */
    remove(body: ExceptProject<DataSourceDeleteParameters>): Promise<void>;
}

/** API client to make comms with the Next Gen Mesh Data Type API simpler */
declare class DataTypeClient extends ApiClient {
    #private;
    constructor(options: ClientOptions);
    /** Fetches all DataTypes for a project */
    get(options?: ExceptProject<DataTypeGetParameters>): Promise<DataTypeGetResponse>;
    /** Updates or creates (based on id) a DataType */
    upsert(body: ExceptProject<DataTypePutParameters>): Promise<void>;
    /** Deletes a DataType */
    remove(body: ExceptProject<DataTypeDeleteParameters>): Promise<void>;
}

/** A single entry in a batch of queued enhancements. */
declare class BatchEntry<TArgs, TResult> {
    private _resolve;
    private _reject;
    args: TArgs;
    private _isCompleted;
    constructor(_resolve: (result: TResult) => void, _reject: (reason: any) => void, args: TArgs);
    /** Mark the batch entry as successfully completed. */
    resolve(result: TResult): void;
    /** Mark the batch entry as failed. */
    reject(reason: any): void;
    /** @return Whether the batch entry has been completed (resolved or rejected). */
    get isCompleted(): boolean;
}
/**
 * An enhancer that queues up promises for each component that needs enhancing,
 * and once all enhancements have been queued handles them all in a batch.
 * Note: this type is adaptable to both ComponentParameterEnhancer and ComponentEnhancer types.
 */
type BatchEnhancer<TArgs, TResult> = {
    /** Adds a promise to the enhancement queue. */
    enhanceOne: (args: TArgs) => Promise<TResult | undefined>;
    /** Calls the batch enhancer function for all queued promises and resolves them. Returns number of processed items. */
    completeAll: () => Promise<number>;
    limitPolicy?: LimitPolicy;
};
/**
 * Creates an enhancer that batches up all enhancements for a composition into a set of promises,
 * and then handles them all in a single batch. Used to reduce the number of HTTP requests
 * needed to fulfill layout enhancements when a layout uses many resources from other systems.
 */
declare function createBatchEnhancer<TArgs, TResult>({ handleBatch, shouldQueue, limitPolicy, }: {
    /** Function called to handle one or more batched up enhancements. (note: queue will never be an empty array) */
    handleBatch: (queue: ReadonlyArray<Readonly<BatchEntry<TArgs, TResult>>>) => Promise<void>;
    /** Function called to determine if a given enhancement should be queued, i.e. don't queue invalid or null/undefined values. */
    shouldQueue?: (args: TArgs) => boolean;
    limitPolicy?: LimitPolicy;
}): BatchEnhancer<TArgs, TResult>;

/**
 * Composes several enhancers into a synchronous chain. Can be used to modify the output of an enhancer.
 * NOTE: only the first enhancer in the chain may use batching (completeAll()).
 */
declare const compose: (input: ComponentParameterEnhancer<any, any> | ComponentParameterEnhancerFunction<any>, ...composers: ReadonlyArray<ComponentParameterEnhancer<any, any> | ComponentParameterEnhancerFunction<any>>) => ComponentParameterEnhancer<any, any>;

type LimitPolicy = <ReturnValue>(func: () => Promise<ReturnValue>) => Promise<ReturnValue>;
declare function createLimitPolicy({ throttle, retry, }: {
    throttle?: Options | false;
    retry?: Options$1 | false;
}): LimitPolicy;
declare const nullLimitPolicy: LimitPolicy;

/**
 * Builds a definition of the enhancers to run on Canvas components to add data from other systems.
 * Note that only the first matching enhancer will be run.
 */
declare class ChildEnhancerBuilder {
    private _paramMatches;
    private _dataMatches;
    /** Targets an enhancer to modify the value of any parameter */
    parameter(enhancer: ComponentParameterEnhancer<any, any> | ComponentParameterEnhancerFunction<any>): this;
    /** Targets an enhancer to modify the value of any parameter with a specific name */
    parameterName(name: string | readonly string[], enhancer: ComponentParameterEnhancer<any, any> | ComponentParameterEnhancerFunction<any>): this;
    /** Targets an enhancer to modify the value of any parameter with a specific type */
    parameterType(type: string | readonly string[], enhancer: ComponentParameterEnhancer<any, any> | ComponentParameterEnhancerFunction<any>): this;
    /**
     * Targets an enhancer to set a specific object key on the component's `data` property.
     * Note: an exception will be thrown if the same key is registered more than once.
     */
    data(name: string, enhancer: ComponentEnhancer<any> | ComponentEnhancerFunction<any>): this;
    /**
     * Resolves the parameter enhancer for a given parameter, if one exists.
     * The first matching enhancer by registration order is returned, if more than one could match.
     */
    resolveParameterEnhancer(parameterName: string, parameter: ComponentParameter): ComponentParameterEnhancer | undefined;
    /**
     * Resolves component enhancer(s) for a given component.
     * Returns a Map where the key is the name of the data property and the value is the enhancer.
     */
    resolveComponentEnhancers(): Map<string, ComponentEnhancer>;
    private _resolveParameterEnhancer;
}
/**
 * Builds a definition of the enhancers to run on Canvas components to add data from other systems.
 * Note that only the first matching enhancer will be run.
 */
declare class EnhancerBuilder {
    private _componentIndex;
    private _rootBuilder;
    /** Targets an enhancer to modify the value of any parameter */
    parameter(enhancer: ComponentParameterEnhancer<any, any> | ComponentParameterEnhancerFunction): this;
    /** Targets an enhancer to modify the value of any parameter with a specific name */
    parameterName(name: string | readonly string[], enhancer: ComponentParameterEnhancer<any, any> | ComponentParameterEnhancerFunction): this;
    /** Targets an enhancer to modify the value of any parameter with a specific type */
    parameterType(type: string | readonly string[], enhancer: ComponentParameterEnhancer<any, any> | ComponentParameterEnhancerFunction<any>): this;
    /**
     * Targets an enhancer to set a specific object key on the component's `data` property.
     * Note: an exception will be thrown if the same key is registered more than once.
     */
    data(name: string, enhancer: ComponentEnhancer<any> | ComponentEnhancerFunction<any>): this;
    /**
     * Targets a subset of enhancers at a specific component type.
     * Global enhancers will still be run if no matching enhancer is registered for this component's properties.
     */
    component(name: string | readonly string[], builder: (builder: ChildEnhancerBuilder) => void): EnhancerBuilder;
    /**
     * Resolves the parameter enhancer for a given parameter, if one exists.
     * The first matching enhancer by registration order is returned, if more than one could match.
     */
    resolveParameterEnhancer(component: ComponentInstance, parameterName: string, parameter: ComponentParameter): ComponentParameterEnhancer | undefined;
    /**
     * Resolves component enhancer(s) for a given component.
     * Returns a Map where the key is the name of the data property and the value is the enhancer.
     */
    resolveComponentEnhancers(component: ComponentInstance): Map<string, ComponentEnhancer>;
}

type EnhancerError = {
    message: string;
    error: Error | string;
};
/**
 * Applies enhancer functions to a component tree.
 * IMPORTANT: the input composition object is mutated. Plan accordingly.
 * Want immutability? Grab immer :)
 */
declare function enhance<TContext extends EnhancerContext = EnhancerContext>({ composition, enhancers, context, onErrors, }: {
    composition: ComponentInstance;
    enhancers: EnhancerBuilder;
    context: TContext;
    onErrors?: (errors: EnhancerError[]) => void;
}): Promise<void>;

declare function extractLocales({ component }: {
    component: ComponentInstance;
}): Record<string, ComponentInstance[]>;
declare function localize({ composition, locale, }: {
    composition: ComponentInstance;
    locale: string | ((options: {
        component: Readonly<ComponentInstance>;
        locales: Readonly<Record<string, ComponentInstance[]>>;
    }) => string | undefined);
}): void;

/**
 * Given a batch of enhancements containing potentially duplicate entries (i.e. several components referencing the same thing),
 * group them together by some unique identifier and enable simpler batch processing.
 */
declare class UniqueBatchEntries<TArgs, TResult> {
    groups: Readonly<Record<string, ReadonlyArray<Readonly<BatchEntry<TArgs, TResult>>>>>;
    constructor(
    /** The batch queue being processed. */
    entries: ReadonlyArray<Readonly<BatchEntry<TArgs, TResult>>>, 
    /** A function to select the unique identifier for a given batch entry. */
    uniqueKeySelector: (entry: Readonly<TArgs>) => string);
    /** Resolves all entries in a group key with the same result value. */
    resolveKey(key: string, result: TResult): void;
    /** Resolves all remaining entries that have not been otherwise resolved with a specific value */
    resolveRemaining(value: TResult): void;
}

type ComponentLocationReference = {
    component: ComponentInstance;
    parentSlot?: string;
    parentSlotIndex?: number;
};
type WalkComponentTreeActions<TContext> = {
    /** Replaces the component being visited with a new object */
    replaceComponent: (replacementComponent: ComponentInstance) => void;
    /** Removes the component being visited from the composition */
    removeComponent: () => void;
    /** Inserts a new component immediately after the current component in its parent slot */
    insertAfter: (components: ComponentInstance | ComponentInstance[]) => void;
    /** Aborts visitation of components that are in child slots of the current component */
    stopProcessingDescendants: () => void;
    /**
     * Set a new traversal context for descendants of this node.
     * If this is not called, `context` will automatically pass through.
     */
    setDescendantsContext: (context: TContext) => void;
    setChildContext: (child: ComponentInstance, context: TContext) => void;
};
/** Walks a composition's component tree, visiting each component instance depth-first, in order. */
declare function walkComponentTree<TContext = unknown>(component: ComponentInstance, visitor: (component: ComponentInstance, ancestorsAndSelf: Array<ComponentLocationReference>, actions: WalkComponentTreeActions<TContext>, 
/** Traversal context for this node */
currentContext: TContext | undefined) => void, initialContext?: TContext): void;
declare function getComponentPath(ancestorsAndSelf: Array<ComponentLocationReference>): string;
/** Returns the JSON pointer of a component based on its location */
declare function getComponentJsonPointer(ancestorsAndSelf: Array<ComponentLocationReference>, { withSlots }?: {
    withSlots?: boolean | undefined;
}): string;

interface ContextualEditingWindowData {
    framework?: ReadyMessage['framework'];
    version?: ReadyMessage['version'];
}
declare global {
    interface Window {
        __UNIFORM_CONTEXTUAL_EDITING__?: ContextualEditingWindowData;
    }
}
type SelectComponentMessage = {
    type: 'select-component';
    id: string;
};
type ReadyMessage = {
    type: 'ready';
    framework?: 'React' | 'Vue';
    /** A non-semantic version of the contextual editing SDK. */
    version?: number;
};
type UpdateCompositionMessage = {
    type: 'update-composition';
    composition: RootComponentInstance;
    hash: number | undefined;
};
type UpdateCompositionInternalMessage = {
    type: 'update-composition-internal';
    composition: RootComponentInstance;
    hash: number | undefined;
};
type AddComponentMessage = {
    type: 'add-component';
    parentId: string;
    slotName: string;
    index: number;
};
type MoveComponentMessage = {
    type: 'move-component';
    componentId: string;
    slotName: string;
    index: number;
    direction: 'up' | 'down';
};
type UpdateComponentParameterMessage = {
    type: 'update-component-parameter';
    componentId: string;
    parameterId: string;
    value: string | number | undefined;
};
type DismissPlaceholderMessage = {
    type: 'dismiss-placeholder';
    parentId: string;
    slotName: string;
};
type TriggerCompositionActionMessage = {
    type: 'trigger-composition-action';
    action: 'save' | 'publish';
};
type UpdatePreviewSettingsMessage = {
    type: 'update-preview-settings';
    settings: PreviewPanelSettings;
};
type ReportRenderedCompositionsMessage = {
    type: 'report-rendered-compositions';
    compositionIds: string[];
    url: string;
};
type ChannelMessage = SelectComponentMessage | ReadyMessage | UpdateCompositionMessage | UpdateCompositionInternalMessage | AddComponentMessage | MoveComponentMessage | DismissPlaceholderMessage | TriggerCompositionActionMessage | UpdatePreviewSettingsMessage | ReportRenderedCompositionsMessage | UpdateComponentParameterMessage | DismissPlaceholderMessage;
declare const isSelectComponentMessage: (message: ChannelMessage) => message is SelectComponentMessage;
declare const isReadyMessage: (message: ChannelMessage) => message is ReadyMessage;
declare const isUpdateCompositionMessage: (message: ChannelMessage) => message is UpdateCompositionMessage;
declare const isUpdateCompositionInternalMessage: (message: ChannelMessage) => message is UpdateCompositionInternalMessage;
declare const isAddComponentMessage: (message: ChannelMessage) => message is AddComponentMessage;
declare const isMovingComponentMessage: (message: ChannelMessage) => message is MoveComponentMessage;
declare const isUpdateComponentParameterMessage: (message: ChannelMessage) => message is UpdateComponentParameterMessage;
declare const isDismissPlaceholderMessage: (message: ChannelMessage) => message is DismissPlaceholderMessage;
declare const isTriggerCompositionActionMessage: (message: ChannelMessage) => message is TriggerCompositionActionMessage;
declare const isUpdatePreviewSettingsMessage: (message: ChannelMessage) => message is UpdatePreviewSettingsMessage;
declare const isReportRenderedCompositionsMessage: (message: ChannelMessage) => message is ReportRenderedCompositionsMessage;
type MessageHandler = (message: ChannelMessage, originalEvent: MessageEvent) => void;
type Channel = {
    on: (types: ChannelMessage['type'][] | ChannelMessage['type'], handler: MessageHandler) => () => void;
    ready: () => void;
    destroy: () => void;
    selectComponent: (id: string) => void;
    updateComposition: (composition: RootComponentInstance, secret?: string) => void;
    updateCompositionInternal: (composition: RootComponentInstance, hash?: number) => void;
    addComponent: (options: Omit<AddComponentMessage, 'type'>) => void;
    moveComponent: (options: Omit<MoveComponentMessage, 'type'>) => void;
    updateComponentParameter: (options: Omit<UpdateComponentParameterMessage, 'type'>) => void;
    dismissPlaceholder: (options: Omit<DismissPlaceholderMessage, 'type'>) => void;
    triggerCompositionAction: (options: Omit<TriggerCompositionActionMessage, 'type'>) => void;
    updatePreviewSettings: (options: Omit<UpdatePreviewSettingsMessage, 'type'>) => void;
    reportRenderedCompositions: (options: Omit<ReportRenderedCompositionsMessage, 'type'>) => void;
};
declare const createCanvasChannel: ({ listenTo, broadcastTo, }: {
    listenTo: Window[];
    broadcastTo: Window[];
}) => Channel;

/**
 * Pusher-js is large (80k) and not tree shakable so it is always bundled if directly referenced,
 * when it's only needed during preview mode. To avoid bundling it for all, we use an old-school
 * write-a-script-tag hack to load it in a poor man's approximation of a dynamic import ;)
 */
type ChannelSubscription = {
    addEventHandler: (eventName: string, handler: (data: unknown) => void) => () => void;
    unsubscribe: () => void;
};
type PreviewEventBus = {
    subscribe: (channel: string) => ChannelSubscription;
};
declare global {
    interface Window {
        Pusher?: typeof Pusher;
        __UNIFORM_EVENT_BUS__?: PreviewEventBus;
    }
}
/**
 * Creates an event bus client to receive updates from Canvas
 * IMPORTANT: in a server-side context this will always return undefined
 * IMPORTANT: in a browser context this is cached in window and does not create multiple instances
 */
declare function createEventBus(): Promise<PreviewEventBus | undefined>;

type EventNames = 'updated';

declare function getChannelName(projectId: string, compositionId: string, state: number): string;

type SubscribeToCompositionOptions = {
    projectId: string;
    compositionId: string;
    compositionState: number;
    callback: (data: unknown) => void;
    eventBus: PreviewEventBus;
    event: EventNames;
};
type UnsubscribeCallback = () => void;
/** Subscribes to a composition event */
declare function subscribeToComposition({ projectId, compositionId, compositionState, eventBus: { subscribe }, callback, event, }: SubscribeToCompositionOptions): UnsubscribeCallback;

type RouteClientOptions = Omit<ClientOptions, 'apiHost'> & {
    edgeApiHost?: string;
};
/** A route API response with edgehancer composition result */
type ResolvedRouteGetResponse = RouteGetResponseNotFound | RouteGetResponseRedirect | RouteGetResponseEdgehancedComposition;
/**
 * Resolves a route using Uniform Project Map and Uniform Redirects,
 * returning a composition, redirection, or not found result.
 */
declare class unstable_RouteClient extends ApiClient<RouteClientOptions> {
    private edgeApiHost;
    constructor(options: RouteClientOptions);
    /** Fetches lists of Canvas compositions, optionally by type */
    getRoute(options?: Omit<RouteGetParameters, 'projectId'>): Promise<ResolvedRouteGetResponse>;
}

type BindVariablesResult<TValue> = {
    boundCount: number;
    result: TValue;
    errors?: string[];
};
type BindVariablesToObjectOptions<T> = {
    /** The object to bind variables to. Only strings or objects are bound. */
    value: T;
    recursivePath?: string;
} & Omit<BindVariablesOptions, 'value'>;
/**
 * Binds composition variables to an object whose string keys may have variable expressions in them.
 * Binding is recursive.
 */
declare function bindVariablesToObject<T>(options: BindVariablesToObjectOptions<T>): BindVariablesResult<T>;

type BindVariablesOptions = {
    /** Current variable values table */
    variables: DataResourceVariables;
    /** String value to bind variables to */
    value: string;
    /**
     * Text prefix for any variable binding errors that might be returned
     * @default "Variable"
     */
    errorPrefix?: string;
    /**
     * Optionally provide overridden binding behaviour with a function.
     * Default behaviour:
     * - If variable is not defined, its expression is replaced by empty string and an error is returned
     * - If variable is defined, its expression is replaced by its value
     * @param variableName The variable name referred to in the `value` string. This is the name inside the ${} expression.
     * @param variables The current variables table.
     * @param errors Errors array. Push to it to add errors to the result.
     * @returns New value for the variable reference expression, will replace the whole ${} in the result.
     */
    handleBinding?: (variableName: string, variables: DataResourceVariables, errors: string[]) => string;
};
/**
 * Binds variables to a string that could have variable values in it.
 * Variables are referenced in the string as ${variableName}.
 * Literal variable values are escaped with a backslash, e.g. \${literal}
 */
declare function bindVariables({ variables, value, errorPrefix, handleBinding, }: BindVariablesOptions): BindVariablesResult<string>;

/** Public ID of Canvas personalization component type */
declare const CANVAS_PERSONALIZE_TYPE = "$personalization";
/** Public ID of Canvas A/B test component type */
declare const CANVAS_TEST_TYPE = "$test";
/** Public ID of Canvas localization component type */
declare const CANVAS_LOCALIZATION_TYPE = "$localization";
/** Public ID of the intent tag parameter on the Canvas personalization component type */
declare const CANVAS_INTENT_TAG_PARAM = "intentTag";
/** Public ID of the locale parameter on Canvas components */
declare const CANVAS_LOCALE_TAG_PARAM = "locale";
/** Name of the slot on CANVAS_PERSONALIZE_TYPE */
declare const CANVAS_PERSONALIZE_SLOT = "pz";
/** Name of the slot on CANVAS_TEST_TYPE */
declare const CANVAS_TEST_SLOT = "test";
/** Name of the slot on CANVAS_TEST_TYPE */
declare const CANVAS_LOCALIZATION_SLOT = "localized";
/** Constant for a draft composition state. Subject to change. */
declare const CANVAS_DRAFT_STATE = 0;
/** Constant for a published composition state. Subject to change. */
declare const CANVAS_PUBLISHED_STATE = 64;
/** Public ID of the Uniform Context personalization parameter on Canvas components */
declare const CANVAS_PERSONALIZATION_PARAM = "$pzCrit";
/** Public ID of the Uniform Context test variant parameter on Canvas components */
declare const CANVAS_TEST_VARIANT_PARAM = "$tstVrnt";
/** Public ID of the Uniform Context enrichment tag parameter on Canvas components */
declare const CANVAS_ENRICHMENT_TAG_PARAM = "$enr";
/** The name of the query string used to detect if we are in in-context editing mode */
declare const IN_CONTEXT_EDITOR_QUERY_STRING_PARAM = "is_incontext_editing_mode";
/** The value of "data-role" in the component start `<script>` tag */
declare const IN_CONTEXT_EDITOR_COMPONENT_START_ROLE = "uniform-component-start";
/** The value of "data-role" in the component end `<script>` tag */
declare const IN_CONTEXT_EDITOR_COMPONENT_END_ROLE = "uniform-component-end";
/** The ID of the Contextual Editing script that gets embedded in frontend apps */
declare const IN_CONTEXT_EDITOR_EMBED_SCRIPT_ID = "uniform-canvas-preview-script";
/**
 * The name of the attribute added to the elements rendered by Uniform.
 * Use to allow interacting with them by default in the preview panel
 */
declare const IS_RENDERED_BY_UNIFORM_ATTRIBUTE = "data-is-rendered-by-uniform";
/** The ID we give to placeholder components */
declare const PLACEHOLDER_ID = "placeholder";
/** Contextual editing empty composition, used as a placeholder while waiting for the composition to be send by the editor. */
declare const EMPTY_COMPOSITION: {
    _id: string;
    _name: string;
    type: string;
};
/** Minimal value for Edgehancers Cache TTL (in seconds) */
declare const EDGE_MIN_CACHE_TTL = 15;
/** Maximal value for Edgehancers Cache TTL (in seconds) */
declare const EDGE_MAX_CACHE_TTL = 600;
/** Default value for Edgehancers Cache TTL (in seconds) */
declare const EDGE_DEFAULT_CACHE_TTL = 30;
/** A value that indicates that Edgehancers caching is disabled */
declare const EDGE_CACHE_DISABLED = -1;
/** Minimal value for Edgehancers Long Term Cache TTL (in hours) */
declare const EDGE_MIN_L2_CACHE_TTL_IN_HOURS = 1;
/** Maximal value for Edgehancers Long Term Cache TTL (in hours) */
declare const EDGE_MAX_L2_CACHE_TTL_IN_HOURS: number;
/** Default value for Edgehancers Long Term Cache TTL (in hours) */
declare const EDGE_DEFAULT_L2_CACHE_TTL_IN_HOURS = 24;

/**
 * Creates an enhancer based on an API route.
 * This is mainly used to create an enhancer for Contextual Editing, which can be passed to the `contextualEditingEnhancer` prop of `<UniformComposition />`.
 *
 * @example
 * ```ts
 * const enhance = createUniformApiEnhancer({
 *   apiUrl: '/api/preview',
 * });
 * ```
 */
declare const createUniformApiEnhancer: ({ apiUrl }: {
    apiUrl: string;
}) => (message: Pick<UpdateCompositionMessage, 'composition' | 'hash'>) => Promise<{
    type: string;
    parameters?: {
        [key: string]: {
            value: unknown;
            type: string;
            connectedData?: {
                pointer: string;
                syntax: "jptr";
            } | undefined;
        };
    } | undefined;
    variant?: string | undefined;
    projectMapNodes?: {
        id: string;
        path: string;
        projectMapId: string;
    }[] | undefined;
    slots?: {
        [key: string]: {
            type: string;
            parameters?: {
                [key: string]: {
                    value: unknown;
                    type: string;
                    connectedData?: {
                        pointer: string;
                        syntax: "jptr";
                    } | undefined;
                };
            } | undefined;
            variant?: string | undefined;
            slots?: {
                [key: string]: any[];
            } | undefined;
            _id?: string | undefined;
            _pattern?: string | undefined;
            _dataResources?: {
                [key: string]: {
                    type: string;
                    isPatternParameter?: boolean | undefined;
                    ignorePatternParameterDefault?: boolean | undefined;
                    variables?: {
                        [key: string]: string;
                    } | undefined;
                };
            } | undefined;
            _patternDataResources?: {
                [key: string]: {
                    type: string;
                    isPatternParameter?: boolean | undefined;
                    ignorePatternParameterDefault?: boolean | undefined;
                    variables?: {
                        [key: string]: string;
                    } | undefined;
                };
            } | undefined;
            _patternError?: "NOTFOUND" | "CYCLIC" | undefined;
            _overrides?: {
                [key: string]: {
                    parameters?: {
                        [key: string]: {
                            value: unknown;
                            type: string;
                            connectedData?: {
                                pointer: string;
                                syntax: "jptr";
                            } | undefined;
                        };
                    } | undefined;
                    variant?: string | undefined;
                };
            } | undefined;
            _overridability?: {
                parameters?: {
                    [key: string]: "no" | "yes";
                } | undefined;
                variants?: boolean | undefined;
            } | undefined;
        }[];
    } | undefined;
    _id: string;
    _slug?: string | null | undefined;
    _name: string;
    _dataResources?: {
        [key: string]: {
            type: string;
            isPatternParameter?: boolean | undefined;
            ignorePatternParameterDefault?: boolean | undefined;
            variables?: {
                [key: string]: string;
            } | undefined;
        };
    } | undefined;
    _overrides?: {
        [key: string]: {
            parameters?: {
                [key: string]: {
                    value: unknown;
                    type: string;
                    connectedData?: {
                        pointer: string;
                        syntax: "jptr";
                    } | undefined;
                };
            } | undefined;
            variant?: string | undefined;
        };
    } | undefined;
    _overridability?: {
        parameters?: {
            [key: string]: "no" | "yes";
        } | undefined;
        variants?: boolean | undefined;
    } | undefined;
}>;

declare const generateHash: ({ composition, secret, }: {
    composition: RootComponentInstance;
    secret: string | undefined;
}) => number | undefined;

/** Determines if a given Canvas component type is a system-defined type */
declare const isSystemComponentDefinition: (componentType: string) => boolean;

/**
 * Converts components in a slot into personalized variations (based on each component's intent tag in Canvas) suitable to pass to a personalize component
 * Useful when implementing custom personalization settings for Canvas components.
 */
declare function mapSlotToPersonalizedVariations(slot: ComponentInstance[] | undefined): Array<ComponentInstance & PersonalizedVariant>;

/**
 * Converts components in a slot into test variations (based on each component's Context tag in Canvas) suitable to pass to a personalize component
 * Useful when implementing custom test settings for Canvas components.
 */
declare function mapSlotToTestVariations(slot: ComponentInstance[] | undefined): Array<ComponentInstance & TestVariant>;

declare const CanvasClientError: typeof ApiClientError;

export { AddComponentMessage, BatchEnhancer, BatchEntry, BatchInvalidationPayload, BindVariablesOptions, BindVariablesResult, BindVariablesToObjectOptions, CANVAS_DRAFT_STATE, CANVAS_ENRICHMENT_TAG_PARAM, CANVAS_INTENT_TAG_PARAM, CANVAS_LOCALE_TAG_PARAM, CANVAS_LOCALIZATION_SLOT, CANVAS_LOCALIZATION_TYPE, CANVAS_PERSONALIZATION_PARAM, CANVAS_PERSONALIZE_SLOT, CANVAS_PERSONALIZE_TYPE, CANVAS_PUBLISHED_STATE, CANVAS_TEST_SLOT, CANVAS_TEST_TYPE, CANVAS_TEST_VARIANT_PARAM, CanvasClient, CanvasClientError, CanvasDefinitions, Channel, ChannelMessage, ChannelSubscription, ChildEnhancerBuilder, ComponentDefinition, ComponentDefinitionDeleteParameters, ComponentDefinitionGetParameters, ComponentDefinitionGetResponse, ComponentDefinitionParameter, ComponentDefinitionPermission, ComponentDefinitionPutParameters, ComponentDefinitionSlot, ComponentDefinitionSlugSettings, ComponentDefinitionVariant, ComponentEnhancer, ComponentEnhancerFunction, ComponentEnhancerOptions, ComponentInstance, ComponentLocationReference, ComponentOverridability, ComponentOverride, ComponentOverrides, ComponentParameter, ComponentParameterContextualEditing, ComponentParameterEnhancer, ComponentParameterEnhancerFunction, ComponentParameterEnhancerOptions, CompositionDataDiagnostic, CompositionDeleteParameters, CompositionDiagnostics, CompositionGetByIdParameters, CompositionGetByNodeIdParameters, CompositionGetByNodePathParameters, CompositionGetBySlugParameters, CompositionGetListResponse, CompositionGetOrderBy, CompositionGetParameters, CompositionGetResponse, CompositionGetValidResponses, CompositionIssue, CompositionPatternIssue, CompositionPutParameters, CompositionRelationshipsClientOptions, CompositionRelationshipsDDefinitionGetResponse, CompositionRelationshipsDefinitionApi, CompositionRelationshipsDefinitionGetParameters, CompositionResolvedGetResponse, CompositionUIStatus, DataElementBindingIssue, DataElementConnectionDefinition, DataResolutionConfigIssue, DataResolutionOption, DataResolutionOptionNegative, DataResolutionOptionPositive, DataResolutionParameters, DataResourceDefinition, DataResourceDefinitions, DataResourceInputIssue, DataResourceIssue, DataResourceVariables, DataSource, DataSourceClient, DataSourceDeleteParameters, DataSourceGetParameters, DataSourceGetResponse, DataSourcePutParameters, DataSourcesGetParameters, DataSourcesGetResponse, DataType, DataTypeClient, DataTypeDeleteParameters, DataTypeGetParameters, DataTypeGetResponse, DataTypePutParameters, DataVariableDefinition, DismissPlaceholderMessage, EDGE_CACHE_DISABLED, EDGE_DEFAULT_CACHE_TTL, EDGE_DEFAULT_L2_CACHE_TTL_IN_HOURS, EDGE_MAX_CACHE_TTL, EDGE_MAX_L2_CACHE_TTL_IN_HOURS, EDGE_MIN_CACHE_TTL, EDGE_MIN_L2_CACHE_TTL_IN_HOURS, EMPTY_COMPOSITION, EnhancerBuilder, EnhancerContext, EnhancerError, EventNames, IN_CONTEXT_EDITOR_COMPONENT_END_ROLE, IN_CONTEXT_EDITOR_COMPONENT_START_ROLE, IN_CONTEXT_EDITOR_EMBED_SCRIPT_ID, IN_CONTEXT_EDITOR_QUERY_STRING_PARAM, IS_RENDERED_BY_UNIFORM_ATTRIBUTE, InvalidationPayload, InvalidationResult, LimitPolicy, LinkComponentParameterValue, LinkParamConfiguration, LinkParamValue, LinkParameterType, LinkTypeConfiguration, MessageHandler, MoveComponentMessage, NonProjectMapLinkParamValue, OverrideIssue, OverrideOptions, PLACEHOLDER_ID, PreviewEventBus, PreviewPanelSettings, ProjectMapLinkComponentParameterValue, ProjectMapLinkParamValue, ReadyMessage, ReportRenderedCompositionsMessage, ResolvedRouteGetResponse, RichTextBuiltInElement, RichTextBuiltInFormat, RichTextParamConfiguration, RichTextParamValue, RootComponentInstance, RouteDynamicInputs, RouteGetParameters, RouteGetResponse, RouteGetResponseComposition, RouteGetResponseEdgehancedComposition, RouteGetResponseNotFound, RouteGetResponseRedirect, SelectComponentMessage, SpecificProjectMap, SubscribeToCompositionOptions, TriggerCompositionActionMessage, UncachedCanvasClient, UniqueBatchEntries, UnsubscribeCallback, UpdateComponentParameterMessage, UpdateCompositionInternalMessage, UpdateCompositionMessage, UpdatePreviewSettingsMessage, UsageTrackingApi, UsageTrackingGetParameters, UsageTrackingGetResponse, UsageTrackingPostParameters, UsageTrackingPostResponse, WalkComponentTreeActions, bindVariables, bindVariablesToObject, compose, createBatchEnhancer, createCanvasChannel, createEventBus, createLimitPolicy, createUniformApiEnhancer, enhance, extractLocales, generateHash, getChannelName, getComponentJsonPointer, getComponentPath, isAddComponentMessage, isDismissPlaceholderMessage, isMovingComponentMessage, isReadyMessage, isReportRenderedCompositionsMessage, isSelectComponentMessage, isSystemComponentDefinition, isTriggerCompositionActionMessage, isUpdateComponentParameterMessage, isUpdateCompositionInternalMessage, isUpdateCompositionMessage, isUpdatePreviewSettingsMessage, localize, mapSlotToPersonalizedVariations, mapSlotToTestVariations, nullLimitPolicy, subscribeToComposition, unstable_CompositionRelationshipClient, unstable_RouteClient, walkComponentTree };
