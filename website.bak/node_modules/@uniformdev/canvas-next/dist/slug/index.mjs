import {
  resolveSlugFromParams
} from "../chunk-TR7V6ABJ.mjs";

// src/slug/withUniformGetServerSideProps.ts
import {
  CANVAS_DRAFT_STATE,
  CANVAS_PUBLISHED_STATE,
  CanvasClient,
  EMPTY_COMPOSITION,
  logCompositionResponse
} from "@uniformdev/canvas";
var withUniformGetServerSideProps = (options) => {
  const canvasClient = (options == null ? void 0 : options.client) || new CanvasClient({
    apiKey: process.env.UNIFORM_API_KEY,
    projectId: process.env.UNIFORM_PROJECT_ID,
    apiHost: process.env.UNIFORM_CLI_BASE_URL,
    edgeApiHost: process.env.UNIFORM_CLI_BASE_EDGE_URL
  });
  return async function wrappedGetServerSideProps(context) {
    var _a;
    const { preview, previewData } = context;
    let composition = void 0;
    let slug = (options == null ? void 0 : options.prefix) ? context.resolvedUrl.replace(new RegExp(`^${options.prefix}`), "") : context.resolvedUrl;
    if (options == null ? void 0 : options.modifySlug) {
      slug = options.modifySlug(slug, context);
    }
    if (previewData == null ? void 0 : previewData.isUniformContextualEditing) {
      composition = { ...EMPTY_COMPOSITION, _id: (_a = previewData.compositionId) != null ? _a : EMPTY_COMPOSITION._id };
    } else {
      try {
        const time = Date.now();
        const response = await canvasClient.getCompositionBySlug({
          ...options == null ? void 0 : options.requestOptions,
          slug,
          state: preview || (options == null ? void 0 : options.preview) ? CANVAS_DRAFT_STATE : CANVAS_PUBLISHED_STATE
        });
        const duration = Date.now() - time;
        composition = response.composition;
        if (!(options == null ? void 0 : options.silent)) {
          logCompositionResponse(response, duration);
        }
      } catch (e) {
        console.error("[canvas-next] Failed to fetch composition", e);
        return {
          notFound: true
        };
      }
    }
    const ret = (options == null ? void 0 : options.callback) ? await options.callback(context, composition) : { props: {} };
    if (composition && Object.hasOwn(ret, "props")) {
      const casted = ret;
      casted.props["data"] = composition;
    }
    return ret;
  };
};

// src/slug/withUniformGetStaticPaths.ts
import {
  CANVAS_DRAFT_STATE as CANVAS_DRAFT_STATE2,
  CANVAS_PUBLISHED_STATE as CANVAS_PUBLISHED_STATE2,
  CanvasClient as CanvasClient2
} from "@uniformdev/canvas";
var withUniformGetStaticPaths = (options) => {
  return async function wrappedGetStaticPaths() {
    var _a;
    const canvasClient = (_a = options == null ? void 0 : options.client) != null ? _a : new CanvasClient2({
      apiKey: process.env.UNIFORM_API_KEY,
      projectId: process.env.UNIFORM_PROJECT_ID,
      apiHost: process.env.UNIFORM_CLI_BASE_URL,
      edgeApiHost: process.env.UNIFORM_CLI_BASE_EDGE_URL
    });
    const response = await canvasClient.getCompositionList({
      ...options == null ? void 0 : options.requestOptions,
      state: (options == null ? void 0 : options.preview) ? CANVAS_DRAFT_STATE2 : CANVAS_PUBLISHED_STATE2
    });
    const compositions = (options == null ? void 0 : options.callback) ? await options.callback(response.compositions) : response.compositions;
    const paths = compositions.filter((reference) => !!reference.composition._slug).map((composition) => {
      var _a2;
      return `${(_a2 = options == null ? void 0 : options.prefix) != null ? _a2 : ""}${composition.composition._slug}`;
    });
    return {
      paths,
      fallback: true
    };
  };
};

// src/slug/withUniformGetStaticProps.ts
import {
  CANVAS_DRAFT_STATE as CANVAS_DRAFT_STATE3,
  CANVAS_PUBLISHED_STATE as CANVAS_PUBLISHED_STATE3,
  CanvasClient as CanvasClient3,
  EMPTY_COMPOSITION as EMPTY_COMPOSITION2,
  logCompositionResponse as logCompositionResponse2
} from "@uniformdev/canvas";
var withUniformGetStaticProps = (options) => {
  var _a;
  const canvasClient = (_a = options == null ? void 0 : options.client) != null ? _a : new CanvasClient3({
    apiKey: process.env.UNIFORM_API_KEY,
    projectId: process.env.UNIFORM_PROJECT_ID,
    apiHost: process.env.UNIFORM_CLI_BASE_URL,
    edgeApiHost: process.env.UNIFORM_CLI_BASE_EDGE_URL
  });
  return async function wrappedGetStaticProps(context) {
    var _a2;
    let slugString = resolveSlugFromParams({
      param: options == null ? void 0 : options.param,
      params: context == null ? void 0 : context.params
    });
    if (options == null ? void 0 : options.modifySlug) {
      slugString = options.modifySlug(slugString, context);
    }
    const { preview, previewData } = context;
    let composition = void 0;
    if (previewData == null ? void 0 : previewData.isUniformContextualEditing) {
      composition = { ...EMPTY_COMPOSITION2, _id: (_a2 = previewData.compositionId) != null ? _a2 : EMPTY_COMPOSITION2._id };
    } else {
      try {
        const time = Date.now();
        const response = await canvasClient.getCompositionBySlug({
          slug: slugString,
          state: preview || (options == null ? void 0 : options.preview) ? CANVAS_DRAFT_STATE3 : CANVAS_PUBLISHED_STATE3,
          ...options == null ? void 0 : options.requestOptions
        });
        const duration = Date.now() - time;
        composition = response.composition;
        if (!(options == null ? void 0 : options.silent)) {
          logCompositionResponse2(response, duration);
        }
      } catch (e) {
        console.error("[canvas-next] Failed to fetch composition", e);
        return {
          notFound: true
        };
      }
    }
    const ret = options.callback ? await options.callback(context, composition) : { props: {} };
    if (composition && Object.hasOwn(ret, "props")) {
      const casted = ret;
      casted.props["data"] = composition;
    }
    return ret;
  };
};

// src/slug/index.ts
var getServerSideProps = withUniformGetServerSideProps();
var getStaticProps = withUniformGetStaticProps({ param: "slug" });
var getStaticPaths = withUniformGetStaticPaths();
export {
  getServerSideProps,
  getStaticPaths,
  getStaticProps,
  withUniformGetServerSideProps,
  withUniformGetStaticPaths,
  withUniformGetStaticProps
};
