import * as next from 'next';
import { GetServerSidePropsContext, PreviewData, GetServerSideProps, GetStaticPropsContext, GetStaticProps } from 'next';
import { c as UniformGetServerSideProps, a as UniformPreviewData, b as UniformGetStaticProps } from '../models-092c0912.js';
import * as querystring from 'querystring';
import { ParsedUrlQuery } from 'querystring';
import * as _uniformdev_canvas from '@uniformdev/canvas';
import { CanvasClient, DataResolutionOption } from '@uniformdev/canvas';
export { w as withUniformGetStaticPaths } from '../withUniformGetStaticPaths-6a31a8f8.js';
import '@uniformdev/canvas-react';
import '@uniformdev/project-map';

declare const withUniformGetServerSideProps: <TProps extends {
    [key: string]: any;
} = {
    [key: string]: any;
}>(options?: {
    /** If you need to override the default client, you can pass it here */
    client?: CanvasClient | undefined;
    /** A string that you want to strip from the resolved context.resolvedUrl. Useful when calling from a nested folder which is not part of your project map structure */
    prefix?: string | undefined;
    /** Useful when you need to modify the path passed to the API */
    modifyPath?: ((path: string, context: GetServerSidePropsContext<ParsedUrlQuery, PreviewData>) => string) | undefined;
    /** Set to true if you want to include draft compositions */
    preview?: boolean | undefined;
    projectMapId?: string | undefined;
    /** Way to override getCompositionByNodePath request params */
    requestOptions?: Omit<Partial<{
        skipEnhance?: boolean | undefined;
        skipPatternResolution?: boolean | undefined;
        skipOverridesResolution?: boolean | undefined;
        state?: number | undefined;
        withComponentIDs?: boolean | undefined;
        withTotalCount?: boolean | undefined;
        withUIStatus?: boolean | undefined;
    } & Required<Pick<_uniformdev_canvas.CompositionGetParameters, "projectMapNodePath">> & _uniformdev_canvas.SpecificProjectMap & DataResolutionOption>, "state"> | undefined;
    /** Custom handler to specify return value and modify composition - e.g. enhance with CMS data */
    callback?: UniformGetServerSideProps<TProps> | undefined;
    /** Disables logging of response information and timings */
    silent?: boolean | undefined;
} | undefined) => GetServerSideProps<TProps, ParsedUrlQuery, UniformPreviewData>;

declare const withUniformGetStaticProps: <TProps extends {
    [key: string]: any;
} = {
    [key: string]: any;
}>(options: {
    projectMapId?: string | undefined;
    /** Name of dynamic parameter coming from getStaticPath, usually specified in page file name (e.g. [...slug].jsx will have param = 'slug' */
    param: string;
    /** Useful when you need to modify the path passed to the API */
    modifyPath?: ((path: string, context: GetStaticPropsContext<ParsedUrlQuery, UniformPreviewData>) => string) | undefined;
    /** Set to true if you want to include draft compositions */
    preview?: boolean | undefined;
    /** If you need to override the default client, you can pass it here */
    client?: CanvasClient | undefined;
    /** Way to override getCompositionByNodePath request params */
    requestOptions?: Omit<Partial<{
        skipEnhance?: boolean | undefined;
        skipPatternResolution?: boolean | undefined;
        skipOverridesResolution?: boolean | undefined;
        state?: number | undefined;
        withComponentIDs?: boolean | undefined;
        withTotalCount?: boolean | undefined;
        withUIStatus?: boolean | undefined;
    } & Required<Pick<_uniformdev_canvas.CompositionGetParameters, "projectMapNodePath">> & _uniformdev_canvas.SpecificProjectMap & DataResolutionOption>, "state"> | undefined;
    /** Custom handler to specify return value and modify composition - e.g. enhance with CMS data */
    callback?: UniformGetStaticProps<TProps> | undefined;
    /** Disables logging of response information and timings */
    silent?: boolean | undefined;
}) => GetStaticProps<TProps, ParsedUrlQuery, UniformPreviewData>;

declare const getServerSideProps: next.GetServerSideProps<{
    [key: string]: any;
}, querystring.ParsedUrlQuery, UniformPreviewData>;
/** Ready to go getStaticProps for dynamic route with 'path' param for [[...path]].jsx */
declare const getStaticProps: next.GetStaticProps<{
    [key: string]: any;
}, querystring.ParsedUrlQuery, UniformPreviewData>;
declare const getStaticPaths: () => Promise<{
    paths: string[] | undefined;
    fallback: boolean;
}>;

export { getServerSideProps, getStaticPaths, getStaticProps, withUniformGetServerSideProps, withUniformGetStaticProps };
