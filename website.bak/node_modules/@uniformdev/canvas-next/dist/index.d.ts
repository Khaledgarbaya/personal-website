import { ParsedUrlQuery } from 'querystring';
export { U as UniformCompositionNextPage, c as UniformGetServerSideProps, b as UniformGetStaticProps, a as UniformPreviewData } from './models-092c0912.js';
import { NextApiHandler, NextApiRequest } from 'next';
import { RootComponentInstance } from '@uniformdev/canvas';
import '@uniformdev/canvas-react';

declare const resolveSlugFromParams: ({ param, params, }: {
    param: string | undefined;
    params: ParsedUrlQuery | undefined;
}) => string;

type ResolveFullPath = (options: {
    /** The ID of the composition */
    id?: string;
    /** The slug of the composition */
    slug?: string;
    /** The path of the project map node attached to the composition, if there is one */
    path?: string;
    /** The preview locale selected in Visual Canvas, available only if Localization is set up */
    locale?: string;
}) => string | undefined;
type CreatePreviewHandlerGetOptions = {
    secret?: () => string;
    /**
     * Should return the full path to redirect to. Will respond with `400` error if `undefined` is returned.
     * defaults to a function that returns the `path` if truthy, otherwise returns `slug`.
     */
    resolveFullPath?: ResolveFullPath;
};
type CreatePreviewHandlerGet = (options?: CreatePreviewHandlerGetOptions) => NextApiHandler;
declare const createPreviewHandlerGet: CreatePreviewHandlerGet;

type CreatePreviewHandlerPostOptions = {
    secret?: () => string;
    enhance?: (composition: RootComponentInstance, context: {
        req: NextApiRequest;
    }) => Promise<void>;
};
type CreatePreviewHandlerPost = (options?: CreatePreviewHandlerPostOptions) => NextApiHandler;
declare const createPreviewHandlerPost: CreatePreviewHandlerPost;

type CreatePreviewHandler = (options?: CreatePreviewHandlerGetOptions & CreatePreviewHandlerPostOptions) => NextApiHandler;
declare const createPreviewHandler: CreatePreviewHandler;

export { CreatePreviewHandler, CreatePreviewHandlerGet, CreatePreviewHandlerGetOptions, CreatePreviewHandlerPost, CreatePreviewHandlerPostOptions, ResolveFullPath, createPreviewHandler, createPreviewHandlerGet, createPreviewHandlerPost, resolveSlugFromParams };
