import * as next from 'next';
import { GetServerSidePropsContext, GetServerSidePropsResult, GetServerSideProps, GetStaticPropsContext, GetStaticPropsResult, GetStaticProps } from 'next';
import { a as UniformPreviewData } from '../models-092c0912.js';
import * as querystring from 'querystring';
import { ParsedUrlQuery } from 'querystring';
export { w as withUniformGetStaticPaths } from '../withUniformGetStaticPaths-6a31a8f8.js';
import { RouteGetResponseEdgehancedComposition, RouteGetResponseNotFound, RouteGetResponseRedirect, unstable_RouteClient, RouteGetParameters, RootComponentInstance } from '@uniformdev/canvas';
import '@uniformdev/canvas-react';
import '@uniformdev/project-map';

type HandleRouteCompositionFunction<TContext, TResult> = (composition: RouteGetResponseEdgehancedComposition, context: TContext, defaultHandler: (composition: RouteGetResponseEdgehancedComposition) => Promise<TResult | null> | TResult | null, duration: number) => Promise<TResult | null> | TResult | null;
type HandleRouteNotFoundFunction<TContext, TResult> = (result: RouteGetResponseNotFound, context: TContext, defaultHandler: (result: RouteGetResponseNotFound) => TResult, duration: number) => TResult;
type HandleRouteRedirectFunction<TContext, TResult> = (requestUrl: string, redirect: RouteGetResponseRedirect, context: TContext, defaultHandler: (redirect: RouteGetResponseRedirect) => TResult, duration: number) => TResult;
type RouteHandlerOptions<TContext, TResult, TSuccessResult> = {
    /** If you need to override the default client, you can pass it here */
    client?: unstable_RouteClient;
    /** A string that you want to strip from the resolved context.resolvedUrl. Useful when calling from a nested folder which is not part of your project map structure */
    prefix?: string;
    /** Useful when you need to modify the path passed to the API */
    modifyPath?: (path: string, context: TContext) => string;
    /** The project map ID to connect to. If not set, the default project map for the configured project will be used. */
    projectMapId?: string;
    /** Way to override getRoute request params */
    requestOptions?: Partial<RouteGetParameters>;
    /** Disables logging of response information and timings */
    silent?: boolean;
    /** Override handling of a composition route response. Return null to signal not found. */
    handleComposition?: HandleRouteCompositionFunction<TContext, TSuccessResult>;
    /** Override default handling of a redirect route response */
    handleRedirect?: HandleRouteRedirectFunction<TContext, TResult>;
    /**
     * Override default handling of a not found route response
     * NOTE: not called when the API returns a 404 error (project map not found), only when the route result is not found
     */
    handleNotFound?: HandleRouteNotFoundFunction<TContext, TResult>;
};

/**
 * Creates an implementation of `getServerSideProps` using the Uniform Route API.
 * Static and dynamic routing as well as redirection is automatically supported.
 * Custom behavior can be added by passing in options to hook to specific processing events.
 */
declare const unstable_withUniformGetServerSideProps: <TProps extends {
    [key: string]: any;
} = {
    data: RootComponentInstance;
}>(options?: RouteHandlerOptions<GetServerSidePropsContext<ParsedUrlQuery, UniformPreviewData>, GetServerSidePropsResult<never>, GetServerSidePropsResult<TProps>> | undefined) => GetServerSideProps<TProps, ParsedUrlQuery, UniformPreviewData>;

/**
 * Creates an implementation of `getServerSideProps` using the Uniform Route API.
 * Static and dynamic routing as well as redirection is automatically supported.
 * Custom behavior can be added by passing in options to hook to specific processing events.
 */
declare const unstable_withUniformGetStaticProps: <TProps extends {
    [key: string]: any;
} = {
    data: RootComponentInstance;
}>(options?: (RouteHandlerOptions<GetStaticPropsContext<ParsedUrlQuery, UniformPreviewData>, GetStaticPropsResult<never>, GetStaticPropsResult<TProps>> & {
    /** Name of dynamic parameter coming from getStaticPath, usually specified in page file name (e.g. [...slug].jsx will have param = 'slug' */
    param?: string | undefined;
}) | undefined) => GetStaticProps<TProps, ParsedUrlQuery, UniformPreviewData>;

declare const unstable_getServerSideProps: next.GetServerSideProps<{
    data: {
        type: string;
        parameters?: {
            [key: string]: {
                value: unknown;
                type: string;
                connectedData?: {
                    pointer: string;
                    syntax: "jptr";
                } | undefined;
            };
        } | undefined;
        variant?: string | undefined;
        projectMapNodes?: {
            id: string;
            path: string;
            projectMapId: string;
        }[] | undefined;
        slots?: {
            [key: string]: {
                type: string;
                parameters?: {
                    [key: string]: {
                        value: unknown;
                        type: string;
                        connectedData?: {
                            pointer: string;
                            syntax: "jptr";
                        } | undefined;
                    };
                } | undefined;
                variant?: string | undefined;
                slots?: {
                    [key: string]: any[];
                } | undefined;
                _id?: string | undefined;
                _pattern?: string | undefined;
                _dataResources?: {
                    [key: string]: {
                        type: string;
                        isPatternParameter?: boolean | undefined;
                        ignorePatternParameterDefault?: boolean | undefined;
                        variables?: {
                            [key: string]: string;
                        } | undefined;
                    };
                } | undefined;
                _patternDataResources?: {
                    [key: string]: {
                        type: string;
                        isPatternParameter?: boolean | undefined;
                        ignorePatternParameterDefault?: boolean | undefined;
                        variables?: {
                            [key: string]: string;
                        } | undefined;
                    };
                } | undefined;
                _patternError?: "NOTFOUND" | "CYCLIC" | undefined;
                _overrides?: {
                    [key: string]: {
                        parameters?: {
                            [key: string]: {
                                value: unknown;
                                type: string;
                                connectedData?: {
                                    pointer: string;
                                    syntax: "jptr";
                                } | undefined;
                            };
                        } | undefined;
                        variant?: string | undefined;
                    };
                } | undefined;
                _overridability?: {
                    parameters?: {
                        [key: string]: "yes" | "no";
                    } | undefined;
                    variants?: boolean | undefined;
                } | undefined;
            }[];
        } | undefined;
        _id: string;
        _slug?: string | null | undefined;
        _name: string;
        _dataResources?: {
            [key: string]: {
                type: string;
                isPatternParameter?: boolean | undefined;
                ignorePatternParameterDefault?: boolean | undefined;
                variables?: {
                    [key: string]: string;
                } | undefined;
            };
        } | undefined;
        _overrides?: {
            [key: string]: {
                parameters?: {
                    [key: string]: {
                        value: unknown;
                        type: string;
                        connectedData?: {
                            pointer: string;
                            syntax: "jptr";
                        } | undefined;
                    };
                } | undefined;
                variant?: string | undefined;
            };
        } | undefined;
        _overridability?: {
            parameters?: {
                [key: string]: "yes" | "no";
            } | undefined;
            variants?: boolean | undefined;
        } | undefined;
    };
}, querystring.ParsedUrlQuery, UniformPreviewData>;

declare const unstable_getStaticProps: next.GetStaticProps<{
    data: {
        type: string;
        parameters?: {
            [key: string]: {
                value: unknown;
                type: string;
                connectedData?: {
                    pointer: string;
                    syntax: "jptr";
                } | undefined;
            };
        } | undefined;
        variant?: string | undefined;
        projectMapNodes?: {
            id: string;
            path: string;
            projectMapId: string;
        }[] | undefined;
        slots?: {
            [key: string]: {
                type: string;
                parameters?: {
                    [key: string]: {
                        value: unknown;
                        type: string;
                        connectedData?: {
                            pointer: string;
                            syntax: "jptr";
                        } | undefined;
                    };
                } | undefined;
                variant?: string | undefined;
                slots?: {
                    [key: string]: any[];
                } | undefined;
                _id?: string | undefined;
                _pattern?: string | undefined;
                _dataResources?: {
                    [key: string]: {
                        type: string;
                        isPatternParameter?: boolean | undefined;
                        ignorePatternParameterDefault?: boolean | undefined;
                        variables?: {
                            [key: string]: string;
                        } | undefined;
                    };
                } | undefined;
                _patternDataResources?: {
                    [key: string]: {
                        type: string;
                        isPatternParameter?: boolean | undefined;
                        ignorePatternParameterDefault?: boolean | undefined;
                        variables?: {
                            [key: string]: string;
                        } | undefined;
                    };
                } | undefined;
                _patternError?: "NOTFOUND" | "CYCLIC" | undefined;
                _overrides?: {
                    [key: string]: {
                        parameters?: {
                            [key: string]: {
                                value: unknown;
                                type: string;
                                connectedData?: {
                                    pointer: string;
                                    syntax: "jptr";
                                } | undefined;
                            };
                        } | undefined;
                        variant?: string | undefined;
                    };
                } | undefined;
                _overridability?: {
                    parameters?: {
                        [key: string]: "yes" | "no";
                    } | undefined;
                    variants?: boolean | undefined;
                } | undefined;
            }[];
        } | undefined;
        _id: string;
        _slug?: string | null | undefined;
        _name: string;
        _dataResources?: {
            [key: string]: {
                type: string;
                isPatternParameter?: boolean | undefined;
                ignorePatternParameterDefault?: boolean | undefined;
                variables?: {
                    [key: string]: string;
                } | undefined;
            };
        } | undefined;
        _overrides?: {
            [key: string]: {
                parameters?: {
                    [key: string]: {
                        value: unknown;
                        type: string;
                        connectedData?: {
                            pointer: string;
                            syntax: "jptr";
                        } | undefined;
                    };
                } | undefined;
                variant?: string | undefined;
            };
        } | undefined;
        _overridability?: {
            parameters?: {
                [key: string]: "yes" | "no";
            } | undefined;
            variants?: boolean | undefined;
        } | undefined;
    };
}, querystring.ParsedUrlQuery, UniformPreviewData>;
declare const getStaticPaths: () => Promise<{
    paths: string[] | undefined;
    fallback: boolean;
}>;

export { HandleRouteCompositionFunction, HandleRouteNotFoundFunction, HandleRouteRedirectFunction, RouteHandlerOptions, getStaticPaths, unstable_getServerSideProps, unstable_getStaticProps, unstable_withUniformGetServerSideProps, unstable_withUniformGetStaticProps };
